
FreeRTOS_M4Cortex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005158  08005158  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005160  08005160  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00013414  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013428  20013428  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121ab  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026bf  00000000  00000000  000321ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f73  00000000  00000000  00036968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125d9  00000000  00000000  000598db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f1b  00000000  00000000  0006beb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141dcf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004748  00000000  00000000  00141e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005040 	.word	0x08005040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005040 	.word	0x08005040

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <task1_handler>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
static void task1_handler(void *parameters)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
	//char msg[50];
	while(1)
	{
		//snprintf(msg, 50, (char*) parameters);
	//	SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <task1_handler+0x4c>)
 8000574:	f000 fdcb 	bl	800110e <HAL_GPIO_TogglePin>
		waitstatus= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2000      	movs	r0, #0
 8000586:	f002 fadd 	bl	8002b44 <xTaskGenericNotifyWait>
 800058a:	60f8      	str	r0, [r7, #12]

		if(waitstatus==pdTRUE)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1ee      	bne.n	8000570 <task1_handler+0x8>
		{
			vTaskSuspendAll();
 8000592:	f002 f851 	bl	8002638 <vTaskSuspendAll>
			next_task = task2_handle;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <task1_handler+0x50>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <task1_handler+0x54>)
 800059c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800059e:	f002 f859 	bl	8002654 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <task1_handler+0x4c>)
 80005a8:	f000 fd98 	bl	80010dc <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f001 ff05 	bl	80023bc <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80005b2:	e7dd      	b.n	8000570 <task1_handler+0x8>
 80005b4:	40020000 	.word	0x40020000
 80005b8:	20000034 	.word	0x20000034
 80005bc:	2000003c 	.word	0x2000003c

080005c0 <task2_handler>:

	}
}

static void task2_handler(void *parameters)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
	//char msg[50];
	while(1)
	{
		//snprintf(msg, 50, (char*) parameters);
	//	SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <task2_handler+0x54>)
 80005cc:	f000 fd9f 	bl	800110e <HAL_GPIO_TogglePin>
		waitstatus= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 fab1 	bl	8002b44 <xTaskGenericNotifyWait>
 80005e2:	60f8      	str	r0, [r7, #12]

		if(waitstatus==pdTRUE)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d1ee      	bne.n	80005c8 <task2_handler+0x8>
			{
				vTaskSuspendAll();
 80005ea:	f002 f825 	bl	8002638 <vTaskSuspendAll>
				next_task = NULL;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <task2_handler+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
				xTaskResumeAll();
 80005f4:	f002 f82e 	bl	8002654 <xTaskResumeAll>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <task2_handler+0x54>)
 80005fe:	f000 fd6d 	bl	80010dc <HAL_GPIO_WritePin>
				vTaskDelete(button_handle);
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <task2_handler+0x5c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fed8 	bl	80023bc <vTaskDelete>
				vTaskDelete(NULL);
 800060c:	2000      	movs	r0, #0
 800060e:	f001 fed5 	bl	80023bc <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000612:	e7d9      	b.n	80005c8 <task2_handler+0x8>
 8000614:	40020000 	.word	0x40020000
 8000618:	2000003c 	.word	0x2000003c
 800061c:	20000038 	.word	0x20000038

08000620 <button_handler>:
	}
}


static void button_handler(void *parameters)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
 8000626:	6078      	str	r0, [r7, #4]
	uint8_t button_read = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	73bb      	strb	r3, [r7, #14]
	uint8_t previous_read = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
	//char msg[50];
	while(1)
	{
		//snprintf(msg, 50, (char*) parameters);
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		button_read = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8000630:	2110      	movs	r1, #16
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <button_handler+0x48>)
 8000634:	f000 fd3a 	bl	80010ac <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	73bb      	strb	r3, [r7, #14]
		if(button_read==0)
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10b      	bne.n	800065a <button_handler+0x3a>
		{
			if(previous_read==1)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d108      	bne.n	800065a <button_handler+0x3a>
			{
				xTaskNotify(next_task,0,eNoAction);
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <button_handler+0x4c>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	2300      	movs	r3, #0
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	f002 fafd 	bl	8002c54 <xTaskGenericNotify>

			}
		}
		previous_read = button_read;
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(20));
 800065e:	2014      	movs	r0, #20
 8000660:	f001 ff56 	bl	8002510 <vTaskDelay>
		button_read = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8000664:	e7e4      	b.n	8000630 <button_handler+0x10>
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	2000003c 	.word	0x2000003c

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fa59 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f885 	bl	8000788 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <main+0xdc>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	4a32      	ldr	r2, [pc, #200]	; (800074c <main+0xdc>)
 8000684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000688:	60d3      	str	r3, [r2, #12]

  DWT->CYCCNT = 0;
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <main+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f8e4 	bl	800085c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL|=(1<<0);
 8000694:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <main+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <main+0xe0>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]


 // SEGGER_SYSVIEW_Conf();
//  SEGGER_SYSVIEW_Start();

  task1_status=xTaskCreate(task1_handler, "Task-1", 2000, "Hello world task 1", 1, &task1_handle);
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <main+0xe4>)
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2301      	movs	r3, #1
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <main+0xe8>)
 80006aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ae:	492b      	ldr	r1, [pc, #172]	; (800075c <main+0xec>)
 80006b0:	482b      	ldr	r0, [pc, #172]	; (8000760 <main+0xf0>)
 80006b2:	f001 fd1f 	bl	80020f4 <xTaskCreate>
 80006b6:	6178      	str	r0, [r7, #20]
  configASSERT(task1_status == pdPASS);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d00a      	beq.n	80006d4 <main+0x64>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006d0:	bf00      	nop
 80006d2:	e7fe      	b.n	80006d2 <main+0x62>
  next_task = task1_handle;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <main+0xe4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <main+0xf4>)
 80006da:	6013      	str	r3, [r2, #0]
  task2_status=xTaskCreate(task2_handler, "Task-2", 2000, "Hello world task 2", 2, &task2_handle);
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <main+0xf8>)
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2302      	movs	r3, #2
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <main+0xfc>)
 80006e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ea:	4921      	ldr	r1, [pc, #132]	; (8000770 <main+0x100>)
 80006ec:	4821      	ldr	r0, [pc, #132]	; (8000774 <main+0x104>)
 80006ee:	f001 fd01 	bl	80020f4 <xTaskCreate>
 80006f2:	6138      	str	r0, [r7, #16]
  configASSERT(task2_status == pdPASS);
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d00a      	beq.n	8000710 <main+0xa0>
        __asm volatile
 80006fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fe:	f383 8811 	msr	BASEPRI, r3
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	607b      	str	r3, [r7, #4]
    }
 800070c:	bf00      	nop
 800070e:	e7fe      	b.n	800070e <main+0x9e>

  button_status=xTaskCreate(button_handler, "Button task", 2000, "Button handler running", 3, &button_handle);
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <main+0x108>)
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2303      	movs	r3, #3
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <main+0x10c>)
 800071a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800071e:	4918      	ldr	r1, [pc, #96]	; (8000780 <main+0x110>)
 8000720:	4818      	ldr	r0, [pc, #96]	; (8000784 <main+0x114>)
 8000722:	f001 fce7 	bl	80020f4 <xTaskCreate>
 8000726:	60f8      	str	r0, [r7, #12]
  configASSERT(button_status == pdPASS);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d00a      	beq.n	8000744 <main+0xd4>
        __asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
    }
 8000740:	bf00      	nop
 8000742:	e7fe      	b.n	8000742 <main+0xd2>


  vTaskStartScheduler();
 8000744:	f001 ff1c 	bl	8002580 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	e7fe      	b.n	8000748 <main+0xd8>
 800074a:	bf00      	nop
 800074c:	e000edf0 	.word	0xe000edf0
 8000750:	e0001000 	.word	0xe0001000
 8000754:	20000030 	.word	0x20000030
 8000758:	08005058 	.word	0x08005058
 800075c:	0800506c 	.word	0x0800506c
 8000760:	08000569 	.word	0x08000569
 8000764:	2000003c 	.word	0x2000003c
 8000768:	20000034 	.word	0x20000034
 800076c:	08005074 	.word	0x08005074
 8000770:	08005088 	.word	0x08005088
 8000774:	080005c1 	.word	0x080005c1
 8000778:	20000038 	.word	0x20000038
 800077c:	08005090 	.word	0x08005090
 8000780:	080050a8 	.word	0x080050a8
 8000784:	08000621 	.word	0x08000621

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	; 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fc4a 	bl	8005030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a27      	ldr	r2, [pc, #156]	; (8000854 <SystemClock_Config+0xcc>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a21      	ldr	r2, [pc, #132]	; (8000858 <SystemClock_Config+0xd0>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	2310      	movs	r3, #16
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f8:	2310      	movs	r3, #16
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80007fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000800:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000806:	2304      	movs	r3, #4
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fc98 	bl	8001144 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800081a:	f000 f881 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800082a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2104      	movs	r1, #4
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fef9 	bl	8001634 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000848:	f000 f86a 	bl	8000920 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	; 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x94>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x94>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	21c0      	movs	r1, #192	; 0xc0
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_GPIO_Init+0x98>)
 80008b0:	f000 fc14 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80008b4:	2318      	movs	r3, #24
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_GPIO_Init+0x9c>)
 80008c8:	f000 fa54 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008cc:	23c0      	movs	r3, #192	; 0xc0
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0x98>)
 80008e4:	f000 fa46 	bl	8000d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090e:	f000 f92f 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40001000 	.word	0x40001000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800096a:	f002 fc0d 	bl	8003188 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <HAL_InitTick+0xe4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <HAL_InitTick+0xe4>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <HAL_InitTick+0xe4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f80a 	bl	80019cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c2:	f000 ffef 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 80009c6:	6378      	str	r0, [r7, #52]	; 0x34
 80009c8:	e004      	b.n	80009d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ca:	f000 ffeb 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 80009ce:	4603      	mov	r3, r0
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <HAL_InitTick+0xe8>)
 80009d8:	fba2 2303 	umull	r2, r3, r2, r3
 80009dc:	0c9b      	lsrs	r3, r3, #18
 80009de:	3b01      	subs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_InitTick+0xec>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_InitTick+0xf0>)
 80009e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <HAL_InitTick+0xec>)
 80009ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009f0:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <HAL_InitTick+0xec>)
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_InitTick+0xec>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_InitTick+0xec>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_InitTick+0xec>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <HAL_InitTick+0xec>)
 8000a0a:	f001 f811 	bl	8001a30 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d11b      	bne.n	8000a54 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a1c:	4812      	ldr	r0, [pc, #72]	; (8000a68 <HAL_InitTick+0xec>)
 8000a1e:	f001 f861 	bl	8001ae4 <HAL_TIM_Base_Start_IT>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d111      	bne.n	8000a54 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a30:	2036      	movs	r0, #54	; 0x36
 8000a32:	f000 f991 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d808      	bhi.n	8000a4e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2036      	movs	r0, #54	; 0x36
 8000a42:	f000 f96d 	bl	8000d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_InitTick+0xf4>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e002      	b.n	8000a54 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3738      	adds	r7, #56	; 0x38
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	20000040 	.word	0x20000040
 8000a6c:	40001000 	.word	0x40001000
 8000a70:	20000004 	.word	0x20000004

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM6_DAC_IRQHandler+0x10>)
 8000aa6:	f001 f88d 	bl	8001bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000040 	.word	0x20000040

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b02:	f7ff ffd7 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 fa51 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fdb1 	bl	8000670 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b1c:	08005168 	.word	0x08005168
  ldr r2, =_sbss
 8000b20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b24:	20013428 	.word	0x20013428

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8d8 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff ff0e 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fee4 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000088 	.word	0x20000088

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000088 	.word	0x20000088

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e16b      	b.n	8001068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 815a 	bne.w	8001062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80b4 	beq.w	8001062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b60      	ldr	r3, [pc, #384]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a5f      	ldr	r2, [pc, #380]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a5b      	ldr	r2, [pc, #364]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x314>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d02b      	beq.n	8000f9a <HAL_GPIO_Init+0x226>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a51      	ldr	r2, [pc, #324]	; (800108c <HAL_GPIO_Init+0x318>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x222>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <HAL_GPIO_Init+0x31c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x21e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4f      	ldr	r2, [pc, #316]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x216>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4d      	ldr	r2, [pc, #308]	; (800109c <HAL_GPIO_Init+0x328>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x20e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x20a>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e00e      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f7e:	2308      	movs	r3, #8
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f82:	2306      	movs	r3, #6
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <HAL_GPIO_Init+0x334>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_GPIO_Init+0x334>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_GPIO_Init+0x334>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f ae90 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40021400 	.word	0x40021400
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40021c00 	.word	0x40021c00
 80010a8:	40013c00 	.word	0x40013c00

080010ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	4013      	ands	r3, r2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001120:	887a      	ldrh	r2, [r7, #2]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	041a      	lsls	r2, r3, #16
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43d9      	mvns	r1, r3
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	400b      	ands	r3, r1
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e267      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d075      	beq.n	800124e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b04      	cmp	r3, #4
 800116c:	d00c      	beq.n	8001188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116e:	4b85      	ldr	r3, [pc, #532]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001176:	2b08      	cmp	r3, #8
 8001178:	d112      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001186:	d10b      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d05b      	beq.n	800124c <HAL_RCC_OscConfig+0x108>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d157      	bne.n	800124c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e242      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d106      	bne.n	80011b8 <HAL_RCC_OscConfig+0x74>
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e01d      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x98>
 80011c2:	4b70      	ldr	r3, [pc, #448]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6f      	ldr	r2, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e00b      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011dc:	4b69      	ldr	r3, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b66      	ldr	r3, [pc, #408]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a65      	ldr	r2, [pc, #404]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d013      	beq.n	8001224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fccc 	bl	8000b98 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fcc8 	bl	8000b98 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e207      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0xc0>
 8001222:	e014      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fcb8 	bl	8000b98 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fcb4 	bl	8000b98 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1f3      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	4b51      	ldr	r3, [pc, #324]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0xe8>
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d063      	beq.n	8001322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800125a:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00b      	beq.n	800127e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	2b08      	cmp	r3, #8
 8001270:	d11c      	bne.n	80012ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d116      	bne.n	80012ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_RCC_OscConfig+0x152>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e1c7      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4937      	ldr	r1, [pc, #220]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	e03a      	b.n	8001322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <HAL_RCC_OscConfig+0x244>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fc6d 	bl	8000b98 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fc69 	bl	8000b98 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1a8      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4925      	ldr	r1, [pc, #148]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
 80012f4:	e015      	b.n	8001322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_OscConfig+0x244>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc4c 	bl	8000b98 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff fc48 	bl	8000b98 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e187      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d036      	beq.n	800139c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_RCC_OscConfig+0x248>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133c:	f7ff fc2c 	bl	8000b98 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fc28 	bl	8000b98 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e167      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x200>
 8001362:	e01b      	b.n	800139c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_OscConfig+0x248>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fc15 	bl	8000b98 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	e00e      	b.n	8001390 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fc11 	bl	8000b98 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d907      	bls.n	8001390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e150      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
 8001384:	40023800 	.word	0x40023800
 8001388:	42470000 	.word	0x42470000
 800138c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ea      	bne.n	8001372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8097 	beq.w	80014d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a7c      	ldr	r2, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b77      	ldr	r3, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a73      	ldr	r2, [pc, #460]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fbd1 	bl	8000b98 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fbcd 	bl	8000b98 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e10c      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x2ea>
 8001420:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a63      	ldr	r2, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x324>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x30c>
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a5b      	ldr	r2, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0x324>
 8001450:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a57      	ldr	r2, [pc, #348]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
 800145c:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d015      	beq.n	800149c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff fb92 	bl	8000b98 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fb8e 	bl	8000b98 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e0cb      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0ee      	beq.n	8001478 <HAL_RCC_OscConfig+0x334>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fb7c 	bl	8000b98 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb78 	bl	8000b98 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0b5      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ee      	bne.n	80014a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a38      	ldr	r2, [pc, #224]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a1 	beq.w	8001624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d05c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d141      	bne.n	800157a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb4c 	bl	8000b98 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb48 	bl	8000b98 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e087      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	3b01      	subs	r3, #1
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	491b      	ldr	r1, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fb21 	bl	8000b98 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fb1d 	bl	8000b98 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e05c      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x416>
 8001578:	e054      	b.n	8001624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb0a 	bl	8000b98 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fb06 	bl	8000b98 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e045      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x444>
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e038      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000
 80015bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x4ec>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d028      	beq.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d121      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d111      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0cc      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b68      	ldr	r3, [pc, #416]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d90c      	bls.n	8001670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b65      	ldr	r3, [pc, #404]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d044      	beq.n	8001754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d119      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e067      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4934      	ldr	r1, [pc, #208]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff fa38 	bl	8000b98 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff fa34 	bl	8000b98 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e04f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d20c      	bcs.n	800177c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490a      	ldr	r1, [pc, #40]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f8ce 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023c00 	.word	0x40023c00
 80017f0:	40023800 	.word	0x40023800
 80017f4:	08005120 	.word	0x08005120
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001804:	b090      	sub	sp, #64	; 0x40
 8001806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
 800180c:	2300      	movs	r3, #0
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001810:	2300      	movs	r3, #0
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_GetSysClockFreq+0x180>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d00d      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x40>
 8001824:	2b08      	cmp	r3, #8
 8001826:	f200 80a1 	bhi.w	800196c <HAL_RCC_GetSysClockFreq+0x16c>
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x34>
 800182e:	2b04      	cmp	r3, #4
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x3a>
 8001832:	e09b      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_GetSysClockFreq+0x184>)
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001838:	e09b      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183a:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_GetSysClockFreq+0x188>)
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800183e:	e098      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <HAL_RCC_GetSysClockFreq+0x180>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184a:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <HAL_RCC_GetSysClockFreq+0x180>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d028      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001856:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <HAL_RCC_GetSysClockFreq+0x180>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	099b      	lsrs	r3, r3, #6
 800185c:	2200      	movs	r2, #0
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	627a      	str	r2, [r7, #36]	; 0x24
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001868:	2100      	movs	r1, #0
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_RCC_GetSysClockFreq+0x188>)
 800186c:	fb03 f201 	mul.w	r2, r3, r1
 8001870:	2300      	movs	r3, #0
 8001872:	fb00 f303 	mul.w	r3, r0, r3
 8001876:	4413      	add	r3, r2
 8001878:	4a43      	ldr	r2, [pc, #268]	; (8001988 <HAL_RCC_GetSysClockFreq+0x188>)
 800187a:	fba0 1202 	umull	r1, r2, r0, r2
 800187e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001880:	460a      	mov	r2, r1
 8001882:	62ba      	str	r2, [r7, #40]	; 0x28
 8001884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001886:	4413      	add	r3, r2
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188c:	2200      	movs	r2, #0
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	61fa      	str	r2, [r7, #28]
 8001892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001896:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800189a:	f7fe fce3 	bl	8000264 <__aeabi_uldivmod>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4613      	mov	r3, r2
 80018a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a6:	e053      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_RCC_GetSysClockFreq+0x180>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	2200      	movs	r2, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	617a      	str	r2, [r7, #20]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ba:	f04f 0b00 	mov.w	fp, #0
 80018be:	4652      	mov	r2, sl
 80018c0:	465b      	mov	r3, fp
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0159      	lsls	r1, r3, #5
 80018cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d0:	0150      	lsls	r0, r2, #5
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	ebb2 080a 	subs.w	r8, r2, sl
 80018da:	eb63 090b 	sbc.w	r9, r3, fp
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018f2:	ebb2 0408 	subs.w	r4, r2, r8
 80018f6:	eb63 0509 	sbc.w	r5, r3, r9
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	00eb      	lsls	r3, r5, #3
 8001904:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001908:	00e2      	lsls	r2, r4, #3
 800190a:	4614      	mov	r4, r2
 800190c:	461d      	mov	r5, r3
 800190e:	eb14 030a 	adds.w	r3, r4, sl
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	eb45 030b 	adc.w	r3, r5, fp
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001926:	4629      	mov	r1, r5
 8001928:	028b      	lsls	r3, r1, #10
 800192a:	4621      	mov	r1, r4
 800192c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001930:	4621      	mov	r1, r4
 8001932:	028a      	lsls	r2, r1, #10
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	2200      	movs	r2, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	60fa      	str	r2, [r7, #12]
 8001940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001944:	f7fe fc8e 	bl	8000264 <__aeabi_uldivmod>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4613      	mov	r3, r2
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_GetSysClockFreq+0x180>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	3301      	adds	r3, #1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800196a:	e002      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetSysClockFreq+0x184>)
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001974:	4618      	mov	r0, r3
 8001976:	3740      	adds	r7, #64	; 0x40
 8001978:	46bd      	mov	sp, r7
 800197a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	00f42400 	.word	0x00f42400
 8001988:	017d7840 	.word	0x017d7840

0800198c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000000 	.word	0x20000000

080019a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a8:	f7ff fff0 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4903      	ldr	r1, [pc, #12]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08005130 	.word	0x08005130

080019cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	220f      	movs	r2, #15
 80019da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	08db      	lsrs	r3, r3, #3
 8001a06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_RCC_GetClockConfig+0x60>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0207 	and.w	r2, r3, #7
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e041      	b.n	8001ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f839 	bl	8001ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f000 f9d8 	bl	8001e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d001      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e04e      	b.n	8001b9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d022      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b26:	d01d      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_TIM_Base_Start_IT+0xc8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d018      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d013      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00e      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x80>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d111      	bne.n	8001b88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d010      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b86:	e007      	b.n	8001b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40000c00 	.word	0x40000c00
 8001bb8:	40010400 	.word	0x40010400
 8001bbc:	40014000 	.word	0x40014000
 8001bc0:	40001800 	.word	0x40001800

08001bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0202 	mvn.w	r2, #2
 8001bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8ee 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8e0 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8f1 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0204 	mvn.w	r2, #4
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8c4 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8b6 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8c7 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0208 	mvn.w	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f89a 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f88c 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f89d 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0210 	mvn.w	r2, #16
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f870 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f862 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f873 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0201 	mvn.w	r2, #1
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fdda 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b80      	cmp	r3, #128	; 0x80
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	2b80      	cmp	r3, #128	; 0x80
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f902 	bl	8001f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d10e      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d107      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f838 	bl	8001e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d10e      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d107      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0220 	mvn.w	r2, #32
 8001dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8cc 	bl	8001f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a40      	ldr	r2, [pc, #256]	; (8001f38 <TIM_Base_SetConfig+0x114>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e42:	d00f      	beq.n	8001e64 <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3d      	ldr	r2, [pc, #244]	; (8001f3c <TIM_Base_SetConfig+0x118>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00b      	beq.n	8001e64 <TIM_Base_SetConfig+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <TIM_Base_SetConfig+0x11c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <TIM_Base_SetConfig+0x40>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3b      	ldr	r2, [pc, #236]	; (8001f44 <TIM_Base_SetConfig+0x120>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <TIM_Base_SetConfig+0x40>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3a      	ldr	r2, [pc, #232]	; (8001f48 <TIM_Base_SetConfig+0x124>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d108      	bne.n	8001e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2f      	ldr	r2, [pc, #188]	; (8001f38 <TIM_Base_SetConfig+0x114>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d02b      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e84:	d027      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2c      	ldr	r2, [pc, #176]	; (8001f3c <TIM_Base_SetConfig+0x118>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d023      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <TIM_Base_SetConfig+0x11c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01f      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <TIM_Base_SetConfig+0x120>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01b      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <TIM_Base_SetConfig+0x124>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d017      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <TIM_Base_SetConfig+0x128>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <TIM_Base_SetConfig+0x12c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00f      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <TIM_Base_SetConfig+0x130>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00b      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <TIM_Base_SetConfig+0x134>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <TIM_Base_SetConfig+0x138>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <TIM_Base_SetConfig+0x13c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d108      	bne.n	8001ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <TIM_Base_SetConfig+0x114>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_Base_SetConfig+0xf8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <TIM_Base_SetConfig+0x124>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d103      	bne.n	8001f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	615a      	str	r2, [r3, #20]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40000c00 	.word	0x40000c00
 8001f48:	40010400 	.word	0x40010400
 8001f4c:	40014000 	.word	0x40014000
 8001f50:	40014400 	.word	0x40014400
 8001f54:	40014800 	.word	0x40014800
 8001f58:	40001800 	.word	0x40001800
 8001f5c:	40001c00 	.word	0x40001c00
 8001f60:	40002000 	.word	0x40002000

08001f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f103 0208 	add.w	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f103 0208 	add.w	r2, r3, #8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f103 0208 	add.w	r2, r3, #8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d103      	bne.n	800204e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e00c      	b.n	8002068 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3308      	adds	r3, #8
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e002      	b.n	800205c <vListInsert+0x2e>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	429a      	cmp	r2, r3
 8002066:	d2f6      	bcs.n	8002056 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6892      	ldr	r2, [r2, #8]
 80020b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6852      	ldr	r2, [r2, #4]
 80020c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d103      	bne.n	80020d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1e5a      	subs	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	; 0x30
 80020f8:	af04      	add	r7, sp, #16
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4618      	mov	r0, r3
 800210a:	f001 f9a7 	bl	800345c <pvPortMalloc>
 800210e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00e      	beq.n	8002134 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002116:	2058      	movs	r0, #88	; 0x58
 8002118:	f001 f9a0 	bl	800345c <pvPortMalloc>
 800211c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
 800212a:	e005      	b.n	8002138 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f001 fa75 	bl	800361c <vPortFree>
 8002132:	e001      	b.n	8002138 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d013      	beq.n	8002166 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	2300      	movs	r3, #0
 8002142:	9303      	str	r3, [sp, #12]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f80e 	bl	8002176 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800215a:	69f8      	ldr	r0, [r7, #28]
 800215c:	f000 f8a2 	bl	80022a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e002      	b.n	800216c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800216c:	69bb      	ldr	r3, [r7, #24]
    }
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b088      	sub	sp, #32
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	461a      	mov	r2, r3
 800218e:	21a5      	movs	r1, #165	; 0xa5
 8002190:	f002 ff4e 	bl	8005030 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800219e:	3b01      	subs	r3, #1
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f023 0307 	bic.w	r3, r3, #7
 80021ac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <prvInitialiseNewTask+0x58>
        __asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	617b      	str	r3, [r7, #20]
    }
 80021ca:	bf00      	nop
 80021cc:	e7fe      	b.n	80021cc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01f      	beq.n	8002214 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	e012      	b.n	8002200 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	4413      	add	r3, r2
 80021e0:	7819      	ldrb	r1, [r3, #0]
 80021e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	4413      	add	r3, r2
 80021e8:	3334      	adds	r3, #52	; 0x34
 80021ea:	460a      	mov	r2, r1
 80021ec:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b09      	cmp	r3, #9
 8002204:	d9e9      	bls.n	80021da <prvInitialiseNewTask+0x64>
 8002206:	e000      	b.n	800220a <prvInitialiseNewTask+0x94>
            {
                break;
 8002208:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002212:	e003      	b.n	800221c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	2b04      	cmp	r3, #4
 8002220:	d901      	bls.n	8002226 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002222:	2304      	movs	r3, #4
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002230:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002234:	2200      	movs	r2, #0
 8002236:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	3304      	adds	r3, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fec5 	bl	8001fcc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	3318      	adds	r3, #24
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fec0 	bl	8001fcc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002250:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	f1c3 0205 	rsb	r2, r3, #5
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	3350      	adds	r3, #80	; 0x50
 8002266:	2204      	movs	r2, #4
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fee0 	bl	8005030 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	3354      	adds	r3, #84	; 0x54
 8002274:	2201      	movs	r2, #1
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fed9 	bl	8005030 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	69b8      	ldr	r0, [r7, #24]
 8002284:	f000 fe50 	bl	8002f28 <pxPortInitialiseStack>
 8002288:	4602      	mov	r2, r0
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002298:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800229a:	bf00      	nop
 800229c:	3720      	adds	r7, #32
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022ac:	f000 ffea 	bl	8003284 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <prvAddNewTaskToReadyList+0xfc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <prvAddNewTaskToReadyList+0xfc>)
 80022b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022ba:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <prvAddNewTaskToReadyList+0x100>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022c2:	4a38      	ldr	r2, [pc, #224]	; (80023a4 <prvAddNewTaskToReadyList+0x100>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <prvAddNewTaskToReadyList+0xfc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d110      	bne.n	80022f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022d0:	f000 fb9e 	bl	8002a10 <prvInitialiseTaskLists>
 80022d4:	e00d      	b.n	80022f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <prvAddNewTaskToReadyList+0x104>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <prvAddNewTaskToReadyList+0x100>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d802      	bhi.n	80022f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022ec:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <prvAddNewTaskToReadyList+0x100>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022f2:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <prvAddNewTaskToReadyList+0x108>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <prvAddNewTaskToReadyList+0x108>)
 80022fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <prvAddNewTaskToReadyList+0x108>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <prvAddNewTaskToReadyList+0x94>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fbd5 	bl	8004abc <SEGGER_SYSVIEW_OnTaskCreate>
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	461d      	mov	r5, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461c      	mov	r4, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	1ae3      	subs	r3, r4, r3
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	462b      	mov	r3, r5
 8002334:	f001 fa90 	bl	8003858 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fc42 	bl	8004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	2201      	movs	r2, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <prvAddNewTaskToReadyList+0x10c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <prvAddNewTaskToReadyList+0x10c>)
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <prvAddNewTaskToReadyList+0x110>)
 8002360:	441a      	add	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fe3c 	bl	8001fe6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800236e:	f000 ffb9 	bl	80032e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <prvAddNewTaskToReadyList+0x104>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00e      	beq.n	8002398 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <prvAddNewTaskToReadyList+0x100>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d207      	bcs.n	8002398 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <prvAddNewTaskToReadyList+0x114>)
 800238a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bdb0      	pop	{r4, r5, r7, pc}
 80023a0:	20000164 	.word	0x20000164
 80023a4:	2000008c 	.word	0x2000008c
 80023a8:	20000170 	.word	0x20000170
 80023ac:	20000180 	.word	0x20000180
 80023b0:	2000016c 	.word	0x2000016c
 80023b4:	20000090 	.word	0x20000090
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80023c4:	f000 ff5e 	bl	8003284 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <vTaskDelete+0x18>
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <vTaskDelete+0x12c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e000      	b.n	80023d6 <vTaskDelete+0x1a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3304      	adds	r3, #4
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fe5f 	bl	80020a0 <uxListRemove>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d115      	bne.n	8002414 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	493f      	ldr	r1, [pc, #252]	; (80024ec <vTaskDelete+0x130>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <vTaskDelete+0x58>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	2201      	movs	r2, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43da      	mvns	r2, r3
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <vTaskDelete+0x134>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4013      	ands	r3, r2
 8002410:	4a37      	ldr	r2, [pc, #220]	; (80024f0 <vTaskDelete+0x134>)
 8002412:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3318      	adds	r3, #24
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fe3d 	bl	80020a0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <vTaskDelete+0x138>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	4a31      	ldr	r2, [pc, #196]	; (80024f4 <vTaskDelete+0x138>)
 800242e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002430:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <vTaskDelete+0x12c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	429a      	cmp	r2, r3
 8002438:	d118      	bne.n	800246c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3304      	adds	r3, #4
 800243e:	4619      	mov	r1, r3
 8002440:	482d      	ldr	r0, [pc, #180]	; (80024f8 <vTaskDelete+0x13c>)
 8002442:	f7ff fdd0 	bl	8001fe6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <vTaskDelete+0x140>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <vTaskDelete+0x140>)
 800244e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fc58 	bl	8004d08 <SEGGER_SYSVIEW_ShrinkId>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	2022      	movs	r0, #34	; 0x22
 800245e:	f001 fecb 	bl	80041f8 <SEGGER_SYSVIEW_RecordU32>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fa5f 	bl	8003928 <SYSVIEW_DeleteTask>
 800246a:	e016      	b.n	800249a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <vTaskDelete+0x144>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	4a23      	ldr	r2, [pc, #140]	; (8002500 <vTaskDelete+0x144>)
 8002474:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fc45 	bl	8004d08 <SEGGER_SYSVIEW_ShrinkId>
 800247e:	4603      	mov	r3, r0
 8002480:	4619      	mov	r1, r3
 8002482:	2022      	movs	r0, #34	; 0x22
 8002484:	f001 feb8 	bl	80041f8 <SEGGER_SYSVIEW_RecordU32>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fa4c 	bl	8003928 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fb2b 	bl	8002aec <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002496:	f000 fb39 	bl	8002b0c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800249a:	f000 ff23 	bl	80032e4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <vTaskDelete+0x148>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01b      	beq.n	80024de <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <vTaskDelete+0x12c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d116      	bne.n	80024de <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <vTaskDelete+0x14c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <vTaskDelete+0x112>
        __asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	60bb      	str	r3, [r7, #8]
    }
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <vTaskDelete+0x150>)
 80024d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000008c 	.word	0x2000008c
 80024ec:	20000090 	.word	0x20000090
 80024f0:	2000016c 	.word	0x2000016c
 80024f4:	20000180 	.word	0x20000180
 80024f8:	20000138 	.word	0x20000138
 80024fc:	2000014c 	.word	0x2000014c
 8002500:	20000164 	.word	0x20000164
 8002504:	20000170 	.word	0x20000170
 8002508:	2000018c 	.word	0x2000018c
 800250c:	e000ed04 	.word	0xe000ed04

08002510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01b      	beq.n	800255a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <vTaskDelay+0x68>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <vTaskDelay+0x30>
        __asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	60bb      	str	r3, [r7, #8]
    }
 800253c:	bf00      	nop
 800253e:	e7fe      	b.n	800253e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002540:	f000 f87a 	bl	8002638 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	2023      	movs	r0, #35	; 0x23
 8002548:	f001 fe56 	bl	80041f8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800254c:	2100      	movs	r1, #0
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fc72 	bl	8002e38 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002554:	f000 f87e 	bl	8002654 <xTaskResumeAll>
 8002558:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <vTaskDelay+0x6c>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	2000018c 	.word	0x2000018c
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <vTaskStartScheduler+0x98>)
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2300      	movs	r3, #0
 8002590:	2282      	movs	r2, #130	; 0x82
 8002592:	4922      	ldr	r1, [pc, #136]	; (800261c <vTaskStartScheduler+0x9c>)
 8002594:	4822      	ldr	r0, [pc, #136]	; (8002620 <vTaskStartScheduler+0xa0>)
 8002596:	f7ff fdad 	bl	80020f4 <xTaskCreate>
 800259a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d124      	bne.n	80025ec <vTaskStartScheduler+0x6c>
        __asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	60bb      	str	r3, [r7, #8]
    }
 80025b4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <vTaskStartScheduler+0xa4>)
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <vTaskStartScheduler+0xa8>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <vTaskStartScheduler+0xac>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <vTaskStartScheduler+0xb0>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <vTaskStartScheduler+0x98>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d102      	bne.n	80025dc <vTaskStartScheduler+0x5c>
 80025d6:	f002 fa55 	bl	8004a84 <SEGGER_SYSVIEW_OnIdle>
 80025da:	e004      	b.n	80025e6 <vTaskStartScheduler+0x66>
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <vTaskStartScheduler+0xb0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 faad 	bl	8004b40 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025e6:	f000 fd2d 	bl	8003044 <xPortStartScheduler>
 80025ea:	e00e      	b.n	800260a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d10a      	bne.n	800260a <vTaskStartScheduler+0x8a>
        __asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	607b      	str	r3, [r7, #4]
    }
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <vTaskStartScheduler+0xb4>)
 800260c:	681b      	ldr	r3, [r3, #0]
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000188 	.word	0x20000188
 800261c:	080050b4 	.word	0x080050b4
 8002620:	080029e1 	.word	0x080029e1
 8002624:	20000184 	.word	0x20000184
 8002628:	20000170 	.word	0x20000170
 800262c:	20000168 	.word	0x20000168
 8002630:	2000008c 	.word	0x2000008c
 8002634:	2000000c 	.word	0x2000000c

08002638 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <vTaskSuspendAll+0x18>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	4a03      	ldr	r2, [pc, #12]	; (8002650 <vTaskSuspendAll+0x18>)
 8002644:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	2000018c 	.word	0x2000018c

08002654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002662:	4b43      	ldr	r3, [pc, #268]	; (8002770 <xTaskResumeAll+0x11c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <xTaskResumeAll+0x2c>
        __asm volatile
 800266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	603b      	str	r3, [r7, #0]
    }
 800267c:	bf00      	nop
 800267e:	e7fe      	b.n	800267e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002680:	f000 fe00 	bl	8003284 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <xTaskResumeAll+0x11c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3b01      	subs	r3, #1
 800268a:	4a39      	ldr	r2, [pc, #228]	; (8002770 <xTaskResumeAll+0x11c>)
 800268c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <xTaskResumeAll+0x11c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d165      	bne.n	8002762 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <xTaskResumeAll+0x120>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d061      	beq.n	8002762 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800269e:	e032      	b.n	8002706 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026a0:	4b35      	ldr	r3, [pc, #212]	; (8002778 <xTaskResumeAll+0x124>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3318      	adds	r3, #24
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fcf7 	bl	80020a0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fcf2 	bl	80020a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 fa80 	bl	8004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <xTaskResumeAll+0x128>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	4a2a      	ldr	r2, [pc, #168]	; (800277c <xTaskResumeAll+0x128>)
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4a27      	ldr	r2, [pc, #156]	; (8002780 <xTaskResumeAll+0x12c>)
 80026e4:	441a      	add	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f7ff fc7a 	bl	8001fe6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <xTaskResumeAll+0x130>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d302      	bcc.n	8002706 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <xTaskResumeAll+0x134>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <xTaskResumeAll+0x124>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1c8      	bne.n	80026a0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002714:	f000 f9fa 	bl	8002b0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <xTaskResumeAll+0x138>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002724:	f000 f836 	bl	8002794 <xTaskIncrementTick>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <xTaskResumeAll+0x134>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f1      	bne.n	8002724 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <xTaskResumeAll+0x138>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <xTaskResumeAll+0x134>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800274e:	2301      	movs	r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <xTaskResumeAll+0x13c>)
 8002754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002762:	f000 fdbf 	bl	80032e4 <vPortExitCritical>

    return xAlreadyYielded;
 8002766:	68bb      	ldr	r3, [r7, #8]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	2000018c 	.word	0x2000018c
 8002774:	20000164 	.word	0x20000164
 8002778:	20000124 	.word	0x20000124
 800277c:	2000016c 	.word	0x2000016c
 8002780:	20000090 	.word	0x20000090
 8002784:	2000008c 	.word	0x2000008c
 8002788:	20000178 	.word	0x20000178
 800278c:	20000174 	.word	0x20000174
 8002790:	e000ed04 	.word	0xe000ed04

08002794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800279e:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <xTaskIncrementTick+0x14c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 8092 	bne.w	80028cc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027a8:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <xTaskIncrementTick+0x150>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027b0:	4a4c      	ldr	r2, [pc, #304]	; (80028e4 <xTaskIncrementTick+0x150>)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d120      	bne.n	80027fe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027bc:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <xTaskIncrementTick+0x154>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <xTaskIncrementTick+0x48>
        __asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	603b      	str	r3, [r7, #0]
    }
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <xTaskIncrementTick+0x46>
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <xTaskIncrementTick+0x154>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b42      	ldr	r3, [pc, #264]	; (80028ec <xTaskIncrementTick+0x158>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <xTaskIncrementTick+0x154>)
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4a40      	ldr	r2, [pc, #256]	; (80028ec <xTaskIncrementTick+0x158>)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <xTaskIncrementTick+0x15c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	4a3e      	ldr	r2, [pc, #248]	; (80028f0 <xTaskIncrementTick+0x15c>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	f000 f987 	bl	8002b0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <xTaskIncrementTick+0x160>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d34c      	bcc.n	80028a2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002808:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <xTaskIncrementTick+0x154>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <xTaskIncrementTick+0x160>)
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	601a      	str	r2, [r3, #0]
                    break;
 800281a:	e042      	b.n	80028a2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800281c:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <xTaskIncrementTick+0x154>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d203      	bcs.n	800283c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002834:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <xTaskIncrementTick+0x160>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800283a:	e032      	b.n	80028a2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3304      	adds	r3, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fc2d 	bl	80020a0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3318      	adds	r3, #24
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fc24 	bl	80020a0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f002 f9b2 	bl	8004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <xTaskIncrementTick+0x164>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <xTaskIncrementTick+0x164>)
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <xTaskIncrementTick+0x168>)
 8002880:	441a      	add	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3304      	adds	r3, #4
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f7ff fbac 	bl	8001fe6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <xTaskIncrementTick+0x16c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	429a      	cmp	r2, r3
 800289a:	d3b5      	bcc.n	8002808 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a0:	e7b2      	b.n	8002808 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <xTaskIncrementTick+0x16c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	4914      	ldr	r1, [pc, #80]	; (80028fc <xTaskIncrementTick+0x168>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d901      	bls.n	80028be <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <xTaskIncrementTick+0x170>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e004      	b.n	80028d6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <xTaskIncrementTick+0x174>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <xTaskIncrementTick+0x174>)
 80028d4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028d6:	697b      	ldr	r3, [r7, #20]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	2000018c 	.word	0x2000018c
 80028e4:	20000168 	.word	0x20000168
 80028e8:	2000011c 	.word	0x2000011c
 80028ec:	20000120 	.word	0x20000120
 80028f0:	2000017c 	.word	0x2000017c
 80028f4:	20000184 	.word	0x20000184
 80028f8:	2000016c 	.word	0x2000016c
 80028fc:	20000090 	.word	0x20000090
 8002900:	2000008c 	.word	0x2000008c
 8002904:	20000178 	.word	0x20000178
 8002908:	20000174 	.word	0x20000174

0800290c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <vTaskSwitchContext+0xbc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <vTaskSwitchContext+0xc0>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002920:	e04d      	b.n	80029be <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <vTaskSwitchContext+0xc0>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <vTaskSwitchContext+0xc4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	f1c3 031f 	rsb	r3, r3, #31
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	4925      	ldr	r1, [pc, #148]	; (80029d4 <vTaskSwitchContext+0xc8>)
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	607b      	str	r3, [r7, #4]
    }
 8002964:	bf00      	nop
 8002966:	e7fe      	b.n	8002966 <vTaskSwitchContext+0x5a>
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <vTaskSwitchContext+0xc8>)
 8002974:	4413      	add	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3308      	adds	r3, #8
 800298a:	429a      	cmp	r2, r3
 800298c:	d104      	bne.n	8002998 <vTaskSwitchContext+0x8c>
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <vTaskSwitchContext+0xcc>)
 80029a0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <vTaskSwitchContext+0xcc>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <vTaskSwitchContext+0xd0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d102      	bne.n	80029b4 <vTaskSwitchContext+0xa8>
 80029ae:	f002 f869 	bl	8004a84 <SEGGER_SYSVIEW_OnIdle>
}
 80029b2:	e004      	b.n	80029be <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <vTaskSwitchContext+0xcc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 f8c1 	bl	8004b40 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000018c 	.word	0x2000018c
 80029cc:	20000178 	.word	0x20000178
 80029d0:	2000016c 	.word	0x2000016c
 80029d4:	20000090 	.word	0x20000090
 80029d8:	2000008c 	.word	0x2000008c
 80029dc:	20000188 	.word	0x20000188

080029e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029e8:	f000 f852 	bl	8002a90 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <prvIdleTask+0x28>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d9f9      	bls.n	80029e8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <prvIdleTask+0x2c>)
 80029f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a04:	e7f0      	b.n	80029e8 <prvIdleTask+0x8>
 8002a06:	bf00      	nop
 8002a08:	20000090 	.word	0x20000090
 8002a0c:	e000ed04 	.word	0xe000ed04

08002a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	e00c      	b.n	8002a36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <prvInitialiseTaskLists+0x60>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff faae 	bl	8001f8c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d9ef      	bls.n	8002a1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <prvInitialiseTaskLists+0x64>)
 8002a3e:	f7ff faa5 	bl	8001f8c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a42:	480d      	ldr	r0, [pc, #52]	; (8002a78 <prvInitialiseTaskLists+0x68>)
 8002a44:	f7ff faa2 	bl	8001f8c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <prvInitialiseTaskLists+0x6c>)
 8002a4a:	f7ff fa9f 	bl	8001f8c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a4e:	480c      	ldr	r0, [pc, #48]	; (8002a80 <prvInitialiseTaskLists+0x70>)
 8002a50:	f7ff fa9c 	bl	8001f8c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <prvInitialiseTaskLists+0x74>)
 8002a56:	f7ff fa99 	bl	8001f8c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <prvInitialiseTaskLists+0x78>)
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <prvInitialiseTaskLists+0x64>)
 8002a5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvInitialiseTaskLists+0x7c>)
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <prvInitialiseTaskLists+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000090 	.word	0x20000090
 8002a74:	200000f4 	.word	0x200000f4
 8002a78:	20000108 	.word	0x20000108
 8002a7c:	20000124 	.word	0x20000124
 8002a80:	20000138 	.word	0x20000138
 8002a84:	20000150 	.word	0x20000150
 8002a88:	2000011c 	.word	0x2000011c
 8002a8c:	20000120 	.word	0x20000120

08002a90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a96:	e019      	b.n	8002acc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a98:	f000 fbf4 	bl	8003284 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <prvCheckTasksWaitingTermination+0x50>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff faf9 	bl	80020a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <prvCheckTasksWaitingTermination+0x54>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <prvCheckTasksWaitingTermination+0x54>)
 8002ab6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <prvCheckTasksWaitingTermination+0x58>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <prvCheckTasksWaitingTermination+0x58>)
 8002ac0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ac2:	f000 fc0f 	bl	80032e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f810 	bl	8002aec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <prvCheckTasksWaitingTermination+0x58>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e1      	bne.n	8002a98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000138 	.word	0x20000138
 8002ae4:	20000164 	.word	0x20000164
 8002ae8:	2000014c 	.word	0x2000014c

08002aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fd8f 	bl	800361c <vPortFree>
                vPortFree( pxTCB );
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fd8c 	bl	800361c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <prvResetNextTaskUnblockTime+0x30>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <prvResetNextTaskUnblockTime+0x34>)
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b22:	e005      	b.n	8002b30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <prvResetNextTaskUnblockTime+0x30>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <prvResetNextTaskUnblockTime+0x34>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000011c 	.word	0x2000011c
 8002b40:	20000184 	.word	0x20000184

08002b44 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	613b      	str	r3, [r7, #16]
    }
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002b6e:	f000 fb89 	bl	8003284 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <xTaskGenericNotifyWait+0x108>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3354      	adds	r3, #84	; 0x54
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d022      	beq.n	8002bca <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002b84:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <xTaskGenericNotifyWait+0x108>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	3214      	adds	r2, #20
 8002b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	43d2      	mvns	r2, r2
 8002b94:	4011      	ands	r1, r2
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	3214      	adds	r2, #20
 8002b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <xTaskGenericNotifyWait+0x108>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3354      	adds	r3, #84	; 0x54
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	6a38      	ldr	r0, [r7, #32]
 8002bb6:	f000 f93f 	bl	8002e38 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <xTaskGenericNotifyWait+0x10c>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002bca:	f000 fb8b 	bl	80032e4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002bce:	f000 fb59 	bl	8003284 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	2040      	movs	r0, #64	; 0x40
 8002be0:	f001 fba0 	bl	8004324 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <xTaskGenericNotifyWait+0x108>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	3214      	adds	r2, #20
 8002bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <xTaskGenericNotifyWait+0x108>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	3354      	adds	r3, #84	; 0x54
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d002      	beq.n	8002c12 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e00e      	b.n	8002c30 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <xTaskGenericNotifyWait+0x108>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	3214      	adds	r2, #20
 8002c1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	43d2      	mvns	r2, r2
 8002c22:	4011      	ands	r1, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	3214      	adds	r2, #20
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <xTaskGenericNotifyWait+0x108>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	3354      	adds	r3, #84	; 0x54
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002c3e:	f000 fb51 	bl	80032e4 <vPortExitCritical>

        return xReturn;
 8002c42:	697b      	ldr	r3, [r7, #20]
    }
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	2000008c 	.word	0x2000008c
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	; 0x38
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002c62:	2301      	movs	r3, #1
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <xTaskGenericNotify+0x2e>
        __asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	623b      	str	r3, [r7, #32]
    }
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xTaskGenericNotify+0x4a>
        __asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61fb      	str	r3, [r7, #28]
    }
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002ca2:	f000 faef 	bl	8003284 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	3214      	adds	r2, #20
 8002cb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3354      	adds	r3, #84	; 0x54
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3354      	adds	r3, #84	; 0x54
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d83b      	bhi.n	8002d52 <xTaskGenericNotify+0xfe>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <xTaskGenericNotify+0x8c>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002d71 	.word	0x08002d71
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d11 	.word	0x08002d11
 8002cec:	08002d29 	.word	0x08002d29
 8002cf0:	08002d37 	.word	0x08002d37
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	3214      	adds	r2, #20
 8002cfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	3214      	adds	r2, #20
 8002d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002d0e:	e032      	b.n	8002d76 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	3214      	adds	r2, #20
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	3214      	adds	r2, #20
 8002d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002d26:	e026      	b.n	8002d76 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	3214      	adds	r2, #20
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002d34:	e01f      	b.n	8002d76 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d006      	beq.n	8002d4c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	3214      	adds	r2, #20
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002d4a:	e014      	b.n	8002d76 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002d50:	e011      	b.n	8002d76 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <xTaskGenericNotify+0x1d0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <xTaskGenericNotify+0x120>
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	61bb      	str	r3, [r7, #24]
    }
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xTaskGenericNotify+0x11a>
                    break;
 8002d70:	bf00      	nop
 8002d72:	e000      	b.n	8002d76 <xTaskGenericNotify+0x122>

                    break;
 8002d74:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 ffc5 	bl	8004d08 <SEGGER_SYSVIEW_ShrinkId>
 8002d7e:	4601      	mov	r1, r0
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	203e      	movs	r0, #62	; 0x3e
 8002d8c:	f001 faca 	bl	8004324 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d13d      	bne.n	8002e14 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f97f 	bl	80020a0 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 ff0d 	bl	8004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <xTaskGenericNotify+0x1d4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <xTaskGenericNotify+0x1d4>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <xTaskGenericNotify+0x1d8>)
 8002dca:	441a      	add	r2, r3
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f7ff f907 	bl	8001fe6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	617b      	str	r3, [r7, #20]
    }
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <xTaskGenericNotify+0x1dc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d907      	bls.n	8002e14 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <xTaskGenericNotify+0x1e0>)
 8002e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e14:	f000 fa66 	bl	80032e4 <vPortExitCritical>

        return xReturn;
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3730      	adds	r7, #48	; 0x30
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000168 	.word	0x20000168
 8002e28:	2000016c 	.word	0x2000016c
 8002e2c:	20000090 	.word	0x20000090
 8002e30:	2000008c 	.word	0x2000008c
 8002e34:	e000ed04 	.word	0xe000ed04

08002e38 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e42:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <prvAddCurrentTaskToDelayedList+0xd4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e48:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f926 	bl	80020a0 <uxListRemove>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	2201      	movs	r2, #1
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d110      	bne.n	8002e9c <prvAddCurrentTaskToDelayedList+0x64>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	211b      	movs	r1, #27
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fede 	bl	8004c48 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4820      	ldr	r0, [pc, #128]	; (8002f18 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002e96:	f7ff f8a6 	bl	8001fe6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e9a:	e032      	b.n	8002f02 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d20f      	bcs.n	8002ed4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2104      	movs	r1, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 fec4 	bl	8004c48 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f7ff f8ae 	bl	800202e <vListInsert>
}
 8002ed2:	e016      	b.n	8002f02 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2104      	movs	r1, #4
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 feb4 	bl	8004c48 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7ff f89e 	bl	800202e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <prvAddCurrentTaskToDelayedList+0xec>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d202      	bcs.n	8002f02 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002efc:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <prvAddCurrentTaskToDelayedList+0xec>)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6013      	str	r3, [r2, #0]
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000168 	.word	0x20000168
 8002f10:	2000008c 	.word	0x2000008c
 8002f14:	2000016c 	.word	0x2000016c
 8002f18:	20000150 	.word	0x20000150
 8002f1c:	20000120 	.word	0x20000120
 8002f20:	2000011c 	.word	0x2000011c
 8002f24:	20000184 	.word	0x20000184

08002f28 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3b04      	subs	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b04      	subs	r3, #4
 8002f46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f023 0201 	bic.w	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3b04      	subs	r3, #4
 8002f56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f58:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <pxPortInitialiseStack+0x64>)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3b14      	subs	r3, #20
 8002f62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3b04      	subs	r3, #4
 8002f6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f06f 0202 	mvn.w	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3b20      	subs	r3, #32
 8002f7c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	08002f91 	.word	0x08002f91

08002f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <prvTaskExitError+0x54>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d00a      	beq.n	8002fba <prvTaskExitError+0x2a>
        __asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
    }
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <prvTaskExitError+0x28>
        __asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
    }
 8002fcc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002fce:	bf00      	nop
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0fc      	beq.n	8002fd0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002fd6:	bf00      	nop
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20000010 	.word	0x20000010
	...

08002ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <pxCurrentTCBConst2>)
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	6808      	ldr	r0, [r1, #0]
 8002ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ffa:	f380 8809 	msr	PSP, r0
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f380 8811 	msr	BASEPRI, r0
 800300a:	4770      	bx	lr
 800300c:	f3af 8000 	nop.w

08003010 <pxCurrentTCBConst2>:
 8003010:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop

08003018 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <prvPortStartFirstTask+0x24>)
 800301a:	6800      	ldr	r0, [r0, #0]
 800301c:	6800      	ldr	r0, [r0, #0]
 800301e:	f380 8808 	msr	MSP, r0
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f380 8814 	msr	CONTROL, r0
 800302a:	b662      	cpsie	i
 800302c:	b661      	cpsie	f
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	df00      	svc	0
 8003038:	bf00      	nop
 800303a:	0000      	.short	0x0000
 800303c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop

08003044 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800304a:	4b46      	ldr	r3, [pc, #280]	; (8003164 <xPortStartScheduler+0x120>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a46      	ldr	r2, [pc, #280]	; (8003168 <xPortStartScheduler+0x124>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10a      	bne.n	800306a <xPortStartScheduler+0x26>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	613b      	str	r3, [r7, #16]
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800306a:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <xPortStartScheduler+0x120>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a3f      	ldr	r2, [pc, #252]	; (800316c <xPortStartScheduler+0x128>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d10a      	bne.n	800308a <xPortStartScheduler+0x46>
        __asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	60fb      	str	r3, [r7, #12]
    }
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800308a:	4b39      	ldr	r3, [pc, #228]	; (8003170 <xPortStartScheduler+0x12c>)
 800308c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <xPortStartScheduler+0x130>)
 80030b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <xPortStartScheduler+0x134>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030b8:	e009      	b.n	80030ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80030ba:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <xPortStartScheduler+0x134>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3b01      	subs	r3, #1
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <xPortStartScheduler+0x134>)
 80030c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d0ef      	beq.n	80030ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <xPortStartScheduler+0x134>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d00a      	beq.n	80030fc <xPortStartScheduler+0xb8>
        __asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	60bb      	str	r3, [r7, #8]
    }
 80030f8:	bf00      	nop
 80030fa:	e7fe      	b.n	80030fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <xPortStartScheduler+0x134>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <xPortStartScheduler+0x134>)
 8003104:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <xPortStartScheduler+0x134>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800310e:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <xPortStartScheduler+0x134>)
 8003110:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800311a:	4b18      	ldr	r3, [pc, #96]	; (800317c <xPortStartScheduler+0x138>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <xPortStartScheduler+0x138>)
 8003120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003124:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <xPortStartScheduler+0x138>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a14      	ldr	r2, [pc, #80]	; (800317c <xPortStartScheduler+0x138>)
 800312c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003130:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003132:	f000 f963 	bl	80033fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <xPortStartScheduler+0x13c>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800313c:	f000 f982 	bl	8003444 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <xPortStartScheduler+0x140>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <xPortStartScheduler+0x140>)
 8003146:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800314a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800314c:	f7ff ff64 	bl	8003018 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003150:	f7ff fbdc 	bl	800290c <vTaskSwitchContext>
    prvTaskExitError();
 8003154:	f7ff ff1c 	bl	8002f90 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	e000ed00 	.word	0xe000ed00
 8003168:	410fc271 	.word	0x410fc271
 800316c:	410fc270 	.word	0x410fc270
 8003170:	e000e400 	.word	0xe000e400
 8003174:	20000190 	.word	0x20000190
 8003178:	20000194 	.word	0x20000194
 800317c:	e000ed20 	.word	0xe000ed20
 8003180:	20000010 	.word	0x20000010
 8003184:	e000ef34 	.word	0xe000ef34

08003188 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <vInitPrioGroupValue+0xe4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a37      	ldr	r2, [pc, #220]	; (8003270 <vInitPrioGroupValue+0xe8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10a      	bne.n	80031ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	613b      	str	r3, [r7, #16]
    }
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031ae:	4b2f      	ldr	r3, [pc, #188]	; (800326c <vInitPrioGroupValue+0xe4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a30      	ldr	r2, [pc, #192]	; (8003274 <vInitPrioGroupValue+0xec>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10a      	bne.n	80031ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	60fb      	str	r3, [r7, #12]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031ce:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <vInitPrioGroupValue+0xf0>)
 80031d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <vInitPrioGroupValue+0xf4>)
 80031f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <vInitPrioGroupValue+0xf8>)
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031fc:	e009      	b.n	8003212 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <vInitPrioGroupValue+0xf8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3b01      	subs	r3, #1
 8003204:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <vInitPrioGroupValue+0xf8>)
 8003206:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b80      	cmp	r3, #128	; 0x80
 800321c:	d0ef      	beq.n	80031fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <vInitPrioGroupValue+0xf8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	d00a      	beq.n	8003240 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60bb      	str	r3, [r7, #8]
    }
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <vInitPrioGroupValue+0xf8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <vInitPrioGroupValue+0xf8>)
 8003248:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <vInitPrioGroupValue+0xf8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003252:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <vInitPrioGroupValue+0xf8>)
 8003254:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000ed00 	.word	0xe000ed00
 8003270:	410fc271 	.word	0x410fc271
 8003274:	410fc270 	.word	0x410fc270
 8003278:	e000e400 	.word	0xe000e400
 800327c:	20000190 	.word	0x20000190
 8003280:	20000194 	.word	0x20000194

08003284 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	607b      	str	r3, [r7, #4]
    }
 800329c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <vPortEnterCritical+0x58>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <vPortEnterCritical+0x58>)
 80032a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <vPortEnterCritical+0x58>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10f      	bne.n	80032d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <vPortEnterCritical+0x5c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	603b      	str	r3, [r7, #0]
    }
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <vPortEnterCritical+0x4a>
    }
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	20000010 	.word	0x20000010
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <vPortExitCritical+0x50>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <vPortExitCritical+0x24>
        __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	607b      	str	r3, [r7, #4]
    }
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <vPortExitCritical+0x50>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <vPortExitCritical+0x50>)
 8003310:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <vPortExitCritical+0x50>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <vPortExitCritical+0x42>
 800331a:	2300      	movs	r3, #0
 800331c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003324:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000010 	.word	0x20000010
	...

08003340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003340:	f3ef 8009 	mrs	r0, PSP
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <pxCurrentTCBConst>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	f01e 0f10 	tst.w	lr, #16
 8003350:	bf08      	it	eq
 8003352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335a:	6010      	str	r0, [r2, #0]
 800335c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003364:	f380 8811 	msr	BASEPRI, r0
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f7ff facc 	bl	800290c <vTaskSwitchContext>
 8003374:	f04f 0000 	mov.w	r0, #0
 8003378:	f380 8811 	msr	BASEPRI, r0
 800337c:	bc09      	pop	{r0, r3}
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	6808      	ldr	r0, [r1, #0]
 8003382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003386:	f01e 0f10 	tst.w	lr, #16
 800338a:	bf08      	it	eq
 800338c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003390:	f380 8809 	msr	PSP, r0
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	f3af 8000 	nop.w

080033a0 <pxCurrentTCBConst>:
 80033a0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop

080033a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
        __asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	607b      	str	r3, [r7, #4]
    }
 80033c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80033c2:	f001 fae5 	bl	8004990 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033c6:	f7ff f9e5 	bl	8002794 <xTaskIncrementTick>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80033d0:	f001 fb3c 	bl	8004a4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <SysTick_Handler+0x50>)
 80033d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e001      	b.n	80033e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80033de:	f001 fb19 	bl	8004a14 <SEGGER_SYSVIEW_RecordExitISR>
 80033e2:	2300      	movs	r3, #0
 80033e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f383 8811 	msr	BASEPRI, r3
    }
 80033ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <vPortSetupTimerInterrupt+0x34>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <vPortSetupTimerInterrupt+0x38>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <vPortSetupTimerInterrupt+0x3c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <vPortSetupTimerInterrupt+0x40>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <vPortSetupTimerInterrupt+0x44>)
 800341a:	3b01      	subs	r3, #1
 800341c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <vPortSetupTimerInterrupt+0x34>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010
 8003434:	e000e018 	.word	0xe000e018
 8003438:	20000000 	.word	0x20000000
 800343c:	10624dd3 	.word	0x10624dd3
 8003440:	e000e014 	.word	0xe000e014

08003444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003454 <vPortEnableVFP+0x10>
 8003448:	6801      	ldr	r1, [r0, #0]
 800344a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800344e:	6001      	str	r1, [r0, #0]
 8003450:	4770      	bx	lr
 8003452:	0000      	.short	0x0000
 8003454:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop

0800345c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003468:	f7ff f8e6 	bl	8002638 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800346c:	4b65      	ldr	r3, [pc, #404]	; (8003604 <pvPortMalloc+0x1a8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003474:	f000 f934 	bl	80036e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003478:	4b63      	ldr	r3, [pc, #396]	; (8003608 <pvPortMalloc+0x1ac>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 80a7 	bne.w	80035d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02d      	beq.n	80034e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800348c:	2208      	movs	r2, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d227      	bcs.n	80034e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003498:	2208      	movs	r2, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d021      	beq.n	80034ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f023 0307 	bic.w	r3, r3, #7
 80034b0:	3308      	adds	r3, #8
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d214      	bcs.n	80034e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	3308      	adds	r3, #8
 80034c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <pvPortMalloc+0x92>
        __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	617b      	str	r3, [r7, #20]
    }
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034e6:	e002      	b.n	80034ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	e000      	b.n	80034f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d06e      	beq.n	80035d4 <pvPortMalloc+0x178>
 80034f6:	4b45      	ldr	r3, [pc, #276]	; (800360c <pvPortMalloc+0x1b0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d869      	bhi.n	80035d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003500:	4b43      	ldr	r3, [pc, #268]	; (8003610 <pvPortMalloc+0x1b4>)
 8003502:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003504:	4b42      	ldr	r3, [pc, #264]	; (8003610 <pvPortMalloc+0x1b4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800350a:	e004      	b.n	8003516 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d903      	bls.n	8003528 <pvPortMalloc+0xcc>
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f1      	bne.n	800350c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <pvPortMalloc+0x1a8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	429a      	cmp	r2, r3
 8003530:	d050      	beq.n	80035d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2208      	movs	r2, #8
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	1ad2      	subs	r2, r2, r3
 800354c:	2308      	movs	r3, #8
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	429a      	cmp	r2, r3
 8003552:	d91f      	bls.n	8003594 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <pvPortMalloc+0x120>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	613b      	str	r3, [r7, #16]
    }
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	1ad2      	subs	r2, r2, r3
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800358e:	69b8      	ldr	r0, [r7, #24]
 8003590:	f000 f908 	bl	80037a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <pvPortMalloc+0x1b0>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <pvPortMalloc+0x1b0>)
 80035a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <pvPortMalloc+0x1b0>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <pvPortMalloc+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d203      	bcs.n	80035b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <pvPortMalloc+0x1b0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <pvPortMalloc+0x1b8>)
 80035b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <pvPortMalloc+0x1ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	431a      	orrs	r2, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <pvPortMalloc+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <pvPortMalloc+0x1bc>)
 80035d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80035d4:	f7ff f83e 	bl	8002654 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <pvPortMalloc+0x19c>
        __asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	60fb      	str	r3, [r7, #12]
    }
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80035f8:	69fb      	ldr	r3, [r7, #28]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20012da0 	.word	0x20012da0
 8003608:	20012db4 	.word	0x20012db4
 800360c:	20012da4 	.word	0x20012da4
 8003610:	20012d98 	.word	0x20012d98
 8003614:	20012da8 	.word	0x20012da8
 8003618:	20012dac 	.word	0x20012dac

0800361c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04d      	beq.n	80036ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800362e:	2308      	movs	r3, #8
 8003630:	425b      	negs	r3, r3
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4413      	add	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <vPortFree+0xb8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <vPortFree+0x44>
        __asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	60fb      	str	r3, [r7, #12]
    }
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <vPortFree+0x62>
        __asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	60bb      	str	r3, [r7, #8]
    }
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <vPortFree+0xb8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01e      	beq.n	80036ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11a      	bne.n	80036ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <vPortFree+0xb8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80036a4:	f7fe ffc8 	bl	8002638 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <vPortFree+0xbc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <vPortFree+0xbc>)
 80036b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036b6:	6938      	ldr	r0, [r7, #16]
 80036b8:	f000 f874 	bl	80037a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <vPortFree+0xc0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	4a06      	ldr	r2, [pc, #24]	; (80036dc <vPortFree+0xc0>)
 80036c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036c6:	f7fe ffc5 	bl	8002654 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20012db4 	.word	0x20012db4
 80036d8:	20012da4 	.word	0x20012da4
 80036dc:	20012db0 	.word	0x20012db0

080036e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80036ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <prvHeapInit+0xac>)
 80036ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3307      	adds	r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	4a1f      	ldr	r2, [pc, #124]	; (800378c <prvHeapInit+0xac>)
 8003710:	4413      	add	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <prvHeapInit+0xb0>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <prvHeapInit+0xb0>)
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4413      	add	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800372c:	2208      	movs	r2, #8
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <prvHeapInit+0xb4>)
 8003740:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <prvHeapInit+0xb4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <prvHeapInit+0xb4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <prvHeapInit+0xb4>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <prvHeapInit+0xb8>)
 800376e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a09      	ldr	r2, [pc, #36]	; (800379c <prvHeapInit+0xbc>)
 8003776:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <prvHeapInit+0xc0>)
 800377a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000198 	.word	0x20000198
 8003790:	20012d98 	.word	0x20012d98
 8003794:	20012da0 	.word	0x20012da0
 8003798:	20012da8 	.word	0x20012da8
 800379c:	20012da4 	.word	0x20012da4
 80037a0:	20012db4 	.word	0x20012db4

080037a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <prvInsertBlockIntoFreeList+0xac>)
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e002      	b.n	80037b8 <prvInsertBlockIntoFreeList+0x14>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d8f7      	bhi.n	80037b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d108      	bne.n	80037e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	441a      	add	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d118      	bne.n	800382c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <prvInsertBlockIntoFreeList+0xb0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d00d      	beq.n	8003822 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e008      	b.n	8003834 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <prvInsertBlockIntoFreeList+0xb0>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e003      	b.n	8003834 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d002      	beq.n	8003842 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20012d98 	.word	0x20012d98
 8003854:	20012da0 	.word	0x20012da0

08003858 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003866:	2205      	movs	r2, #5
 8003868:	492b      	ldr	r1, [pc, #172]	; (8003918 <SYSVIEW_AddTask+0xc0>)
 800386a:	68b8      	ldr	r0, [r7, #8]
 800386c:	f001 fbc2 	bl	8004ff4 <memcmp>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04b      	beq.n	800390e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <SYSVIEW_AddTask+0xc4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b07      	cmp	r3, #7
 800387c:	d903      	bls.n	8003886 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800387e:	4828      	ldr	r0, [pc, #160]	; (8003920 <SYSVIEW_AddTask+0xc8>)
 8003880:	f001 fb38 	bl	8004ef4 <SEGGER_SYSVIEW_Warn>
    return;
 8003884:	e044      	b.n	8003910 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003886:	4b25      	ldr	r3, [pc, #148]	; (800391c <SYSVIEW_AddTask+0xc4>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4926      	ldr	r1, [pc, #152]	; (8003924 <SYSVIEW_AddTask+0xcc>)
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <SYSVIEW_AddTask+0xc4>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4921      	ldr	r1, [pc, #132]	; (8003924 <SYSVIEW_AddTask+0xcc>)
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3304      	adds	r3, #4
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <SYSVIEW_AddTask+0xc4>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	491b      	ldr	r1, [pc, #108]	; (8003924 <SYSVIEW_AddTask+0xcc>)
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	3308      	adds	r3, #8
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <SYSVIEW_AddTask+0xc4>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4916      	ldr	r1, [pc, #88]	; (8003924 <SYSVIEW_AddTask+0xcc>)
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	330c      	adds	r3, #12
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <SYSVIEW_AddTask+0xc4>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4910      	ldr	r1, [pc, #64]	; (8003924 <SYSVIEW_AddTask+0xcc>)
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	3310      	adds	r3, #16
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <SYSVIEW_AddTask+0xc4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a08      	ldr	r2, [pc, #32]	; (800391c <SYSVIEW_AddTask+0xc4>)
 80038fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f8ca 	bl	8003aa0 <SYSVIEW_SendTaskInfo>
 800390c:	e000      	b.n	8003910 <SYSVIEW_AddTask+0xb8>
    return;
 800390e:	bf00      	nop

}
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	080050bc 	.word	0x080050bc
 800391c:	20012e58 	.word	0x20012e58
 8003920:	080050c4 	.word	0x080050c4
 8003924:	20012db8 	.word	0x20012db8

08003928 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003930:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ab 	beq.w	8003a90 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e00d      	b.n	800395c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003940:	4956      	ldr	r1, [pc, #344]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d008      	beq.n	8003968 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	4b4e      	ldr	r3, [pc, #312]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3ec      	bcc.n	8003940 <SYSVIEW_DeleteTask+0x18>
 8003966:	e000      	b.n	800396a <SYSVIEW_DeleteTask+0x42>
      break;
 8003968:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800396a:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3b01      	subs	r3, #1
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	429a      	cmp	r2, r3
 8003974:	d111      	bne.n	800399a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003982:	4413      	add	r3, r2
 8003984:	2214      	movs	r2, #20
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fb51 	bl	8005030 <memset>
    _NumTasks--;
 800398e:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3b01      	subs	r3, #1
 8003994:	4a40      	ldr	r2, [pc, #256]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	e07b      	b.n	8003a92 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800399a:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d276      	bcs.n	8003a92 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80039a4:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	493c      	ldr	r1, [pc, #240]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	6819      	ldr	r1, [r3, #0]
 80039b8:	4838      	ldr	r0, [pc, #224]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4403      	add	r3, r0
 80039c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	4933      	ldr	r1, [pc, #204]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	3304      	adds	r3, #4
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	482f      	ldr	r0, [pc, #188]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4403      	add	r3, r0
 80039ec:	3304      	adds	r3, #4
 80039ee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	4929      	ldr	r1, [pc, #164]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3308      	adds	r3, #8
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	4825      	ldr	r0, [pc, #148]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4403      	add	r3, r0
 8003a14:	3308      	adds	r3, #8
 8003a16:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	491f      	ldr	r1, [pc, #124]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	481b      	ldr	r0, [pc, #108]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4403      	add	r3, r0
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003a40:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	4915      	ldr	r1, [pc, #84]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	3310      	adds	r3, #16
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	4811      	ldr	r0, [pc, #68]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4403      	add	r3, r0
 8003a64:	3310      	adds	r3, #16
 8003a66:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <SYSVIEW_DeleteTask+0x174>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	2214      	movs	r2, #20
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 fad6 	bl	8005030 <memset>
    _NumTasks--;
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	4a03      	ldr	r2, [pc, #12]	; (8003a98 <SYSVIEW_DeleteTask+0x170>)
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e000      	b.n	8003a92 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003a90:	bf00      	nop
  }
}
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20012e58 	.word	0x20012e58
 8003a9c:	20012db8 	.word	0x20012db8

08003aa0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	2214      	movs	r2, #20
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 faba 	bl	8005030 <memset>
  TaskInfo.TaskID     = TaskID;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fe31 	bl	800473c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ada:	bf00      	nop
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <_DoInit+0xa0>)
 8003aec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003aee:	22a8      	movs	r2, #168	; 0xa8
 8003af0:	2100      	movs	r1, #0
 8003af2:	6838      	ldr	r0, [r7, #0]
 8003af4:	f001 fa9c 	bl	8005030 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2203      	movs	r2, #3
 8003afc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2203      	movs	r2, #3
 8003b02:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <_DoInit+0xa4>)
 8003b08:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <_DoInit+0xa8>)
 8003b0e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b16:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	4a16      	ldr	r2, [pc, #88]	; (8003b88 <_DoInit+0xa4>)
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <_DoInit+0xac>)
 8003b34:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2200      	movs	r2, #0
 8003b46:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b4e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	e00c      	b.n	8003b72 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1c3 030f 	rsb	r3, r3, #15
 8003b5e:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <_DoInit+0xb0>)
 8003b60:	5cd1      	ldrb	r1, [r2, r3]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	460a      	mov	r2, r1
 8003b6a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b0f      	cmp	r3, #15
 8003b76:	d9ef      	bls.n	8003b58 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b78:	f3bf 8f5f 	dmb	sy
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20012e5c 	.word	0x20012e5c
 8003b88:	08005114 	.word	0x08005114
 8003b8c:	20012f04 	.word	0x20012f04
 8003b90:	20013304 	.word	0x20013304
 8003b94:	08005138 	.word	0x08005138

08003b98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003ba4:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003bb2:	f7ff ff97 	bl	8003ae4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	3360      	adds	r3, #96	; 0x60
 8003bc2:	4a37      	ldr	r2, [pc, #220]	; (8003ca0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bc4:	4413      	add	r3, r2
 8003bc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d92b      	bls.n	8003c3c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bf28      	it	cs
 8003bf6:	4613      	movcs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	4413      	add	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	6939      	ldr	r1, [r7, #16]
 8003c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c0a:	f001 fa03 	bl	8005014 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d101      	bne.n	8003c3c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	bf28      	it	cs
 8003c4c:	4613      	movcs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d019      	beq.n	8003c8a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	4413      	add	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	6939      	ldr	r1, [r7, #16]
 8003c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c66:	f001 f9d5 	bl	8005014 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	4413      	add	r3, r2
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c94:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3730      	adds	r7, #48	; 0x30
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20012e5c 	.word	0x20012e5c

08003ca4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	60fa      	str	r2, [r7, #12]
 8003cba:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d90a      	bls.n	8003cd8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003cc6:	e007      	b.n	8003cd8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	1c53      	adds	r3, r2, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	60f9      	str	r1, [r7, #12]
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1e5a      	subs	r2, r3, #1
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <_EncodeStr+0x46>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ee      	bne.n	8003cc8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3307      	adds	r3, #7
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d22:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <_HandleIncomingPacket+0xdc>)
 8003d24:	7e1b      	ldrb	r3, [r3, #24]
 8003d26:	4618      	mov	r0, r3
 8003d28:	1cfb      	adds	r3, r7, #3
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7ff ff33 	bl	8003b98 <SEGGER_RTT_ReadNoLock>
 8003d32:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d052      	beq.n	8003de0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d031      	beq.n	8003da4 <_HandleIncomingPacket+0x88>
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	dc40      	bgt.n	8003dc6 <_HandleIncomingPacket+0xaa>
 8003d44:	2b07      	cmp	r3, #7
 8003d46:	dc15      	bgt.n	8003d74 <_HandleIncomingPacket+0x58>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dd3c      	ble.n	8003dc6 <_HandleIncomingPacket+0xaa>
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d839      	bhi.n	8003dc6 <_HandleIncomingPacket+0xaa>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <_HandleIncomingPacket+0x3c>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d7b 	.word	0x08003d7b
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d87 	.word	0x08003d87
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d93 	.word	0x08003d93
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	2b7f      	cmp	r3, #127	; 0x7f
 8003d76:	d035      	beq.n	8003de4 <_HandleIncomingPacket+0xc8>
 8003d78:	e025      	b.n	8003dc6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003d7a:	f000 fb65 	bl	8004448 <SEGGER_SYSVIEW_Start>
      break;
 8003d7e:	e036      	b.n	8003dee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003d80:	f000 fc1c 	bl	80045bc <SEGGER_SYSVIEW_Stop>
      break;
 8003d84:	e033      	b.n	8003dee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003d86:	f000 fdd1 	bl	800492c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003d8a:	e030      	b.n	8003dee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003d8c:	f000 fdba 	bl	8004904 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003d90:	e02d      	b.n	8003dee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003d92:	f000 fc39 	bl	8004608 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003d96:	e02a      	b.n	8003dee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003d98:	f001 f86e 	bl	8004e78 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003d9c:	e027      	b.n	8003dee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003d9e:	f001 f84d 	bl	8004e3c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003da2:	e024      	b.n	8003dee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <_HandleIncomingPacket+0xdc>)
 8003da6:	7e1b      	ldrb	r3, [r3, #24]
 8003da8:	4618      	mov	r0, r3
 8003daa:	1cfb      	adds	r3, r7, #3
 8003dac:	2201      	movs	r2, #1
 8003dae:	4619      	mov	r1, r3
 8003db0:	f7ff fef2 	bl	8003b98 <SEGGER_RTT_ReadNoLock>
 8003db4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d015      	beq.n	8003de8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 ffb2 	bl	8004d28 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003dc4:	e010      	b.n	8003de8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	b25b      	sxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da0e      	bge.n	8003dec <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <_HandleIncomingPacket+0xdc>)
 8003dd0:	7e1b      	ldrb	r3, [r3, #24]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	1cfb      	adds	r3, r7, #3
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f7ff fedd 	bl	8003b98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003dde:	e005      	b.n	8003dec <_HandleIncomingPacket+0xd0>
    }
  }
 8003de0:	bf00      	nop
 8003de2:	e004      	b.n	8003dee <_HandleIncomingPacket+0xd2>
      break;
 8003de4:	bf00      	nop
 8003de6:	e002      	b.n	8003dee <_HandleIncomingPacket+0xd2>
      break;
 8003de8:	bf00      	nop
 8003dea:	e000      	b.n	8003dee <_HandleIncomingPacket+0xd2>
      break;
 8003dec:	bf00      	nop
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20013314 	.word	0x20013314

08003dfc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	; 0x30
 8003e00:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003e02:	2301      	movs	r3, #1
 8003e04:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e10:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e16:	e00b      	b.n	8003e30 <_TrySendOverflowPacket+0x34>
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	09db      	lsrs	r3, r3, #7
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	2b7f      	cmp	r3, #127	; 0x7f
 8003e34:	d8f0      	bhi.n	8003e18 <_TrySendOverflowPacket+0x1c>
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <_TrySendOverflowPacket+0xe0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003e4c:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	e00b      	b.n	8003e78 <_TrySendOverflowPacket+0x7c>
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	1c59      	adds	r1, r3, #1
 8003e68:	6279      	str	r1, [r7, #36]	; 0x24
 8003e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	09db      	lsrs	r3, r3, #7
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7c:	d8f0      	bhi.n	8003e60 <_TrySendOverflowPacket+0x64>
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	627a      	str	r2, [r7, #36]	; 0x24
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003e8e:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	4618      	mov	r0, r3
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f7fc f996 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e004      	b.n	8003ecc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a03      	ldr	r2, [pc, #12]	; (8003ed8 <_TrySendOverflowPacket+0xdc>)
 8003eca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003ecc:	693b      	ldr	r3, [r7, #16]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3730      	adds	r7, #48	; 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20013314 	.word	0x20013314
 8003edc:	e0001004 	.word	0xe0001004

08003ee0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003eec:	4b98      	ldr	r3, [pc, #608]	; (8004150 <_SendPacket+0x270>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d010      	beq.n	8003f16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003ef4:	4b96      	ldr	r3, [pc, #600]	; (8004150 <_SendPacket+0x270>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 812d 	beq.w	8004158 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003efe:	4b94      	ldr	r3, [pc, #592]	; (8004150 <_SendPacket+0x270>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d109      	bne.n	8003f1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003f06:	f7ff ff79 	bl	8003dfc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003f0a:	4b91      	ldr	r3, [pc, #580]	; (8004150 <_SendPacket+0x270>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	f040 8124 	bne.w	800415c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003f14:	e001      	b.n	8003f1a <_SendPacket+0x3a>
    goto Send;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <_SendPacket+0x3c>
Send:
 8003f1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b1f      	cmp	r3, #31
 8003f20:	d809      	bhi.n	8003f36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003f22:	4b8b      	ldr	r3, [pc, #556]	; (8004150 <_SendPacket+0x270>)
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 8115 	bne.w	8004160 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b17      	cmp	r3, #23
 8003f3a:	d807      	bhi.n	8003f4c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e0c4      	b.n	80040d6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b7f      	cmp	r3, #127	; 0x7f
 8003f58:	d912      	bls.n	8003f80 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	09da      	lsrs	r2, r3, #7
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	3a01      	subs	r2, #1
 8003f72:	60fa      	str	r2, [r7, #12]
 8003f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e006      	b.n	8003f8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b7e      	cmp	r3, #126	; 0x7e
 8003f92:	d807      	bhi.n	8003fa4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e098      	b.n	80040d6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d212      	bcs.n	8003fd2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	09da      	lsrs	r2, r3, #7
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	3a01      	subs	r2, #1
 8003fc4:	60fa      	str	r2, [r7, #12]
 8003fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e081      	b.n	80040d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd8:	d21d      	bcs.n	8004016 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0b9a      	lsrs	r2, r3, #14
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	09db      	lsrs	r3, r3, #7
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	60fa      	str	r2, [r7, #12]
 8003ff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	3a01      	subs	r2, #1
 8004008:	60fa      	str	r2, [r7, #12]
 800400a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e05f      	b.n	80040d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800401c:	d228      	bcs.n	8004070 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0d5a      	lsrs	r2, r3, #21
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b01      	subs	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0b9b      	lsrs	r3, r3, #14
 8004032:	b2db      	uxtb	r3, r3
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	3a01      	subs	r2, #1
 8004038:	60fa      	str	r2, [r7, #12]
 800403a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	09db      	lsrs	r3, r3, #7
 8004048:	b2db      	uxtb	r3, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	3a01      	subs	r2, #1
 800404e:	60fa      	str	r2, [r7, #12]
 8004050:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	3a01      	subs	r2, #1
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e032      	b.n	80040d6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0f1a      	lsrs	r2, r3, #28
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b01      	subs	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0d5b      	lsrs	r3, r3, #21
 8004084:	b2db      	uxtb	r3, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	3a01      	subs	r2, #1
 800408a:	60fa      	str	r2, [r7, #12]
 800408c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0b9b      	lsrs	r3, r3, #14
 800409a:	b2db      	uxtb	r3, r3
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	3a01      	subs	r2, #1
 80040a0:	60fa      	str	r2, [r7, #12]
 80040a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	09db      	lsrs	r3, r3, #7
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	3a01      	subs	r2, #1
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	3a01      	subs	r2, #1
 80040ca:	60fa      	str	r2, [r7, #12]
 80040cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80040d6:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <_SendPacket+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <_SendPacket+0x270>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	623b      	str	r3, [r7, #32]
 80040ee:	e00b      	b.n	8004108 <_SendPacket+0x228>
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	6279      	str	r1, [r7, #36]	; 0x24
 80040fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	09db      	lsrs	r3, r3, #7
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	2b7f      	cmp	r3, #127	; 0x7f
 800410c:	d8f0      	bhi.n	80040f0 <_SendPacket+0x210>
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	627a      	str	r2, [r7, #36]	; 0x24
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <_SendPacket+0x270>)
 8004120:	785b      	ldrb	r3, [r3, #1]
 8004122:	4618      	mov	r0, r3
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	461a      	mov	r2, r3
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	f7fc f84f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004132:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <_SendPacket+0x270>)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	60d3      	str	r3, [r2, #12]
 8004140:	e00f      	b.n	8004162 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004142:	4b03      	ldr	r3, [pc, #12]	; (8004150 <_SendPacket+0x270>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4b01      	ldr	r3, [pc, #4]	; (8004150 <_SendPacket+0x270>)
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e008      	b.n	8004162 <_SendPacket+0x282>
 8004150:	20013314 	.word	0x20013314
 8004154:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <_SendPacket+0x282>
      goto SendDone;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <_SendPacket+0x282>
      goto SendDone;
 8004160:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <_SendPacket+0x2d4>)
 8004164:	7e1b      	ldrb	r3, [r3, #24]
 8004166:	4619      	mov	r1, r3
 8004168:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <_SendPacket+0x2d8>)
 800416a:	460b      	mov	r3, r1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	440b      	add	r3, r1
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	336c      	adds	r3, #108	; 0x6c
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <_SendPacket+0x2d4>)
 800417a:	7e1b      	ldrb	r3, [r3, #24]
 800417c:	4618      	mov	r0, r3
 800417e:	490e      	ldr	r1, [pc, #56]	; (80041b8 <_SendPacket+0x2d8>)
 8004180:	4603      	mov	r3, r0
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4403      	add	r3, r0
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	3370      	adds	r3, #112	; 0x70
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d00b      	beq.n	80041aa <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <_SendPacket+0x2d4>)
 8004194:	789b      	ldrb	r3, [r3, #2]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <_SendPacket+0x2d4>)
 800419c:	2201      	movs	r2, #1
 800419e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80041a0:	f7ff fdbc 	bl	8003d1c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <_SendPacket+0x2d4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041aa:	bf00      	nop
 80041ac:	3728      	adds	r7, #40	; 0x28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20013314 	.word	0x20013314
 80041b8:	20012e5c 	.word	0x20012e5c

080041bc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041c4:	f3ef 8311 	mrs	r3, BASEPRI
 80041c8:	f04f 0120 	mov.w	r1, #32
 80041cc:	f381 8811 	msr	BASEPRI, r1
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4808      	ldr	r0, [pc, #32]	; (80041f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80041d4:	f7ff fd96 	bl	8003d04 <_PreparePacket>
 80041d8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68b8      	ldr	r0, [r7, #8]
 80041e0:	f7ff fe7e 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f383 8811 	msr	BASEPRI, r3
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20013344 	.word	0x20013344

080041f8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004202:	f3ef 8311 	mrs	r3, BASEPRI
 8004206:	f04f 0120 	mov.w	r1, #32
 800420a:	f381 8811 	msr	BASEPRI, r1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	4816      	ldr	r0, [pc, #88]	; (800426c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004212:	f7ff fd77 	bl	8003d04 <_PreparePacket>
 8004216:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e00b      	b.n	800423e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	1c59      	adds	r1, r3, #1
 800422e:	61f9      	str	r1, [r7, #28]
 8004230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	09db      	lsrs	r3, r3, #7
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b7f      	cmp	r3, #127	; 0x7f
 8004242:	d8f0      	bhi.n	8004226 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	61fa      	str	r2, [r7, #28]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	6938      	ldr	r0, [r7, #16]
 800425a:	f7ff fe41 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f383 8811 	msr	BASEPRI, r3
}
 8004264:	bf00      	nop
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20013344 	.word	0x20013344

08004270 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	; 0x30
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800427c:	f3ef 8311 	mrs	r3, BASEPRI
 8004280:	f04f 0120 	mov.w	r1, #32
 8004284:	f381 8811 	msr	BASEPRI, r1
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	4825      	ldr	r0, [pc, #148]	; (8004320 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800428c:	f7ff fd3a 	bl	8003d04 <_PreparePacket>
 8004290:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	e00b      	b.n	80042b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	1c59      	adds	r1, r3, #1
 80042a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	09db      	lsrs	r3, r3, #7
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	2b7f      	cmp	r3, #127	; 0x7f
 80042bc:	d8f0      	bhi.n	80042a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	e00b      	b.n	80042f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	6279      	str	r1, [r7, #36]	; 0x24
 80042e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	09db      	lsrs	r3, r3, #7
 80042ee:	623b      	str	r3, [r7, #32]
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	2b7f      	cmp	r3, #127	; 0x7f
 80042f4:	d8f0      	bhi.n	80042d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	627a      	str	r2, [r7, #36]	; 0x24
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	6979      	ldr	r1, [r7, #20]
 800430a:	69b8      	ldr	r0, [r7, #24]
 800430c:	f7ff fde8 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f383 8811 	msr	BASEPRI, r3
}
 8004316:	bf00      	nop
 8004318:	3730      	adds	r7, #48	; 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20013344 	.word	0x20013344

08004324 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b090      	sub	sp, #64	; 0x40
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004332:	f3ef 8311 	mrs	r3, BASEPRI
 8004336:	f04f 0120 	mov.w	r1, #32
 800433a:	f381 8811 	msr	BASEPRI, r1
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	4840      	ldr	r0, [pc, #256]	; (8004444 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004342:	f7ff fcdf 	bl	8003d04 <_PreparePacket>
 8004346:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38
 8004354:	e00b      	b.n	800436e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	b2da      	uxtb	r2, r3
 800435a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435c:	1c59      	adds	r1, r3, #1
 800435e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	09db      	lsrs	r3, r3, #7
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	2b7f      	cmp	r3, #127	; 0x7f
 8004372:	d8f0      	bhi.n	8004356 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800437a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
 800438c:	e00b      	b.n	80043a6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	b2da      	uxtb	r2, r3
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	6379      	str	r1, [r7, #52]	; 0x34
 8004398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	09db      	lsrs	r3, r3, #7
 80043a4:	633b      	str	r3, [r7, #48]	; 0x30
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2b7f      	cmp	r3, #127	; 0x7f
 80043aa:	d8f0      	bhi.n	800438e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80043ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	637a      	str	r2, [r7, #52]	; 0x34
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c4:	e00b      	b.n	80043de <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	1c59      	adds	r1, r3, #1
 80043ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	09db      	lsrs	r3, r3, #7
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b7f      	cmp	r3, #127	; 0x7f
 80043e2:	d8f0      	bhi.n	80043c6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	e00b      	b.n	8004416 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1c59      	adds	r1, r3, #1
 8004406:	6279      	str	r1, [r7, #36]	; 0x24
 8004408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	09db      	lsrs	r3, r3, #7
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2b7f      	cmp	r3, #127	; 0x7f
 800441a:	d8f0      	bhi.n	80043fe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	627a      	str	r2, [r7, #36]	; 0x24
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	69b8      	ldr	r0, [r7, #24]
 8004432:	f7ff fd55 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f383 8811 	msr	BASEPRI, r3
}
 800443c:	bf00      	nop
 800443e:	3740      	adds	r7, #64	; 0x40
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20013344 	.word	0x20013344

08004448 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	; 0x30
 800444c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800444e:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <SEGGER_SYSVIEW_Start+0x168>)
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004454:	f3ef 8311 	mrs	r3, BASEPRI
 8004458:	f04f 0120 	mov.w	r1, #32
 800445c:	f381 8811 	msr	BASEPRI, r1
 8004460:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004462:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <SEGGER_SYSVIEW_Start+0x168>)
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	220a      	movs	r2, #10
 8004468:	4952      	ldr	r1, [pc, #328]	; (80045b4 <SEGGER_SYSVIEW_Start+0x16c>)
 800446a:	4618      	mov	r0, r3
 800446c:	f7fb feb0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004476:	200a      	movs	r0, #10
 8004478:	f7ff fea0 	bl	80041bc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800447c:	f3ef 8311 	mrs	r3, BASEPRI
 8004480:	f04f 0120 	mov.w	r1, #32
 8004484:	f381 8811 	msr	BASEPRI, r1
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	484b      	ldr	r0, [pc, #300]	; (80045b8 <SEGGER_SYSVIEW_Start+0x170>)
 800448c:	f7ff fc3a 	bl	8003d04 <_PreparePacket>
 8004490:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	4b45      	ldr	r3, [pc, #276]	; (80045b0 <SEGGER_SYSVIEW_Start+0x168>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a0:	e00b      	b.n	80044ba <SEGGER_SYSVIEW_Start+0x72>
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	1c59      	adds	r1, r3, #1
 80044aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	09db      	lsrs	r3, r3, #7
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	2b7f      	cmp	r3, #127	; 0x7f
 80044be:	d8f0      	bhi.n	80044a2 <SEGGER_SYSVIEW_Start+0x5a>
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <SEGGER_SYSVIEW_Start+0x168>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	e00b      	b.n	80044f4 <SEGGER_SYSVIEW_Start+0xac>
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1c59      	adds	r1, r3, #1
 80044e4:	6279      	str	r1, [r7, #36]	; 0x24
 80044e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	09db      	lsrs	r3, r3, #7
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b7f      	cmp	r3, #127	; 0x7f
 80044f8:	d8f0      	bhi.n	80044dc <SEGGER_SYSVIEW_Start+0x94>
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004500:	6a3a      	ldr	r2, [r7, #32]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <SEGGER_SYSVIEW_Start+0x168>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	e00b      	b.n	800452e <SEGGER_SYSVIEW_Start+0xe6>
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	61f9      	str	r1, [r7, #28]
 8004520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	09db      	lsrs	r3, r3, #7
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b7f      	cmp	r3, #127	; 0x7f
 8004532:	d8f0      	bhi.n	8004516 <SEGGER_SYSVIEW_Start+0xce>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	61fa      	str	r2, [r7, #28]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e00b      	b.n	8004566 <SEGGER_SYSVIEW_Start+0x11e>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	6179      	str	r1, [r7, #20]
 8004558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	09db      	lsrs	r3, r3, #7
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b7f      	cmp	r3, #127	; 0x7f
 800456a:	d8f0      	bhi.n	800454e <SEGGER_SYSVIEW_Start+0x106>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	617a      	str	r2, [r7, #20]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800457c:	2218      	movs	r2, #24
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fcad 	bl	8003ee0 <_SendPacket>
      RECORD_END();
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <SEGGER_SYSVIEW_Start+0x168>)
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <SEGGER_SYSVIEW_Start+0x168>)
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800459a:	f000 f9c7 	bl	800492c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800459e:	f000 f9b1 	bl	8004904 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80045a2:	f000 fc69 	bl	8004e78 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80045a6:	bf00      	nop
 80045a8:	3730      	adds	r7, #48	; 0x30
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20013314 	.word	0x20013314
 80045b4:	0800514c 	.word	0x0800514c
 80045b8:	20013344 	.word	0x20013344

080045bc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045c2:	f3ef 8311 	mrs	r3, BASEPRI
 80045c6:	f04f 0120 	mov.w	r1, #32
 80045ca:	f381 8811 	msr	BASEPRI, r1
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	480b      	ldr	r0, [pc, #44]	; (8004600 <SEGGER_SYSVIEW_Stop+0x44>)
 80045d2:	f7ff fb97 	bl	8003d04 <_PreparePacket>
 80045d6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <SEGGER_SYSVIEW_Stop+0x48>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80045e0:	220b      	movs	r2, #11
 80045e2:	6839      	ldr	r1, [r7, #0]
 80045e4:	6838      	ldr	r0, [r7, #0]
 80045e6:	f7ff fc7b 	bl	8003ee0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <SEGGER_SYSVIEW_Stop+0x48>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f383 8811 	msr	BASEPRI, r3
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20013344 	.word	0x20013344
 8004604:	20013314 	.word	0x20013314

08004608 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800460e:	f3ef 8311 	mrs	r3, BASEPRI
 8004612:	f04f 0120 	mov.w	r1, #32
 8004616:	f381 8811 	msr	BASEPRI, r1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	4845      	ldr	r0, [pc, #276]	; (8004734 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800461e:	f7ff fb71 	bl	8003d04 <_PreparePacket>
 8004622:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800462c:	4b42      	ldr	r3, [pc, #264]	; (8004738 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
 8004632:	e00b      	b.n	800464c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	b2da      	uxtb	r2, r3
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800463e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	09db      	lsrs	r3, r3, #7
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	2b7f      	cmp	r3, #127	; 0x7f
 8004650:	d8f0      	bhi.n	8004634 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	4b34      	ldr	r3, [pc, #208]	; (8004738 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	e00b      	b.n	8004686 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	1c59      	adds	r1, r3, #1
 8004676:	6279      	str	r1, [r7, #36]	; 0x24
 8004678:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	09db      	lsrs	r3, r3, #7
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2b7f      	cmp	r3, #127	; 0x7f
 800468a:	d8f0      	bhi.n	800466e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	627a      	str	r2, [r7, #36]	; 0x24
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	4b25      	ldr	r3, [pc, #148]	; (8004738 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e00b      	b.n	80046c0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	1c59      	adds	r1, r3, #1
 80046b0:	61f9      	str	r1, [r7, #28]
 80046b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	09db      	lsrs	r3, r3, #7
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b7f      	cmp	r3, #127	; 0x7f
 80046c4:	d8f0      	bhi.n	80046a8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	61fa      	str	r2, [r7, #28]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e00b      	b.n	80046f8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	1c59      	adds	r1, r3, #1
 80046e8:	6179      	str	r1, [r7, #20]
 80046ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	09db      	lsrs	r3, r3, #7
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b7f      	cmp	r3, #127	; 0x7f
 80046fc:	d8f0      	bhi.n	80046e0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	617a      	str	r2, [r7, #20]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800470e:	2218      	movs	r2, #24
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	68b8      	ldr	r0, [r7, #8]
 8004714:	f7ff fbe4 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	4798      	blx	r3
  }
}
 800472c:	bf00      	nop
 800472e:	3730      	adds	r7, #48	; 0x30
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20013344 	.word	0x20013344
 8004738:	20013314 	.word	0x20013314

0800473c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b092      	sub	sp, #72	; 0x48
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004744:	f3ef 8311 	mrs	r3, BASEPRI
 8004748:	f04f 0120 	mov.w	r1, #32
 800474c:	f381 8811 	msr	BASEPRI, r1
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	486a      	ldr	r0, [pc, #424]	; (80048fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004754:	f7ff fad6 	bl	8003d04 <_PreparePacket>
 8004758:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b66      	ldr	r3, [pc, #408]	; (8004900 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	643b      	str	r3, [r7, #64]	; 0x40
 800476e:	e00b      	b.n	8004788 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004772:	b2da      	uxtb	r2, r3
 8004774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004776:	1c59      	adds	r1, r3, #1
 8004778:	6479      	str	r1, [r7, #68]	; 0x44
 800477a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004784:	09db      	lsrs	r3, r3, #7
 8004786:	643b      	str	r3, [r7, #64]	; 0x40
 8004788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478a:	2b7f      	cmp	r3, #127	; 0x7f
 800478c:	d8f0      	bhi.n	8004770 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	647a      	str	r2, [r7, #68]	; 0x44
 8004794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a8:	e00b      	b.n	80047c2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	1c59      	adds	r1, r3, #1
 80047b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80047b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	09db      	lsrs	r3, r3, #7
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b7f      	cmp	r3, #127	; 0x7f
 80047c6:	d8f0      	bhi.n	80047aa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	4619      	mov	r1, r3
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fa5f 	bl	8003ca4 <_EncodeStr>
 80047e6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80047e8:	2209      	movs	r2, #9
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	6938      	ldr	r0, [r7, #16]
 80047ee:	f7ff fb77 	bl	8003ee0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b40      	ldr	r3, [pc, #256]	; (8004900 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
 8004806:	e00b      	b.n	8004820 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	6379      	str	r1, [r7, #52]	; 0x34
 8004812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	09db      	lsrs	r3, r3, #7
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2b7f      	cmp	r3, #127	; 0x7f
 8004824:	d8f0      	bhi.n	8004808 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	637a      	str	r2, [r7, #52]	; 0x34
 800482c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004840:	e00b      	b.n	800485a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	b2da      	uxtb	r2, r3
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	1c59      	adds	r1, r3, #1
 800484a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800484c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	2b7f      	cmp	r3, #127	; 0x7f
 800485e:	d8f0      	bhi.n	8004842 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	e00b      	b.n	8004894 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	1c59      	adds	r1, r3, #1
 8004884:	6279      	str	r1, [r7, #36]	; 0x24
 8004886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	09db      	lsrs	r3, r3, #7
 8004892:	623b      	str	r3, [r7, #32]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b7f      	cmp	r3, #127	; 0x7f
 8004898:	d8f0      	bhi.n	800487c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	627a      	str	r2, [r7, #36]	; 0x24
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e00b      	b.n	80048cc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	61f9      	str	r1, [r7, #28]
 80048be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	09db      	lsrs	r3, r3, #7
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b7f      	cmp	r3, #127	; 0x7f
 80048d0:	d8f0      	bhi.n	80048b4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	61fa      	str	r2, [r7, #28]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80048e2:	2215      	movs	r2, #21
 80048e4:	68f9      	ldr	r1, [r7, #12]
 80048e6:	6938      	ldr	r0, [r7, #16]
 80048e8:	f7ff fafa 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f383 8811 	msr	BASEPRI, r3
}
 80048f2:	bf00      	nop
 80048f4:	3748      	adds	r7, #72	; 0x48
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20013344 	.word	0x20013344
 8004900:	20013314 	.word	0x20013314

08004904 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800491a:	4b03      	ldr	r3, [pc, #12]	; (8004928 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4798      	blx	r3
  }
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20013314 	.word	0x20013314

0800492c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01a      	beq.n	8004970 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4798      	blx	r3
 800494c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004950:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	000a      	movs	r2, r1
 8004960:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004962:	4613      	mov	r3, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4621      	mov	r1, r4
 8004968:	200d      	movs	r0, #13
 800496a:	f7ff fc81 	bl	8004270 <SEGGER_SYSVIEW_RecordU32x2>
 800496e:	e006      	b.n	800497e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	200c      	movs	r0, #12
 8004978:	f7ff fc3e 	bl	80041f8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}
 8004986:	bf00      	nop
 8004988:	20013314 	.word	0x20013314
 800498c:	e0001004 	.word	0xe0001004

08004990 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004996:	f3ef 8311 	mrs	r3, BASEPRI
 800499a:	f04f 0120 	mov.w	r1, #32
 800499e:	f381 8811 	msr	BASEPRI, r1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	4819      	ldr	r0, [pc, #100]	; (8004a0c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80049a6:	f7ff f9ad 	bl	8003d04 <_PreparePacket>
 80049aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80049b0:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e00b      	b.n	80049dc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	1c59      	adds	r1, r3, #1
 80049cc:	6179      	str	r1, [r7, #20]
 80049ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	09db      	lsrs	r3, r3, #7
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b7f      	cmp	r3, #127	; 0x7f
 80049e0:	d8f0      	bhi.n	80049c4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	617a      	str	r2, [r7, #20]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80049f2:	2202      	movs	r2, #2
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f7ff fa72 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f383 8811 	msr	BASEPRI, r3
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20013344 	.word	0x20013344
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a1e:	f04f 0120 	mov.w	r1, #32
 8004a22:	f381 8811 	msr	BASEPRI, r1
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	4807      	ldr	r0, [pc, #28]	; (8004a48 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004a2a:	f7ff f96b 	bl	8003d04 <_PreparePacket>
 8004a2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004a30:	2203      	movs	r2, #3
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6838      	ldr	r0, [r7, #0]
 8004a36:	f7ff fa53 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f383 8811 	msr	BASEPRI, r3
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20013344 	.word	0x20013344

08004a4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a52:	f3ef 8311 	mrs	r3, BASEPRI
 8004a56:	f04f 0120 	mov.w	r1, #32
 8004a5a:	f381 8811 	msr	BASEPRI, r1
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	4807      	ldr	r0, [pc, #28]	; (8004a80 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004a62:	f7ff f94f 	bl	8003d04 <_PreparePacket>
 8004a66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004a68:	2212      	movs	r2, #18
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	6838      	ldr	r0, [r7, #0]
 8004a6e:	f7ff fa37 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f383 8811 	msr	BASEPRI, r3
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20013344 	.word	0x20013344

08004a84 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8e:	f04f 0120 	mov.w	r1, #32
 8004a92:	f381 8811 	msr	BASEPRI, r1
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	4807      	ldr	r0, [pc, #28]	; (8004ab8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004a9a:	f7ff f933 	bl	8003d04 <_PreparePacket>
 8004a9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004aa0:	2211      	movs	r2, #17
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	6838      	ldr	r0, [r7, #0]
 8004aa6:	f7ff fa1b 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f383 8811 	msr	BASEPRI, r3
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20013344 	.word	0x20013344

08004abc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac8:	f04f 0120 	mov.w	r1, #32
 8004acc:	f381 8811 	msr	BASEPRI, r1
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	4819      	ldr	r0, [pc, #100]	; (8004b38 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004ad4:	f7ff f916 	bl	8003d04 <_PreparePacket>
 8004ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ade:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e00b      	b.n	8004b0a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	61f9      	str	r1, [r7, #28]
 8004afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	09db      	lsrs	r3, r3, #7
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0e:	d8f0      	bhi.n	8004af2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	61fa      	str	r2, [r7, #28]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004b20:	2208      	movs	r2, #8
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	6938      	ldr	r0, [r7, #16]
 8004b26:	f7ff f9db 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f383 8811 	msr	BASEPRI, r3
}
 8004b30:	bf00      	nop
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20013344 	.word	0x20013344
 8004b3c:	20013314 	.word	0x20013314

08004b40 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b48:	f3ef 8311 	mrs	r3, BASEPRI
 8004b4c:	f04f 0120 	mov.w	r1, #32
 8004b50:	f381 8811 	msr	BASEPRI, r1
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	4819      	ldr	r0, [pc, #100]	; (8004bbc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004b58:	f7ff f8d4 	bl	8003d04 <_PreparePacket>
 8004b5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e00b      	b.n	8004b8e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	61f9      	str	r1, [r7, #28]
 8004b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	09db      	lsrs	r3, r3, #7
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b7f      	cmp	r3, #127	; 0x7f
 8004b92:	d8f0      	bhi.n	8004b76 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	6938      	ldr	r0, [r7, #16]
 8004baa:	f7ff f999 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20013344 	.word	0x20013344
 8004bc0:	20013314 	.word	0x20013314

08004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd0:	f04f 0120 	mov.w	r1, #32
 8004bd4:	f381 8811 	msr	BASEPRI, r1
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	4819      	ldr	r0, [pc, #100]	; (8004c40 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004bdc:	f7ff f892 	bl	8003d04 <_PreparePacket>
 8004be0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	e00b      	b.n	8004c12 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	1c59      	adds	r1, r3, #1
 8004c02:	61f9      	str	r1, [r7, #28]
 8004c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	09db      	lsrs	r3, r3, #7
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b7f      	cmp	r3, #127	; 0x7f
 8004c16:	d8f0      	bhi.n	8004bfa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	61fa      	str	r2, [r7, #28]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004c28:	2206      	movs	r2, #6
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	6938      	ldr	r0, [r7, #16]
 8004c2e:	f7ff f957 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f383 8811 	msr	BASEPRI, r3
}
 8004c38:	bf00      	nop
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20013344 	.word	0x20013344
 8004c44:	20013314 	.word	0x20013314

08004c48 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c52:	f3ef 8311 	mrs	r3, BASEPRI
 8004c56:	f04f 0120 	mov.w	r1, #32
 8004c5a:	f381 8811 	msr	BASEPRI, r1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	4827      	ldr	r0, [pc, #156]	; (8004d00 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004c62:	f7ff f84f 	bl	8003d04 <_PreparePacket>
 8004c66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	e00b      	b.n	8004c98 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	6279      	str	r1, [r7, #36]	; 0x24
 8004c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	09db      	lsrs	r3, r3, #7
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9c:	d8f0      	bhi.n	8004c80 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e00b      	b.n	8004cd0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	61f9      	str	r1, [r7, #28]
 8004cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd4:	d8f0      	bhi.n	8004cb8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	61fa      	str	r2, [r7, #28]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004ce6:	2207      	movs	r2, #7
 8004ce8:	68f9      	ldr	r1, [r7, #12]
 8004cea:	6938      	ldr	r0, [r7, #16]
 8004cec:	f7ff f8f8 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f383 8811 	msr	BASEPRI, r3
}
 8004cf6:	bf00      	nop
 8004cf8:	3728      	adds	r7, #40	; 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20013344 	.word	0x20013344
 8004d04:	20013314 	.word	0x20013314

08004d08 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	1ad3      	subs	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	20013314 	.word	0x20013314

08004d28 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	; 0x30
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d077      	beq.n	8004e2a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004d3a:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004d40:	2300      	movs	r3, #0
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d44:	e008      	b.n	8004d58 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	3301      	adds	r3, #1
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d3f2      	bcc.n	8004d46 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004d60:	e000      	b.n	8004d64 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004d62:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d055      	beq.n	8004e16 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6e:	f04f 0120 	mov.w	r1, #32
 8004d72:	f381 8811 	msr	BASEPRI, r1
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	482f      	ldr	r0, [pc, #188]	; (8004e38 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004d7a:	f7fe ffc3 	bl	8003d04 <_PreparePacket>
 8004d7e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	e00b      	b.n	8004da6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	6279      	str	r1, [r7, #36]	; 0x24
 8004d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	09db      	lsrs	r3, r3, #7
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	2b7f      	cmp	r3, #127	; 0x7f
 8004daa:	d8f0      	bhi.n	8004d8e <SEGGER_SYSVIEW_SendModule+0x66>
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	627a      	str	r2, [r7, #36]	; 0x24
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	e00b      	b.n	8004de0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	61f9      	str	r1, [r7, #28]
 8004dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b7f      	cmp	r3, #127	; 0x7f
 8004de4:	d8f0      	bhi.n	8004dc8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	61fa      	str	r2, [r7, #28]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2280      	movs	r2, #128	; 0x80
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7fe ff50 	bl	8003ca4 <_EncodeStr>
 8004e04:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004e06:	2216      	movs	r2, #22
 8004e08:	68f9      	ldr	r1, [r7, #12]
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f7ff f868 	bl	8003ee0 <_SendPacket>
      RECORD_END();
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d006      	beq.n	8004e2a <SEGGER_SYSVIEW_SendModule+0x102>
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4798      	blx	r3
    }
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	2001333c 	.word	0x2001333c
 8004e38:	20013344 	.word	0x20013344

08004e3c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00f      	beq.n	8004e6a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f2      	bne.n	8004e50 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2001333c 	.word	0x2001333c

08004e78 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e82:	f04f 0120 	mov.w	r1, #32
 8004e86:	f381 8811 	msr	BASEPRI, r1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	4817      	ldr	r0, [pc, #92]	; (8004eec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004e8e:	f7fe ff39 	bl	8003d04 <_PreparePacket>
 8004e92:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e00b      	b.n	8004ebc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	1c59      	adds	r1, r3, #1
 8004eac:	6179      	str	r1, [r7, #20]
 8004eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	09db      	lsrs	r3, r3, #7
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec0:	d8f0      	bhi.n	8004ea4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	617a      	str	r2, [r7, #20]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004ed2:	221b      	movs	r2, #27
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	68b8      	ldr	r0, [r7, #8]
 8004ed8:	f7ff f802 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f383 8811 	msr	BASEPRI, r3
}
 8004ee2:	bf00      	nop
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20013344 	.word	0x20013344
 8004ef0:	20013340 	.word	0x20013340

08004ef4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004efc:	f3ef 8311 	mrs	r3, BASEPRI
 8004f00:	f04f 0120 	mov.w	r1, #32
 8004f04:	f381 8811 	msr	BASEPRI, r1
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	4827      	ldr	r0, [pc, #156]	; (8004fa8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f0c:	f7fe fefa 	bl	8003d04 <_PreparePacket>
 8004f10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	6938      	ldr	r0, [r7, #16]
 8004f18:	f7fe fec4 	bl	8003ca4 <_EncodeStr>
 8004f1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	2301      	movs	r3, #1
 8004f24:	623b      	str	r3, [r7, #32]
 8004f26:	e00b      	b.n	8004f40 <SEGGER_SYSVIEW_Warn+0x4c>
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	6279      	str	r1, [r7, #36]	; 0x24
 8004f32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	09db      	lsrs	r3, r3, #7
 8004f3e:	623b      	str	r3, [r7, #32]
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	2b7f      	cmp	r3, #127	; 0x7f
 8004f44:	d8f0      	bhi.n	8004f28 <SEGGER_SYSVIEW_Warn+0x34>
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e00b      	b.n	8004f78 <SEGGER_SYSVIEW_Warn+0x84>
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	61f9      	str	r1, [r7, #28]
 8004f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	09db      	lsrs	r3, r3, #7
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f7c:	d8f0      	bhi.n	8004f60 <SEGGER_SYSVIEW_Warn+0x6c>
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	61fa      	str	r2, [r7, #28]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f8e:	221a      	movs	r2, #26
 8004f90:	68f9      	ldr	r1, [r7, #12]
 8004f92:	6938      	ldr	r0, [r7, #16]
 8004f94:	f7fe ffa4 	bl	8003ee0 <_SendPacket>
  RECORD_END();
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f383 8811 	msr	BASEPRI, r3
}
 8004f9e:	bf00      	nop
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20013344 	.word	0x20013344

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4d0d      	ldr	r5, [pc, #52]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb0:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb2:	1b64      	subs	r4, r4, r5
 8004fb4:	10a4      	asrs	r4, r4, #2
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	4d0b      	ldr	r5, [pc, #44]	; (8004fec <__libc_init_array+0x40>)
 8004fbe:	4c0c      	ldr	r4, [pc, #48]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc0:	f000 f83e 	bl	8005040 <_init>
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	2600      	movs	r6, #0
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	08005160 	.word	0x08005160
 8004fe8:	08005160 	.word	0x08005160
 8004fec:	08005160 	.word	0x08005160
 8004ff0:	08005164 	.word	0x08005164

08004ff4 <memcmp>:
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	3901      	subs	r1, #1
 8004ff8:	4402      	add	r2, r0
 8004ffa:	4290      	cmp	r0, r2
 8004ffc:	d101      	bne.n	8005002 <memcmp+0xe>
 8004ffe:	2000      	movs	r0, #0
 8005000:	e005      	b.n	800500e <memcmp+0x1a>
 8005002:	7803      	ldrb	r3, [r0, #0]
 8005004:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005008:	42a3      	cmp	r3, r4
 800500a:	d001      	beq.n	8005010 <memcmp+0x1c>
 800500c:	1b18      	subs	r0, r3, r4
 800500e:	bd10      	pop	{r4, pc}
 8005010:	3001      	adds	r0, #1
 8005012:	e7f2      	b.n	8004ffa <memcmp+0x6>

08005014 <memcpy>:
 8005014:	440a      	add	r2, r1
 8005016:	4291      	cmp	r1, r2
 8005018:	f100 33ff 	add.w	r3, r0, #4294967295
 800501c:	d100      	bne.n	8005020 <memcpy+0xc>
 800501e:	4770      	bx	lr
 8005020:	b510      	push	{r4, lr}
 8005022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800502a:	4291      	cmp	r1, r2
 800502c:	d1f9      	bne.n	8005022 <memcpy+0xe>
 800502e:	bd10      	pop	{r4, pc}

08005030 <memset>:
 8005030:	4402      	add	r2, r0
 8005032:	4603      	mov	r3, r0
 8005034:	4293      	cmp	r3, r2
 8005036:	d100      	bne.n	800503a <memset+0xa>
 8005038:	4770      	bx	lr
 800503a:	f803 1b01 	strb.w	r1, [r3], #1
 800503e:	e7f9      	b.n	8005034 <memset+0x4>

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
