
FreeRTOS_M4Cortex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080052d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00013410  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013424  20013424  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123b2  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026de  00000000  00000000  000323f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00034ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  00035be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f98  00000000  00000000  00036ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125cf  00000000  00000000  00059b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f3e  00000000  00000000  0006c107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142045  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004768  00000000  00000000  00142098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051cc 	.word	0x080051cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080051cc 	.word	0x080051cc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e58 	.word	0x20012e58

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <task1_handler>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
static void task1_handler(void *parameters)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
	//char msg[50];
	while(1)
	{
		//snprintf(msg, 50, (char*) parameters);
	//	SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <task1_handler+0x4c>)
 8000574:	f000 fd97 	bl	80010a6 <HAL_GPIO_TogglePin>
		waitstatus= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2000      	movs	r0, #0
 8000586:	f002 fa95 	bl	8002ab4 <xTaskGenericNotifyWait>
 800058a:	60f8      	str	r0, [r7, #12]

		if(waitstatus==pdTRUE)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1ee      	bne.n	8000570 <task1_handler+0x8>
		{
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 8000592:	f002 fe4f 	bl	8003234 <vPortEnterCritical>
			next_task = task2_handle;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <task1_handler+0x50>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <task1_handler+0x54>)
 800059c:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <task1_handler+0x4c>)
 80005a4:	f000 fd66 	bl	8001074 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 fef7 	bl	800239c <vTaskDelete>
			portEXIT_CRITICAL();
 80005ae:	f002 fe71 	bl	8003294 <vPortExitCritical>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80005b2:	e7dd      	b.n	8000570 <task1_handler+0x8>
 80005b4:	40020000 	.word	0x40020000
 80005b8:	20000034 	.word	0x20000034
 80005bc:	20000038 	.word	0x20000038

080005c0 <task2_handler>:

	}
}

static void task2_handler(void *parameters)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
	//char msg[50];
	while(1)
	{
		//snprintf(msg, 50, (char*) parameters);
	//	SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <task2_handler+0x4c>)
 80005cc:	f000 fd6b 	bl	80010a6 <HAL_GPIO_TogglePin>
		waitstatus= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 fa69 	bl	8002ab4 <xTaskGenericNotifyWait>
 80005e2:	60f8      	str	r0, [r7, #12]

		if(waitstatus==pdTRUE)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d1ee      	bne.n	80005c8 <task2_handler+0x8>
			{
				//vTaskSuspendAll();
				portENTER_CRITICAL();
 80005ea:	f002 fe23 	bl	8003234 <vPortEnterCritical>
				next_task = NULL;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <task2_handler+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
				//xTaskResumeAll();
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <task2_handler+0x4c>)
 80005fa:	f000 fd3b 	bl	8001074 <HAL_GPIO_WritePin>
				//vTaskDelete(button_handle);
				vTaskDelete(NULL);
 80005fe:	2000      	movs	r0, #0
 8000600:	f001 fecc 	bl	800239c <vTaskDelete>
				portEXIT_CRITICAL();
 8000604:	f002 fe46 	bl	8003294 <vPortExitCritical>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000608:	e7de      	b.n	80005c8 <task2_handler+0x8>
 800060a:	bf00      	nop
 800060c:	40020000 	.word	0x40020000
 8000610:	20000038 	.word	0x20000038

08000614 <Button_interrupt_Handler>:
	}
}
*/

void Button_interrupt_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af02      	add	r7, sp, #8
	xTaskNotifyFromISR(next_task,0,eNoAction, NULL);
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <Button_interrupt_Handler+0x24>)
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2300      	movs	r3, #0
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	f002 faca 	bl	8002bc4 <xTaskGenericNotifyFromISR>
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000038 	.word	0x20000038

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fa57 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f863 	bl	8000710 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <main+0xa8>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <main+0xa8>)
 8000650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000654:	60d3      	str	r3, [r2, #12]

  DWT->CYCCNT = 0;
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <main+0xac>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8c2 	bl	80007e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL|=(1<<0);
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0xac>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <main+0xac>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]


 // SEGGER_SYSVIEW_Conf();
//  SEGGER_SYSVIEW_Start();

  task1_status=xTaskCreate(task1_handler, "Task-1", 2000, "Hello world task 1", 1, &task1_handle);
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <main+0xb0>)
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2301      	movs	r3, #1
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <main+0xb4>)
 8000676:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800067a:	491e      	ldr	r1, [pc, #120]	; (80006f4 <main+0xb8>)
 800067c:	481e      	ldr	r0, [pc, #120]	; (80006f8 <main+0xbc>)
 800067e:	f001 fd29 	bl	80020d4 <xTaskCreate>
 8000682:	60f8      	str	r0, [r7, #12]
  configASSERT(task1_status == pdPASS);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d00a      	beq.n	80006a0 <main+0x64>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f3bf 8f6f 	isb	sy
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800069c:	bf00      	nop
 800069e:	e7fe      	b.n	800069e <main+0x62>
  next_task = task1_handle;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0xb0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <main+0xc0>)
 80006a6:	6013      	str	r3, [r2, #0]
  task2_status=xTaskCreate(task2_handler, "Task-2", 2000, "Hello world task 2", 2, &task2_handle);
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <main+0xc4>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2302      	movs	r3, #2
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <main+0xc8>)
 80006b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006b6:	4914      	ldr	r1, [pc, #80]	; (8000708 <main+0xcc>)
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <main+0xd0>)
 80006ba:	f001 fd0b 	bl	80020d4 <xTaskCreate>
 80006be:	60b8      	str	r0, [r7, #8]
  configASSERT(task2_status == pdPASS);
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d00a      	beq.n	80006dc <main+0xa0>
        __asm volatile
 80006c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ca:	f383 8811 	msr	BASEPRI, r3
 80006ce:	f3bf 8f6f 	isb	sy
 80006d2:	f3bf 8f4f 	dsb	sy
 80006d6:	603b      	str	r3, [r7, #0]
    }
 80006d8:	bf00      	nop
 80006da:	e7fe      	b.n	80006da <main+0x9e>

  //button_status=xTaskCreate(button_handler, "Button task", 2000, "Button handler running", 3, &button_handle);
  //configASSERT(button_status == pdPASS);


  vTaskStartScheduler();
 80006dc:	f001 ff08 	bl	80024f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0xa4>
 80006e2:	bf00      	nop
 80006e4:	e000edf0 	.word	0xe000edf0
 80006e8:	e0001000 	.word	0xe0001000
 80006ec:	20000030 	.word	0x20000030
 80006f0:	080051e4 	.word	0x080051e4
 80006f4:	080051f8 	.word	0x080051f8
 80006f8:	08000569 	.word	0x08000569
 80006fc:	20000038 	.word	0x20000038
 8000700:	20000034 	.word	0x20000034
 8000704:	08005200 	.word	0x08005200
 8000708:	08005214 	.word	0x08005214
 800070c:	080005c1 	.word	0x080005c1

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fd4c 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a27      	ldr	r2, [pc, #156]	; (80007dc <SystemClock_Config+0xcc>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <SystemClock_Config+0xd0>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000780:	2310      	movs	r3, #16
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fcc4 	bl	8001124 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007a2:	f000 f897 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ff25 	bl	8001614 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d0:	f000 f880 	bl	80008d4 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_GPIO_Init+0xc0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_GPIO_Init+0xc0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_GPIO_Init+0xc0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	21c0      	movs	r1, #192	; 0xc0
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_GPIO_Init+0xc4>)
 8000838:	f000 fc1c 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083c:	2308      	movs	r3, #8
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4817      	ldr	r0, [pc, #92]	; (80008ac <MX_GPIO_Init+0xc8>)
 8000850:	f000 fa74 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000854:	2310      	movs	r3, #16
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000858:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <MX_GPIO_Init+0xc8>)
 800086a:	f000 fa67 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800086e:	23c0      	movs	r3, #192	; 0xc0
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_GPIO_Init+0xc4>)
 8000886:	f000 fa59 	bl	8000d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2106      	movs	r1, #6
 800088e:	200a      	movs	r0, #10
 8000890:	f000 fa2a 	bl	8000ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000894:	200a      	movs	r0, #10
 8000896:	f000 fa43 	bl	8000d20 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 f939 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40001000 	.word	0x40001000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800091e:	f002 fc0b 	bl	8003138 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	; 0x38
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <HAL_InitTick+0xe4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a32      	ldr	r2, [pc, #200]	; (8000a14 <HAL_InitTick+0xe4>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <HAL_InitTick+0xe4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800095c:	f107 0210 	add.w	r2, r7, #16
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f820 	bl	80019ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000976:	f001 f805 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 800097a:	6378      	str	r0, [r7, #52]	; 0x34
 800097c:	e004      	b.n	8000988 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097e:	f001 f801 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8000982:	4603      	mov	r3, r0
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <HAL_InitTick+0xe8>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	0c9b      	lsrs	r3, r3, #18
 8000992:	3b01      	subs	r3, #1
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_InitTick+0xec>)
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <HAL_InitTick+0xf0>)
 800099a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <HAL_InitTick+0xec>)
 800099e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_InitTick+0xec>)
 80009a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_InitTick+0xec>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_InitTick+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_InitTick+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <HAL_InitTick+0xec>)
 80009be:	f001 f827 	bl	8001a10 <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d11b      	bne.n	8000a08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <HAL_InitTick+0xec>)
 80009d2:	f001 f877 	bl	8001ac4 <HAL_TIM_Base_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d111      	bne.n	8000a08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009e4:	2036      	movs	r0, #54	; 0x36
 80009e6:	f000 f99b 	bl	8000d20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d808      	bhi.n	8000a02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	2036      	movs	r0, #54	; 0x36
 80009f6:	f000 f977 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_InitTick+0xf4>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e002      	b.n	8000a08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3738      	adds	r7, #56	; 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	431bde83 	.word	0x431bde83
 8000a1c:	2000003c 	.word	0x2000003c
 8000a20:	40001000 	.word	0x40001000
 8000a24:	20000004 	.word	0x20000004

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f000 fb3f 	bl	80010dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  Button_interrupt_Handler();
 8000a5e:	f7ff fdd9 	bl	8000614 <Button_interrupt_Handler>

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM6_DAC_IRQHandler+0x10>)
 8000a6e:	f001 f899 	bl	8001ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000003c 	.word	0x2000003c

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa6:	490e      	ldr	r1, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000abc:	4c0b      	ldr	r4, [pc, #44]	; (8000aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ffd7 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f004 fb33 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fdb3 	bl	800063c <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ae4:	080052d0 	.word	0x080052d0
  ldr r2, =_sbss
 8000ae8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aec:	20013424 	.word	0x20013424

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f8d8 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f7ff ff04 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff feda 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000084 	.word	0x20000084

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000084 	.word	0x20000084

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff4c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff61 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff54 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e16b      	b.n	8001030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 815a 	bne.w	800102a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d130      	bne.n	8000df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80b4 	beq.w	800102a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b60      	ldr	r3, [pc, #384]	; (8001048 <HAL_GPIO_Init+0x30c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a5f      	ldr	r2, [pc, #380]	; (8001048 <HAL_GPIO_Init+0x30c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <HAL_GPIO_Init+0x30c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a5b      	ldr	r2, [pc, #364]	; (800104c <HAL_GPIO_Init+0x310>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a52      	ldr	r2, [pc, #328]	; (8001050 <HAL_GPIO_Init+0x314>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02b      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a51      	ldr	r2, [pc, #324]	; (8001054 <HAL_GPIO_Init+0x318>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d025      	beq.n	8000f5e <HAL_GPIO_Init+0x222>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a50      	ldr	r2, [pc, #320]	; (8001058 <HAL_GPIO_Init+0x31c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01f      	beq.n	8000f5a <HAL_GPIO_Init+0x21e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_GPIO_Init+0x320>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x21a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_GPIO_Init+0x324>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x216>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x328>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x212>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_GPIO_Init+0x32c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x20e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x330>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x20a>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e00e      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f46:	2308      	movs	r3, #8
 8000f48:	e00c      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	e00a      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_GPIO_Init+0x310>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa6:	4a32      	ldr	r2, [pc, #200]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd0:	4a27      	ldr	r2, [pc, #156]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_GPIO_Init+0x334>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <HAL_GPIO_Init+0x334>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f ae90 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40013c00 	.word	0x40013c00

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	041a      	lsls	r2, r3, #16
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	400b      	ands	r3, r1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f806 	bl	800110c <HAL_GPIO_EXTI_Callback>
  }
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e267      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d075      	beq.n	800122e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d00c      	beq.n	8001168 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001156:	2b08      	cmp	r3, #8
 8001158:	d112      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4b82      	ldr	r3, [pc, #520]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b7e      	ldr	r3, [pc, #504]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d05b      	beq.n	800122c <HAL_RCC_OscConfig+0x108>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d157      	bne.n	800122c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e242      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d106      	bne.n	8001198 <HAL_RCC_OscConfig+0x74>
 800118a:	4b76      	ldr	r3, [pc, #472]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a75      	ldr	r2, [pc, #468]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b70      	ldr	r3, [pc, #448]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6f      	ldr	r2, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b6d      	ldr	r3, [pc, #436]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6c      	ldr	r2, [pc, #432]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xb0>
 80011bc:	4b69      	ldr	r3, [pc, #420]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a68      	ldr	r2, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fcc0 	bl	8000b60 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcbc 	bl	8000b60 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e207      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b5b      	ldr	r3, [pc, #364]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xc0>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fcac 	bl	8000b60 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fca8 	bl	8000b60 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1f3      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0xe8>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1c7      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4937      	ldr	r1, [pc, #220]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCC_OscConfig+0x244>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fc61 	bl	8000b60 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fc5d 	bl	8000b60 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1a8      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4925      	ldr	r1, [pc, #148]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x244>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc40 	bl	8000b60 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc3c 	bl	8000b60 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e187      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d016      	beq.n	8001344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_RCC_OscConfig+0x248>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff fc20 	bl	8000b60 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fc1c 	bl	8000b60 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e167      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x240>)
 8001338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x200>
 8001342:	e01b      	b.n	800137c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_RCC_OscConfig+0x248>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc09 	bl	8000b60 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	e00e      	b.n	8001370 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fc05 	bl	8000b60 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d907      	bls.n	8001370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e150      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001364:	40023800 	.word	0x40023800
 8001368:	42470000 	.word	0x42470000
 800136c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ea      	bne.n	8001352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8097 	beq.w	80014b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138e:	4b81      	ldr	r3, [pc, #516]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b77      	ldr	r3, [pc, #476]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b74      	ldr	r3, [pc, #464]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a73      	ldr	r2, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fbc5 	bl	8000b60 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fbc1 	bl	8000b60 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e10c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x474>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x2ea>
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a63      	ldr	r2, [pc, #396]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x30c>
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x324>
 8001430:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d015      	beq.n	800147c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fb86 	bl	8000b60 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff fb82 	bl	8000b60 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0cb      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ee      	beq.n	8001458 <HAL_RCC_OscConfig+0x334>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fb70 	bl	8000b60 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fb6c 	bl	8000b60 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0b5      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149a:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ee      	bne.n	8001484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a38      	ldr	r2, [pc, #224]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a1 	beq.w	8001604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d05c      	beq.n	8001588 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d141      	bne.n	800155a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb40 	bl	8000b60 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fb3c 	bl	8000b60 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e087      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	491b      	ldr	r1, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x478>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb15 	bl	8000b60 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb11 	bl	8000b60 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e05c      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x416>
 8001558:	e054      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fafe 	bl	8000b60 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fafa 	bl	8000b60 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e045      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e038      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000
 800159c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x4ec>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d028      	beq.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11a      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d0:	4013      	ands	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d111      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fa2c 	bl	8000b60 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff fa28 	bl	8000b60 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f8b8 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08005288 	.word	0x08005288
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b090      	sub	sp, #64	; 0x40
 80017e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d00d      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x40>
 8001804:	2b08      	cmp	r3, #8
 8001806:	f200 80a1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x16c>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x34>
 800180e:	2b04      	cmp	r3, #4
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x3a>
 8001812:	e09b      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001818:	e09b      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800181e:	e098      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d028      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	2200      	movs	r2, #0
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	627a      	str	r2, [r7, #36]	; 0x24
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001848:	2100      	movs	r1, #0
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800184c:	fb03 f201 	mul.w	r2, r3, r1
 8001850:	2300      	movs	r3, #0
 8001852:	fb00 f303 	mul.w	r3, r0, r3
 8001856:	4413      	add	r3, r2
 8001858:	4a43      	ldr	r2, [pc, #268]	; (8001968 <HAL_RCC_GetSysClockFreq+0x188>)
 800185a:	fba0 1202 	umull	r1, r2, r0, r2
 800185e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001860:	460a      	mov	r2, r1
 8001862:	62ba      	str	r2, [r7, #40]	; 0x28
 8001864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001866:	4413      	add	r3, r2
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	2200      	movs	r2, #0
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	61fa      	str	r2, [r7, #28]
 8001872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800187a:	f7fe fcf3 	bl	8000264 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4613      	mov	r3, r2
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001886:	e053      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	2200      	movs	r2, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	617a      	str	r2, [r7, #20]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800189a:	f04f 0b00 	mov.w	fp, #0
 800189e:	4652      	mov	r2, sl
 80018a0:	465b      	mov	r3, fp
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0159      	lsls	r1, r3, #5
 80018ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b0:	0150      	lsls	r0, r2, #5
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ebb2 080a 	subs.w	r8, r2, sl
 80018ba:	eb63 090b 	sbc.w	r9, r3, fp
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018d2:	ebb2 0408 	subs.w	r4, r2, r8
 80018d6:	eb63 0509 	sbc.w	r5, r3, r9
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	00eb      	lsls	r3, r5, #3
 80018e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e8:	00e2      	lsls	r2, r4, #3
 80018ea:	4614      	mov	r4, r2
 80018ec:	461d      	mov	r5, r3
 80018ee:	eb14 030a 	adds.w	r3, r4, sl
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	eb45 030b 	adc.w	r3, r5, fp
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	2200      	movs	r2, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001924:	f7fe fc9e 	bl	8000264 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetSysClockFreq+0x184>)
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001954:	4618      	mov	r0, r3
 8001956:	3740      	adds	r7, #64	; 0x40
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	017d7840 	.word	0x017d7840

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08005298 	.word	0x08005298

080019ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	220f      	movs	r2, #15
 80019ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_GetClockConfig+0x5c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_RCC_GetClockConfig+0x5c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_GetClockConfig+0x5c>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_RCC_GetClockConfig+0x60>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0207 	and.w	r2, r3, #7
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e041      	b.n	8001aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f839 	bl	8001aae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f000 f9d8 	bl	8001e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d001      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e04e      	b.n	8001b7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d022      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x80>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b06:	d01d      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x80>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d018      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x80>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x80>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00e      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x80>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x80>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x80>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d111      	bne.n	8001b68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d010      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b66:	e007      	b.n	8001b78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800
 8001b94:	40000c00 	.word	0x40000c00
 8001b98:	40010400 	.word	0x40010400
 8001b9c:	40014000 	.word	0x40014000
 8001ba0:	40001800 	.word	0x40001800

08001ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d122      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d11b      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0202 	mvn.w	r2, #2
 8001bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8ee 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8e0 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8f1 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d122      	bne.n	8001c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d11b      	bne.n	8001c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0204 	mvn.w	r2, #4
 8001c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8c4 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8b6 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f8c7 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d122      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0208 	mvn.w	r2, #8
 8001c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f89a 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f88c 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f89d 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0210 	mvn.w	r2, #16
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f870 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f862 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f873 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d10e      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0201 	mvn.w	r2, #1
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fdc4 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	2b80      	cmp	r3, #128	; 0x80
 8001d34:	d10e      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d107      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f902 	bl	8001f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b40      	cmp	r3, #64	; 0x40
 8001d60:	d10e      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d107      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f838 	bl	8001df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d10e      	bne.n	8001dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d107      	bne.n	8001dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0220 	mvn.w	r2, #32
 8001da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8cc 	bl	8001f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a40      	ldr	r2, [pc, #256]	; (8001f18 <TIM_Base_SetConfig+0x114>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d013      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d00f      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3d      	ldr	r2, [pc, #244]	; (8001f1c <TIM_Base_SetConfig+0x118>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00b      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3c      	ldr	r2, [pc, #240]	; (8001f20 <TIM_Base_SetConfig+0x11c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <TIM_Base_SetConfig+0x120>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d003      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	; (8001f28 <TIM_Base_SetConfig+0x124>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d108      	bne.n	8001e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <TIM_Base_SetConfig+0x114>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02b      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e64:	d027      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a2c      	ldr	r2, [pc, #176]	; (8001f1c <TIM_Base_SetConfig+0x118>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d023      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <TIM_Base_SetConfig+0x11c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2a      	ldr	r2, [pc, #168]	; (8001f24 <TIM_Base_SetConfig+0x120>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01b      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a29      	ldr	r2, [pc, #164]	; (8001f28 <TIM_Base_SetConfig+0x124>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d017      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <TIM_Base_SetConfig+0x128>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <TIM_Base_SetConfig+0x12c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00f      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <TIM_Base_SetConfig+0x130>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00b      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <TIM_Base_SetConfig+0x134>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d007      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <TIM_Base_SetConfig+0x138>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d003      	beq.n	8001eb6 <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <TIM_Base_SetConfig+0x13c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d108      	bne.n	8001ec8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <TIM_Base_SetConfig+0x114>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d003      	beq.n	8001efc <TIM_Base_SetConfig+0xf8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <TIM_Base_SetConfig+0x124>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d103      	bne.n	8001f04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	615a      	str	r2, [r3, #20]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	40010400 	.word	0x40010400
 8001f2c:	40014000 	.word	0x40014000
 8001f30:	40014400 	.word	0x40014400
 8001f34:	40014800 	.word	0x40014800
 8001f38:	40001800 	.word	0x40001800
 8001f3c:	40001c00 	.word	0x40001c00
 8001f40:	40002000 	.word	0x40002000

08001f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0208 	add.w	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f103 0208 	add.w	r2, r3, #8
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0208 	add.w	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d103      	bne.n	800202e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e00c      	b.n	8002048 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3308      	adds	r3, #8
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e002      	b.n	800203c <vListInsert+0x2e>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	429a      	cmp	r2, r3
 8002046:	d2f6      	bcs.n	8002036 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6892      	ldr	r2, [r2, #8]
 8002096:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6852      	ldr	r2, [r2, #4]
 80020a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d103      	bne.n	80020b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af04      	add	r7, sp, #16
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f9cf 	bl	800348c <pvPortMalloc>
 80020ee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00e      	beq.n	8002114 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020f6:	2058      	movs	r0, #88	; 0x58
 80020f8:	f001 f9c8 	bl	800348c <pvPortMalloc>
 80020fc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
 800210a:	e005      	b.n	8002118 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800210c:	6978      	ldr	r0, [r7, #20]
 800210e:	f001 fa9d 	bl	800364c <vPortFree>
 8002112:	e001      	b.n	8002118 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d013      	beq.n	8002146 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	2300      	movs	r3, #0
 8002122:	9303      	str	r3, [sp, #12]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f80e 	bl	8002156 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800213a:	69f8      	ldr	r0, [r7, #28]
 800213c:	f000 f8a2 	bl	8002284 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002140:	2301      	movs	r3, #1
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e002      	b.n	800214c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800214c:	69bb      	ldr	r3, [r7, #24]
    }
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	461a      	mov	r2, r3
 800216e:	21a5      	movs	r1, #165	; 0xa5
 8002170:	f003 f824 	bl	80051bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800217e:	3b01      	subs	r3, #1
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f023 0307 	bic.w	r3, r3, #7
 800218c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <prvInitialiseNewTask+0x58>
        __asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	617b      	str	r3, [r7, #20]
    }
 80021aa:	bf00      	nop
 80021ac:	e7fe      	b.n	80021ac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01f      	beq.n	80021f4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	e012      	b.n	80021e0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4413      	add	r3, r2
 80021c0:	7819      	ldrb	r1, [r3, #0]
 80021c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	3334      	adds	r3, #52	; 0x34
 80021ca:	460a      	mov	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b09      	cmp	r3, #9
 80021e4:	d9e9      	bls.n	80021ba <prvInitialiseNewTask+0x64>
 80021e6:	e000      	b.n	80021ea <prvInitialiseNewTask+0x94>
            {
                break;
 80021e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021f2:	e003      	b.n	80021fc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d901      	bls.n	8002206 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002202:	2304      	movs	r3, #4
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002210:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	2200      	movs	r2, #0
 8002216:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	3304      	adds	r3, #4
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fec5 	bl	8001fac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	3318      	adds	r3, #24
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fec0 	bl	8001fac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002230:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	f1c3 0205 	rsb	r2, r3, #5
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	3350      	adds	r3, #80	; 0x50
 8002246:	2204      	movs	r2, #4
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f002 ffb6 	bl	80051bc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	3354      	adds	r3, #84	; 0x54
 8002254:	2201      	movs	r2, #1
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f002 ffaf 	bl	80051bc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	69b8      	ldr	r0, [r7, #24]
 8002264:	f000 fe3c 	bl	8002ee0 <pxPortInitialiseStack>
 8002268:	4602      	mov	r2, r0
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002278:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800227a:	bf00      	nop
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af02      	add	r7, sp, #8
 800228a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800228c:	f000 ffd2 	bl	8003234 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <prvAddNewTaskToReadyList+0xfc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <prvAddNewTaskToReadyList+0xfc>)
 8002298:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <prvAddNewTaskToReadyList+0x100>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022a2:	4a38      	ldr	r2, [pc, #224]	; (8002384 <prvAddNewTaskToReadyList+0x100>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022a8:	4b35      	ldr	r3, [pc, #212]	; (8002380 <prvAddNewTaskToReadyList+0xfc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d110      	bne.n	80022d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022b0:	f000 fb66 	bl	8002980 <prvInitialiseTaskLists>
 80022b4:	e00d      	b.n	80022d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <prvAddNewTaskToReadyList+0x104>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <prvAddNewTaskToReadyList+0x100>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d802      	bhi.n	80022d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022cc:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <prvAddNewTaskToReadyList+0x100>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <prvAddNewTaskToReadyList+0x108>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3301      	adds	r3, #1
 80022d8:	4a2c      	ldr	r2, [pc, #176]	; (800238c <prvAddNewTaskToReadyList+0x108>)
 80022da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <prvAddNewTaskToReadyList+0x108>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <prvAddNewTaskToReadyList+0x94>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 fcab 	bl	8004c48 <SEGGER_SYSVIEW_OnTaskCreate>
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	461d      	mov	r5, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461c      	mov	r4, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	1ae3      	subs	r3, r4, r3
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	462b      	mov	r3, r5
 8002314:	f001 fab8 	bl	8003888 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fd18 	bl	8004d50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	2201      	movs	r2, #1
 8002326:	409a      	lsls	r2, r3
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <prvAddNewTaskToReadyList+0x10c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4313      	orrs	r3, r2
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <prvAddNewTaskToReadyList+0x10c>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <prvAddNewTaskToReadyList+0x110>)
 8002340:	441a      	add	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7ff fe3c 	bl	8001fc6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800234e:	f000 ffa1 	bl	8003294 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <prvAddNewTaskToReadyList+0x104>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <prvAddNewTaskToReadyList+0x100>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <prvAddNewTaskToReadyList+0x114>)
 800236a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bdb0      	pop	{r4, r5, r7, pc}
 8002380:	20000160 	.word	0x20000160
 8002384:	20000088 	.word	0x20000088
 8002388:	2000016c 	.word	0x2000016c
 800238c:	2000017c 	.word	0x2000017c
 8002390:	20000168 	.word	0x20000168
 8002394:	2000008c 	.word	0x2000008c
 8002398:	e000ed04 	.word	0xe000ed04

0800239c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80023a4:	f000 ff46 	bl	8003234 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <vTaskDelete+0x18>
 80023ae:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <vTaskDelete+0x12c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e000      	b.n	80023b6 <vTaskDelete+0x1a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fe5f 	bl	8002080 <uxListRemove>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d115      	bne.n	80023f4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	493f      	ldr	r1, [pc, #252]	; (80024cc <vTaskDelete+0x130>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <vTaskDelete+0x58>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	2201      	movs	r2, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43da      	mvns	r2, r3
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <vTaskDelete+0x134>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4013      	ands	r3, r2
 80023f0:	4a37      	ldr	r2, [pc, #220]	; (80024d0 <vTaskDelete+0x134>)
 80023f2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3318      	adds	r3, #24
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fe3d 	bl	8002080 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002406:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <vTaskDelete+0x138>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <vTaskDelete+0x138>)
 800240e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <vTaskDelete+0x12c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	429a      	cmp	r2, r3
 8002418:	d118      	bne.n	800244c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	4619      	mov	r1, r3
 8002420:	482d      	ldr	r0, [pc, #180]	; (80024d8 <vTaskDelete+0x13c>)
 8002422:	f7ff fdd0 	bl	8001fc6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <vTaskDelete+0x140>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <vTaskDelete+0x140>)
 800242e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fd2e 	bl	8004e94 <SEGGER_SYSVIEW_ShrinkId>
 8002438:	4603      	mov	r3, r0
 800243a:	4619      	mov	r1, r3
 800243c:	2022      	movs	r0, #34	; 0x22
 800243e:	f001 fef3 	bl	8004228 <SEGGER_SYSVIEW_RecordU32>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4618      	mov	r0, r3
 8002446:	f001 fa87 	bl	8003958 <SYSVIEW_DeleteTask>
 800244a:	e016      	b.n	800247a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <vTaskDelete+0x144>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <vTaskDelete+0x144>)
 8002454:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fd1b 	bl	8004e94 <SEGGER_SYSVIEW_ShrinkId>
 800245e:	4603      	mov	r3, r0
 8002460:	4619      	mov	r1, r3
 8002462:	2022      	movs	r0, #34	; 0x22
 8002464:	f001 fee0 	bl	8004228 <SEGGER_SYSVIEW_RecordU32>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4618      	mov	r0, r3
 800246c:	f001 fa74 	bl	8003958 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 faf3 	bl	8002a5c <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002476:	f000 fb01 	bl	8002a7c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800247a:	f000 ff0b 	bl	8003294 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <vTaskDelete+0x148>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01b      	beq.n	80024be <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <vTaskDelete+0x12c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d116      	bne.n	80024be <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <vTaskDelete+0x14c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <vTaskDelete+0x112>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	60bb      	str	r3, [r7, #8]
    }
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <vTaskDelete+0x150>)
 80024b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000088 	.word	0x20000088
 80024cc:	2000008c 	.word	0x2000008c
 80024d0:	20000168 	.word	0x20000168
 80024d4:	2000017c 	.word	0x2000017c
 80024d8:	20000134 	.word	0x20000134
 80024dc:	20000148 	.word	0x20000148
 80024e0:	20000160 	.word	0x20000160
 80024e4:	2000016c 	.word	0x2000016c
 80024e8:	20000188 	.word	0x20000188
 80024ec:	e000ed04 	.word	0xe000ed04

080024f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <vTaskStartScheduler+0x98>)
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	2282      	movs	r2, #130	; 0x82
 8002502:	4922      	ldr	r1, [pc, #136]	; (800258c <vTaskStartScheduler+0x9c>)
 8002504:	4822      	ldr	r0, [pc, #136]	; (8002590 <vTaskStartScheduler+0xa0>)
 8002506:	f7ff fde5 	bl	80020d4 <xTaskCreate>
 800250a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d124      	bne.n	800255c <vTaskStartScheduler+0x6c>
        __asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	60bb      	str	r3, [r7, #8]
    }
 8002524:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <vTaskStartScheduler+0xa4>)
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <vTaskStartScheduler+0xa8>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <vTaskStartScheduler+0xac>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <vTaskStartScheduler+0xb0>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <vTaskStartScheduler+0x98>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d102      	bne.n	800254c <vTaskStartScheduler+0x5c>
 8002546:	f002 fb63 	bl	8004c10 <SEGGER_SYSVIEW_OnIdle>
 800254a:	e004      	b.n	8002556 <vTaskStartScheduler+0x66>
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <vTaskStartScheduler+0xb0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fbbb 	bl	8004ccc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002556:	f000 fd4d 	bl	8002ff4 <xPortStartScheduler>
 800255a:	e00e      	b.n	800257a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002562:	d10a      	bne.n	800257a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	607b      	str	r3, [r7, #4]
    }
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <vTaskStartScheduler+0xb4>)
 800257c:	681b      	ldr	r3, [r3, #0]
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000184 	.word	0x20000184
 800258c:	0800521c 	.word	0x0800521c
 8002590:	08002951 	.word	0x08002951
 8002594:	20000180 	.word	0x20000180
 8002598:	2000016c 	.word	0x2000016c
 800259c:	20000164 	.word	0x20000164
 80025a0:	20000088 	.word	0x20000088
 80025a4:	2000000c 	.word	0x2000000c

080025a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <vTaskSuspendAll+0x18>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	4a03      	ldr	r2, [pc, #12]	; (80025c0 <vTaskSuspendAll+0x18>)
 80025b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	20000188 	.word	0x20000188

080025c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <xTaskResumeAll+0x11c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	603b      	str	r3, [r7, #0]
    }
 80025ec:	bf00      	nop
 80025ee:	e7fe      	b.n	80025ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025f0:	f000 fe20 	bl	8003234 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025f4:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <xTaskResumeAll+0x11c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <xTaskResumeAll+0x11c>)
 80025fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <xTaskResumeAll+0x11c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d165      	bne.n	80026d2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <xTaskResumeAll+0x120>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d061      	beq.n	80026d2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800260e:	e032      	b.n	8002676 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002610:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <xTaskResumeAll+0x124>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3318      	adds	r3, #24
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fd2f 	bl	8002080 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3304      	adds	r3, #4
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fd2a 	bl	8002080 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fb8e 	bl	8004d50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2201      	movs	r2, #1
 800263a:	409a      	lsls	r2, r3
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <xTaskResumeAll+0x128>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4313      	orrs	r3, r2
 8002642:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <xTaskResumeAll+0x128>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <xTaskResumeAll+0x12c>)
 8002654:	441a      	add	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7ff fcb2 	bl	8001fc6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <xTaskResumeAll+0x130>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <xTaskResumeAll+0x134>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <xTaskResumeAll+0x124>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1c8      	bne.n	8002610 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002684:	f000 f9fa 	bl	8002a7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <xTaskResumeAll+0x138>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d010      	beq.n	80026b6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002694:	f000 f836 	bl	8002704 <xTaskIncrementTick>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <xTaskResumeAll+0x134>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f1      	bne.n	8002694 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <xTaskResumeAll+0x138>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <xTaskResumeAll+0x134>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80026be:	2301      	movs	r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <xTaskResumeAll+0x13c>)
 80026c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026d2:	f000 fddf 	bl	8003294 <vPortExitCritical>

    return xAlreadyYielded;
 80026d6:	68bb      	ldr	r3, [r7, #8]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000188 	.word	0x20000188
 80026e4:	20000160 	.word	0x20000160
 80026e8:	20000120 	.word	0x20000120
 80026ec:	20000168 	.word	0x20000168
 80026f0:	2000008c 	.word	0x2000008c
 80026f4:	20000088 	.word	0x20000088
 80026f8:	20000174 	.word	0x20000174
 80026fc:	20000170 	.word	0x20000170
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800270e:	4b50      	ldr	r3, [pc, #320]	; (8002850 <xTaskIncrementTick+0x14c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 8092 	bne.w	800283c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002718:	4b4e      	ldr	r3, [pc, #312]	; (8002854 <xTaskIncrementTick+0x150>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002720:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <xTaskIncrementTick+0x150>)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d120      	bne.n	800276e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <xTaskIncrementTick+0x154>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <xTaskIncrementTick+0x48>
        __asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	603b      	str	r3, [r7, #0]
    }
 8002748:	bf00      	nop
 800274a:	e7fe      	b.n	800274a <xTaskIncrementTick+0x46>
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <xTaskIncrementTick+0x154>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b42      	ldr	r3, [pc, #264]	; (800285c <xTaskIncrementTick+0x158>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a40      	ldr	r2, [pc, #256]	; (8002858 <xTaskIncrementTick+0x154>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4a40      	ldr	r2, [pc, #256]	; (800285c <xTaskIncrementTick+0x158>)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <xTaskIncrementTick+0x15c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <xTaskIncrementTick+0x15c>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	f000 f987 	bl	8002a7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <xTaskIncrementTick+0x160>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d34c      	bcc.n	8002812 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <xTaskIncrementTick+0x154>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d104      	bne.n	800278c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <xTaskIncrementTick+0x160>)
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	601a      	str	r2, [r3, #0]
                    break;
 800278a:	e042      	b.n	8002812 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800278c:	4b32      	ldr	r3, [pc, #200]	; (8002858 <xTaskIncrementTick+0x154>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d203      	bcs.n	80027ac <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027a4:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <xTaskIncrementTick+0x160>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80027aa:	e032      	b.n	8002812 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fc65 	bl	8002080 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3318      	adds	r3, #24
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fc5c 	bl	8002080 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fac0 	bl	8004d50 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	2201      	movs	r2, #1
 80027d6:	409a      	lsls	r2, r3
 80027d8:	4b23      	ldr	r3, [pc, #140]	; (8002868 <xTaskIncrementTick+0x164>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <xTaskIncrementTick+0x164>)
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <xTaskIncrementTick+0x168>)
 80027f0:	441a      	add	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3304      	adds	r3, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7ff fbe4 	bl	8001fc6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <xTaskIncrementTick+0x16c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	429a      	cmp	r2, r3
 800280a:	d3b5      	bcc.n	8002778 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800280c:	2301      	movs	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002810:	e7b2      	b.n	8002778 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <xTaskIncrementTick+0x16c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	4914      	ldr	r1, [pc, #80]	; (800286c <xTaskIncrementTick+0x168>)
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d901      	bls.n	800282e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800282a:	2301      	movs	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <xTaskIncrementTick+0x170>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002836:	2301      	movs	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e004      	b.n	8002846 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <xTaskIncrementTick+0x174>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <xTaskIncrementTick+0x174>)
 8002844:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002846:	697b      	ldr	r3, [r7, #20]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000188 	.word	0x20000188
 8002854:	20000164 	.word	0x20000164
 8002858:	20000118 	.word	0x20000118
 800285c:	2000011c 	.word	0x2000011c
 8002860:	20000178 	.word	0x20000178
 8002864:	20000180 	.word	0x20000180
 8002868:	20000168 	.word	0x20000168
 800286c:	2000008c 	.word	0x2000008c
 8002870:	20000088 	.word	0x20000088
 8002874:	20000174 	.word	0x20000174
 8002878:	20000170 	.word	0x20000170

0800287c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <vTaskSwitchContext+0xbc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <vTaskSwitchContext+0xc0>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002890:	e04d      	b.n	800292e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <vTaskSwitchContext+0xc0>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <vTaskSwitchContext+0xc4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80028a6:	7afb      	ldrb	r3, [r7, #11]
 80028a8:	f1c3 031f 	rsb	r3, r3, #31
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	4925      	ldr	r1, [pc, #148]	; (8002944 <vTaskSwitchContext+0xc8>)
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	607b      	str	r3, [r7, #4]
    }
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <vTaskSwitchContext+0x5a>
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <vTaskSwitchContext+0xc8>)
 80028e4:	4413      	add	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	3308      	adds	r3, #8
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d104      	bne.n	8002908 <vTaskSwitchContext+0x8c>
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <vTaskSwitchContext+0xcc>)
 8002910:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <vTaskSwitchContext+0xcc>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <vTaskSwitchContext+0xd0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d102      	bne.n	8002924 <vTaskSwitchContext+0xa8>
 800291e:	f002 f977 	bl	8004c10 <SEGGER_SYSVIEW_OnIdle>
}
 8002922:	e004      	b.n	800292e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <vTaskSwitchContext+0xcc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f002 f9cf 	bl	8004ccc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000188 	.word	0x20000188
 800293c:	20000174 	.word	0x20000174
 8002940:	20000168 	.word	0x20000168
 8002944:	2000008c 	.word	0x2000008c
 8002948:	20000088 	.word	0x20000088
 800294c:	20000184 	.word	0x20000184

08002950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002958:	f000 f852 	bl	8002a00 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <prvIdleTask+0x28>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d9f9      	bls.n	8002958 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <prvIdleTask+0x2c>)
 8002966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002974:	e7f0      	b.n	8002958 <prvIdleTask+0x8>
 8002976:	bf00      	nop
 8002978:	2000008c 	.word	0x2000008c
 800297c:	e000ed04 	.word	0xe000ed04

08002980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	e00c      	b.n	80029a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <prvInitialiseTaskLists+0x60>)
 8002998:	4413      	add	r3, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fae6 	bl	8001f6c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3301      	adds	r3, #1
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d9ef      	bls.n	800298c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029ac:	480d      	ldr	r0, [pc, #52]	; (80029e4 <prvInitialiseTaskLists+0x64>)
 80029ae:	f7ff fadd 	bl	8001f6c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029b2:	480d      	ldr	r0, [pc, #52]	; (80029e8 <prvInitialiseTaskLists+0x68>)
 80029b4:	f7ff fada 	bl	8001f6c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029b8:	480c      	ldr	r0, [pc, #48]	; (80029ec <prvInitialiseTaskLists+0x6c>)
 80029ba:	f7ff fad7 	bl	8001f6c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80029be:	480c      	ldr	r0, [pc, #48]	; (80029f0 <prvInitialiseTaskLists+0x70>)
 80029c0:	f7ff fad4 	bl	8001f6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80029c4:	480b      	ldr	r0, [pc, #44]	; (80029f4 <prvInitialiseTaskLists+0x74>)
 80029c6:	f7ff fad1 	bl	8001f6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <prvInitialiseTaskLists+0x78>)
 80029cc:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <prvInitialiseTaskLists+0x64>)
 80029ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <prvInitialiseTaskLists+0x7c>)
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <prvInitialiseTaskLists+0x68>)
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000008c 	.word	0x2000008c
 80029e4:	200000f0 	.word	0x200000f0
 80029e8:	20000104 	.word	0x20000104
 80029ec:	20000120 	.word	0x20000120
 80029f0:	20000134 	.word	0x20000134
 80029f4:	2000014c 	.word	0x2000014c
 80029f8:	20000118 	.word	0x20000118
 80029fc:	2000011c 	.word	0x2000011c

08002a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a06:	e019      	b.n	8002a3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a08:	f000 fc14 	bl	8003234 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <prvCheckTasksWaitingTermination+0x50>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fb31 	bl	8002080 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <prvCheckTasksWaitingTermination+0x54>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <prvCheckTasksWaitingTermination+0x54>)
 8002a26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <prvCheckTasksWaitingTermination+0x58>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <prvCheckTasksWaitingTermination+0x58>)
 8002a30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a32:	f000 fc2f 	bl	8003294 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f810 	bl	8002a5c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <prvCheckTasksWaitingTermination+0x58>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e1      	bne.n	8002a08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000134 	.word	0x20000134
 8002a54:	20000160 	.word	0x20000160
 8002a58:	20000148 	.word	0x20000148

08002a5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fdef 	bl	800364c <vPortFree>
                vPortFree( pxTCB );
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fdec 	bl	800364c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <prvResetNextTaskUnblockTime+0x30>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <prvResetNextTaskUnblockTime+0x34>)
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a92:	e005      	b.n	8002aa0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <prvResetNextTaskUnblockTime+0x30>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <prvResetNextTaskUnblockTime+0x34>)
 8002a9e:	6013      	str	r3, [r2, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000118 	.word	0x20000118
 8002ab0:	20000180 	.word	0x20000180

08002ab4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	613b      	str	r3, [r7, #16]
    }
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002ade:	f000 fba9 	bl	8003234 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <xTaskGenericNotifyWait+0x108>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4413      	add	r3, r2
 8002aea:	3354      	adds	r3, #84	; 0x54
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d022      	beq.n	8002b3a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <xTaskGenericNotifyWait+0x108>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	3214      	adds	r2, #20
 8002afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	43d2      	mvns	r2, r2
 8002b04:	4011      	ands	r1, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	3214      	adds	r2, #20
 8002b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <xTaskGenericNotifyWait+0x108>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	3354      	adds	r3, #84	; 0x54
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b22:	2101      	movs	r1, #1
 8002b24:	6a38      	ldr	r0, [r7, #32]
 8002b26:	f000 f963 	bl	8002df0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <xTaskGenericNotifyWait+0x10c>)
 8002b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b3a:	f000 fbab 	bl	8003294 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002b3e:	f000 fb79 	bl	8003234 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	2040      	movs	r0, #64	; 0x40
 8002b50:	f001 fc00 	bl	8004354 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <xTaskGenericNotifyWait+0x108>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	3214      	adds	r2, #20
 8002b62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <xTaskGenericNotifyWait+0x108>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4413      	add	r3, r2
 8002b72:	3354      	adds	r3, #84	; 0x54
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d002      	beq.n	8002b82 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e00e      	b.n	8002ba0 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <xTaskGenericNotifyWait+0x108>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	3214      	adds	r2, #20
 8002b8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	43d2      	mvns	r2, r2
 8002b92:	4011      	ands	r1, r2
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	3214      	adds	r2, #20
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <xTaskGenericNotifyWait+0x108>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3354      	adds	r3, #84	; 0x54
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002bae:	f000 fb71 	bl	8003294 <vPortExitCritical>

        return xReturn;
 8002bb2:	697b      	ldr	r3, [r7, #20]
    }
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000088 	.word	0x20000088
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b092      	sub	sp, #72	; 0x48
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c0e:	f000 fbfd 	bl	800340c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002c16:	f3ef 8211 	mrs	r2, BASEPRI
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c2c:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	3214      	adds	r2, #20
 8002c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c44:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3354      	adds	r3, #84	; 0x54
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	3354      	adds	r3, #84	; 0x54
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d83b      	bhi.n	8002cde <xTaskGenericNotifyFromISR+0x11a>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <xTaskGenericNotifyFromISR+0xa8>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002cfd 	.word	0x08002cfd
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c9d 	.word	0x08002c9d
 8002c78:	08002cb5 	.word	0x08002cb5
 8002c7c:	08002cc3 	.word	0x08002cc3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	3214      	adds	r2, #20
 8002c86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	3214      	adds	r2, #20
 8002c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002c9a:	e032      	b.n	8002d02 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	3214      	adds	r2, #20
 8002ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca6:	1c59      	adds	r1, r3, #1
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	3214      	adds	r2, #20
 8002cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cb2:	e026      	b.n	8002d02 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	3214      	adds	r2, #20
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cc0:	e01f      	b.n	8002d02 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d006      	beq.n	8002cd8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	3214      	adds	r2, #20
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002cd6:	e014      	b.n	8002d02 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002cdc:	e011      	b.n	8002d02 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <xTaskGenericNotifyFromISR+0x210>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	61fb      	str	r3, [r7, #28]
    }
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8002d00:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 f8c5 	bl	8004e94 <SEGGER_SYSVIEW_ShrinkId>
 8002d0a:	78f9      	ldrb	r1, [r7, #3]
 8002d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d10:	9201      	str	r2, [sp, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4601      	mov	r1, r0
 8002d1a:	203f      	movs	r0, #63	; 0x3f
 8002d1c:	f001 fbac 	bl	8004478 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002d20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d149      	bne.n	8002dbc <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	61bb      	str	r3, [r7, #24]
    }
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <xTaskGenericNotifyFromISR+0x214>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d120      	bne.n	8002d90 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	3304      	adds	r3, #4
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f994 	bl	8002080 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fff8 	bl	8004d50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2201      	movs	r2, #1
 8002d66:	409a      	lsls	r2, r3
 8002d68:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <xTaskGenericNotifyFromISR+0x218>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <xTaskGenericNotifyFromISR+0x218>)
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <xTaskGenericNotifyFromISR+0x21c>)
 8002d80:	441a      	add	r2, r3
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	3304      	adds	r3, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7ff f91c 	bl	8001fc6 <vListInsertEnd>
 8002d8e:	e005      	b.n	8002d9c <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	3318      	adds	r3, #24
 8002d94:	4619      	mov	r1, r3
 8002d96:	4813      	ldr	r0, [pc, #76]	; (8002de4 <xTaskGenericNotifyFromISR+0x220>)
 8002d98:	f7ff f915 	bl	8001fc6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <xTaskGenericNotifyFromISR+0x224>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d908      	bls.n	8002dbc <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <xTaskGenericNotifyFromISR+0x228>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbe:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002dc6:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3740      	adds	r7, #64	; 0x40
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000164 	.word	0x20000164
 8002dd8:	20000188 	.word	0x20000188
 8002ddc:	20000168 	.word	0x20000168
 8002de0:	2000008c 	.word	0x2000008c
 8002de4:	20000120 	.word	0x20000120
 8002de8:	20000088 	.word	0x20000088
 8002dec:	20000174 	.word	0x20000174

08002df0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002dfa:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3304      	adds	r3, #4
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f93a 	bl	8002080 <uxListRemove>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	2201      	movs	r2, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4013      	ands	r3, r2
 8002e26:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e28:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d110      	bne.n	8002e54 <prvAddCurrentTaskToDelayedList+0x64>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	211b      	movs	r1, #27
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 ffc8 	bl	8004dd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4820      	ldr	r0, [pc, #128]	; (8002ed0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002e4e:	f7ff f8ba 	bl	8001fc6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e52:	e032      	b.n	8002eba <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d20f      	bcs.n	8002e8c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2104      	movs	r1, #4
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 ffae 	bl	8004dd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7ff f8c2 	bl	800200e <vListInsert>
}
 8002e8a:	e016      	b.n	8002eba <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2104      	movs	r1, #4
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 ff9e 	bl	8004dd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7ff f8b2 	bl	800200e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <prvAddCurrentTaskToDelayedList+0xec>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d202      	bcs.n	8002eba <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002eb4:	4a09      	ldr	r2, [pc, #36]	; (8002edc <prvAddCurrentTaskToDelayedList+0xec>)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6013      	str	r3, [r2, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000164 	.word	0x20000164
 8002ec8:	20000088 	.word	0x20000088
 8002ecc:	20000168 	.word	0x20000168
 8002ed0:	2000014c 	.word	0x2000014c
 8002ed4:	2000011c 	.word	0x2000011c
 8002ed8:	20000118 	.word	0x20000118
 8002edc:	20000180 	.word	0x20000180

08002ee0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3b04      	subs	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b04      	subs	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f10:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <pxPortInitialiseStack+0x64>)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b14      	subs	r3, #20
 8002f1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3b04      	subs	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f06f 0202 	mvn.w	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3b20      	subs	r3, #32
 8002f34:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f36:	68fb      	ldr	r3, [r7, #12]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	08002f49 	.word	0x08002f49

08002f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <prvTaskExitError+0x54>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d00a      	beq.n	8002f72 <prvTaskExitError+0x2a>
        __asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	60fb      	str	r3, [r7, #12]
    }
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <prvTaskExitError+0x28>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60bb      	str	r3, [r7, #8]
    }
 8002f84:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f86:	bf00      	nop
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0fc      	beq.n	8002f88 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	20000010 	.word	0x20000010

08002fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <pxCurrentTCBConst2>)
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002faa:	f380 8809 	msr	PSP, r0
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f380 8811 	msr	BASEPRI, r0
 8002fba:	4770      	bx	lr
 8002fbc:	f3af 8000 	nop.w

08002fc0 <pxCurrentTCBConst2>:
 8002fc0:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop

08002fc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <prvPortStartFirstTask+0x24>)
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	6800      	ldr	r0, [r0, #0]
 8002fce:	f380 8808 	msr	MSP, r0
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f380 8814 	msr	CONTROL, r0
 8002fda:	b662      	cpsie	i
 8002fdc:	b661      	cpsie	f
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	df00      	svc	0
 8002fe8:	bf00      	nop
 8002fea:	0000      	.short	0x0000
 8002fec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop

08002ff4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <xPortStartScheduler+0x120>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a46      	ldr	r2, [pc, #280]	; (8003118 <xPortStartScheduler+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10a      	bne.n	800301a <xPortStartScheduler+0x26>
        __asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	613b      	str	r3, [r7, #16]
    }
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800301a:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <xPortStartScheduler+0x120>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3f      	ldr	r2, [pc, #252]	; (800311c <xPortStartScheduler+0x128>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10a      	bne.n	800303a <xPortStartScheduler+0x46>
        __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
    }
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <xPortStartScheduler+0x12c>)
 800303c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <xPortStartScheduler+0x130>)
 8003060:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003062:	4b31      	ldr	r3, [pc, #196]	; (8003128 <xPortStartScheduler+0x134>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003068:	e009      	b.n	800307e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <xPortStartScheduler+0x134>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3b01      	subs	r3, #1
 8003070:	4a2d      	ldr	r2, [pc, #180]	; (8003128 <xPortStartScheduler+0x134>)
 8003072:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d0ef      	beq.n	800306a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <xPortStartScheduler+0x134>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	d00a      	beq.n	80030ac <xPortStartScheduler+0xb8>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60bb      	str	r3, [r7, #8]
    }
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030ac:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <xPortStartScheduler+0x134>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <xPortStartScheduler+0x134>)
 80030b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <xPortStartScheduler+0x134>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <xPortStartScheduler+0x134>)
 80030c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <xPortStartScheduler+0x138>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <xPortStartScheduler+0x138>)
 80030d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <xPortStartScheduler+0x138>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a14      	ldr	r2, [pc, #80]	; (800312c <xPortStartScheduler+0x138>)
 80030dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030e2:	f000 f963 	bl	80033ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <xPortStartScheduler+0x13c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80030ec:	f000 f982 	bl	80033f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <xPortStartScheduler+0x140>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <xPortStartScheduler+0x140>)
 80030f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80030fc:	f7ff ff64 	bl	8002fc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003100:	f7ff fbbc 	bl	800287c <vTaskSwitchContext>
    prvTaskExitError();
 8003104:	f7ff ff20 	bl	8002f48 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000ed00 	.word	0xe000ed00
 8003118:	410fc271 	.word	0x410fc271
 800311c:	410fc270 	.word	0x410fc270
 8003120:	e000e400 	.word	0xe000e400
 8003124:	2000018c 	.word	0x2000018c
 8003128:	20000190 	.word	0x20000190
 800312c:	e000ed20 	.word	0xe000ed20
 8003130:	20000010 	.word	0x20000010
 8003134:	e000ef34 	.word	0xe000ef34

08003138 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <vInitPrioGroupValue+0xe4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a37      	ldr	r2, [pc, #220]	; (8003220 <vInitPrioGroupValue+0xe8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10a      	bne.n	800315e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	613b      	str	r3, [r7, #16]
    }
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800315e:	4b2f      	ldr	r3, [pc, #188]	; (800321c <vInitPrioGroupValue+0xe4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a30      	ldr	r2, [pc, #192]	; (8003224 <vInitPrioGroupValue+0xec>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10a      	bne.n	800317e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	60fb      	str	r3, [r7, #12]
    }
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800317e:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <vInitPrioGroupValue+0xf0>)
 8003180:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <vInitPrioGroupValue+0xf4>)
 80031a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031ac:	e009      	b.n	80031c2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d0ef      	beq.n	80031ae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d00a      	beq.n	80031f0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	60bb      	str	r3, [r7, #8]
    }
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <vInitPrioGroupValue+0xf8>)
 8003204:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	410fc271 	.word	0x410fc271
 8003224:	410fc270 	.word	0x410fc270
 8003228:	e000e400 	.word	0xe000e400
 800322c:	2000018c 	.word	0x2000018c
 8003230:	20000190 	.word	0x20000190

08003234 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
        __asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	607b      	str	r3, [r7, #4]
    }
 800324c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <vPortEnterCritical+0x58>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <vPortEnterCritical+0x58>)
 8003256:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <vPortEnterCritical+0x58>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10f      	bne.n	8003280 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <vPortEnterCritical+0x5c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <vPortEnterCritical+0x4c>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	603b      	str	r3, [r7, #0]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <vPortEnterCritical+0x4a>
    }
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20000010 	.word	0x20000010
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <vPortExitCritical+0x50>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <vPortExitCritical+0x24>
        __asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	607b      	str	r3, [r7, #4]
    }
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <vPortExitCritical+0x50>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3b01      	subs	r3, #1
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <vPortExitCritical+0x50>)
 80032c0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <vPortExitCritical+0x50>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <vPortExitCritical+0x42>
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f383 8811 	msr	BASEPRI, r3
    }
 80032d4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000010 	.word	0x20000010
	...

080032f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032f0:	f3ef 8009 	mrs	r0, PSP
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <pxCurrentTCBConst>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	f01e 0f10 	tst.w	lr, #16
 8003300:	bf08      	it	eq
 8003302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330a:	6010      	str	r0, [r2, #0]
 800330c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003314:	f380 8811 	msr	BASEPRI, r0
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f7ff faac 	bl	800287c <vTaskSwitchContext>
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f380 8811 	msr	BASEPRI, r0
 800332c:	bc09      	pop	{r0, r3}
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6808      	ldr	r0, [r1, #0]
 8003332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003336:	f01e 0f10 	tst.w	lr, #16
 800333a:	bf08      	it	eq
 800333c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003340:	f380 8809 	msr	PSP, r0
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	f3af 8000 	nop.w

08003350 <pxCurrentTCBConst>:
 8003350:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop

08003358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
        __asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
    }
 8003370:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003372:	f001 fbd3 	bl	8004b1c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003376:	f7ff f9c5 	bl	8002704 <xTaskIncrementTick>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003380:	f001 fc2a 	bl	8004bd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <SysTick_Handler+0x50>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e001      	b.n	8003392 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800338e:	f001 fc07 	bl	8004ba0 <SEGGER_SYSVIEW_RecordExitISR>
 8003392:	2300      	movs	r3, #0
 8003394:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f383 8811 	msr	BASEPRI, r3
    }
 800339c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000ed04 	.word	0xe000ed04

080033ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <vPortSetupTimerInterrupt+0x34>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <vPortSetupTimerInterrupt+0x38>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <vPortSetupTimerInterrupt+0x3c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <vPortSetupTimerInterrupt+0x40>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <vPortSetupTimerInterrupt+0x44>)
 80033ca:	3b01      	subs	r3, #1
 80033cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <vPortSetupTimerInterrupt+0x34>)
 80033d0:	2207      	movs	r2, #7
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e010 	.word	0xe000e010
 80033e4:	e000e018 	.word	0xe000e018
 80033e8:	20000000 	.word	0x20000000
 80033ec:	10624dd3 	.word	0x10624dd3
 80033f0:	e000e014 	.word	0xe000e014

080033f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80033f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003404 <vPortEnableVFP+0x10>
 80033f8:	6801      	ldr	r1, [r0, #0]
 80033fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033fe:	6001      	str	r1, [r0, #0]
 8003400:	4770      	bx	lr
 8003402:	0000      	.short	0x0000
 8003404:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop

0800340c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003412:	f3ef 8305 	mrs	r3, IPSR
 8003416:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d914      	bls.n	8003448 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800341e:	4a17      	ldr	r2, [pc, #92]	; (800347c <vPortValidateInterruptPriority+0x70>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003428:	4b15      	ldr	r3, [pc, #84]	; (8003480 <vPortValidateInterruptPriority+0x74>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	7afa      	ldrb	r2, [r7, #11]
 800342e:	429a      	cmp	r2, r3
 8003430:	d20a      	bcs.n	8003448 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	607b      	str	r3, [r7, #4]
    }
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <vPortValidateInterruptPriority+0x78>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <vPortValidateInterruptPriority+0x7c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d90a      	bls.n	800346e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	603b      	str	r3, [r7, #0]
    }
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <vPortValidateInterruptPriority+0x60>
    }
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e3f0 	.word	0xe000e3f0
 8003480:	2000018c 	.word	0x2000018c
 8003484:	e000ed0c 	.word	0xe000ed0c
 8003488:	20000190 	.word	0x20000190

0800348c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003498:	f7ff f886 	bl	80025a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800349c:	4b65      	ldr	r3, [pc, #404]	; (8003634 <pvPortMalloc+0x1a8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034a4:	f000 f934 	bl	8003710 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034a8:	4b63      	ldr	r3, [pc, #396]	; (8003638 <pvPortMalloc+0x1ac>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 80a7 	bne.w	8003604 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02d      	beq.n	8003518 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80034bc:	2208      	movs	r2, #8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d227      	bcs.n	8003518 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80034c8:	2208      	movs	r2, #8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d021      	beq.n	800351e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f023 0307 	bic.w	r3, r3, #7
 80034e0:	3308      	adds	r3, #8
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d214      	bcs.n	8003512 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f023 0307 	bic.w	r3, r3, #7
 80034ee:	3308      	adds	r3, #8
 80034f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <pvPortMalloc+0x92>
        __asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	617b      	str	r3, [r7, #20]
    }
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003516:	e002      	b.n	800351e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	e000      	b.n	8003520 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800351e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d06e      	beq.n	8003604 <pvPortMalloc+0x178>
 8003526:	4b45      	ldr	r3, [pc, #276]	; (800363c <pvPortMalloc+0x1b0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	d869      	bhi.n	8003604 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <pvPortMalloc+0x1b4>)
 8003532:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003534:	4b42      	ldr	r3, [pc, #264]	; (8003640 <pvPortMalloc+0x1b4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800353a:	e004      	b.n	8003546 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d903      	bls.n	8003558 <pvPortMalloc+0xcc>
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f1      	bne.n	800353c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003558:	4b36      	ldr	r3, [pc, #216]	; (8003634 <pvPortMalloc+0x1a8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	429a      	cmp	r2, r3
 8003560:	d050      	beq.n	8003604 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2208      	movs	r2, #8
 8003568:	4413      	add	r3, r2
 800356a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	2308      	movs	r3, #8
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	429a      	cmp	r2, r3
 8003582:	d91f      	bls.n	80035c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <pvPortMalloc+0x120>
        __asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	613b      	str	r3, [r7, #16]
    }
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1ad2      	subs	r2, r2, r3
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035be:	69b8      	ldr	r0, [r7, #24]
 80035c0:	f000 f908 	bl	80037d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <pvPortMalloc+0x1b0>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	4a1b      	ldr	r2, [pc, #108]	; (800363c <pvPortMalloc+0x1b0>)
 80035d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <pvPortMalloc+0x1b0>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <pvPortMalloc+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d203      	bcs.n	80035e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <pvPortMalloc+0x1b0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a18      	ldr	r2, [pc, #96]	; (8003644 <pvPortMalloc+0x1b8>)
 80035e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <pvPortMalloc+0x1ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <pvPortMalloc+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3301      	adds	r3, #1
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <pvPortMalloc+0x1bc>)
 8003602:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003604:	f7fe ffde 	bl	80025c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <pvPortMalloc+0x19c>
        __asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	60fb      	str	r3, [r7, #12]
    }
 8003624:	bf00      	nop
 8003626:	e7fe      	b.n	8003626 <pvPortMalloc+0x19a>
    return pvReturn;
 8003628:	69fb      	ldr	r3, [r7, #28]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3728      	adds	r7, #40	; 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20012d9c 	.word	0x20012d9c
 8003638:	20012db0 	.word	0x20012db0
 800363c:	20012da0 	.word	0x20012da0
 8003640:	20012d94 	.word	0x20012d94
 8003644:	20012da4 	.word	0x20012da4
 8003648:	20012da8 	.word	0x20012da8

0800364c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04d      	beq.n	80036fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800365e:	2308      	movs	r3, #8
 8003660:	425b      	negs	r3, r3
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4413      	add	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4b24      	ldr	r3, [pc, #144]	; (8003704 <vPortFree+0xb8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <vPortFree+0x44>
        __asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	60fb      	str	r3, [r7, #12]
    }
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <vPortFree+0x62>
        __asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	60bb      	str	r3, [r7, #8]
    }
 80036aa:	bf00      	nop
 80036ac:	e7fe      	b.n	80036ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <vPortFree+0xb8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01e      	beq.n	80036fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11a      	bne.n	80036fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <vPortFree+0xb8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80036d4:	f7fe ff68 	bl	80025a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <vPortFree+0xbc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	4a09      	ldr	r2, [pc, #36]	; (8003708 <vPortFree+0xbc>)
 80036e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036e6:	6938      	ldr	r0, [r7, #16]
 80036e8:	f000 f874 	bl	80037d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <vPortFree+0xc0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a06      	ldr	r2, [pc, #24]	; (800370c <vPortFree+0xc0>)
 80036f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036f6:	f7fe ff65 	bl	80025c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20012db0 	.word	0x20012db0
 8003708:	20012da0 	.word	0x20012da0
 800370c:	20012dac 	.word	0x20012dac

08003710 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003716:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800371a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <prvHeapInit+0xac>)
 800371e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3307      	adds	r3, #7
 800372e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0307 	bic.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <prvHeapInit+0xac>)
 8003740:	4413      	add	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <prvHeapInit+0xb0>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <prvHeapInit+0xb0>)
 8003750:	2200      	movs	r2, #0
 8003752:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	4413      	add	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800375c:	2208      	movs	r2, #8
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0307 	bic.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <prvHeapInit+0xb4>)
 8003770:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <prvHeapInit+0xb4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <prvHeapInit+0xb4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	1ad2      	subs	r2, r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <prvHeapInit+0xb4>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <prvHeapInit+0xb8>)
 800379e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a09      	ldr	r2, [pc, #36]	; (80037cc <prvHeapInit+0xbc>)
 80037a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <prvHeapInit+0xc0>)
 80037aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037ae:	601a      	str	r2, [r3, #0]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20000194 	.word	0x20000194
 80037c0:	20012d94 	.word	0x20012d94
 80037c4:	20012d9c 	.word	0x20012d9c
 80037c8:	20012da4 	.word	0x20012da4
 80037cc:	20012da0 	.word	0x20012da0
 80037d0:	20012db0 	.word	0x20012db0

080037d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037dc:	4b28      	ldr	r3, [pc, #160]	; (8003880 <prvInsertBlockIntoFreeList+0xac>)
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e002      	b.n	80037e8 <prvInsertBlockIntoFreeList+0x14>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d8f7      	bhi.n	80037e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4413      	add	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d108      	bne.n	8003816 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d118      	bne.n	800385c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <prvInsertBlockIntoFreeList+0xb0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d00d      	beq.n	8003852 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e008      	b.n	8003864 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <prvInsertBlockIntoFreeList+0xb0>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e003      	b.n	8003864 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	d002      	beq.n	8003872 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20012d94 	.word	0x20012d94
 8003884:	20012d9c 	.word	0x20012d9c

08003888 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003896:	2205      	movs	r2, #5
 8003898:	492b      	ldr	r1, [pc, #172]	; (8003948 <SYSVIEW_AddTask+0xc0>)
 800389a:	68b8      	ldr	r0, [r7, #8]
 800389c:	f001 fc70 	bl	8005180 <memcmp>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04b      	beq.n	800393e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b07      	cmp	r3, #7
 80038ac:	d903      	bls.n	80038b6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80038ae:	4828      	ldr	r0, [pc, #160]	; (8003950 <SYSVIEW_AddTask+0xc8>)
 80038b0:	f001 fbe6 	bl	8005080 <SEGGER_SYSVIEW_Warn>
    return;
 80038b4:	e044      	b.n	8003940 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80038b6:	4b25      	ldr	r3, [pc, #148]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4926      	ldr	r1, [pc, #152]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4921      	ldr	r1, [pc, #132]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3304      	adds	r3, #4
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	491b      	ldr	r1, [pc, #108]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3308      	adds	r3, #8
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <SYSVIEW_AddTask+0xc4>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4916      	ldr	r1, [pc, #88]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	330c      	adds	r3, #12
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <SYSVIEW_AddTask+0xc4>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4910      	ldr	r1, [pc, #64]	; (8003954 <SYSVIEW_AddTask+0xcc>)
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3310      	adds	r3, #16
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <SYSVIEW_AddTask+0xc4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <SYSVIEW_AddTask+0xc4>)
 800392a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8ca 	bl	8003ad0 <SYSVIEW_SendTaskInfo>
 800393c:	e000      	b.n	8003940 <SYSVIEW_AddTask+0xb8>
    return;
 800393e:	bf00      	nop

}
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	08005224 	.word	0x08005224
 800394c:	20012e54 	.word	0x20012e54
 8003950:	0800522c 	.word	0x0800522c
 8003954:	20012db4 	.word	0x20012db4

08003958 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80ab 	beq.w	8003ac0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e00d      	b.n	800398c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003970:	4956      	ldr	r1, [pc, #344]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d008      	beq.n	8003998 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4b4e      	ldr	r3, [pc, #312]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	429a      	cmp	r2, r3
 8003994:	d3ec      	bcc.n	8003970 <SYSVIEW_DeleteTask+0x18>
 8003996:	e000      	b.n	800399a <SYSVIEW_DeleteTask+0x42>
      break;
 8003998:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800399a:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d111      	bne.n	80039ca <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4a46      	ldr	r2, [pc, #280]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 80039b2:	4413      	add	r3, r2
 80039b4:	2214      	movs	r2, #20
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fbff 	bl	80051bc <memset>
    _NumTasks--;
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a40      	ldr	r2, [pc, #256]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	e07b      	b.n	8003ac2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d276      	bcs.n	8003ac2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80039d4:	4b3c      	ldr	r3, [pc, #240]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1e5a      	subs	r2, r3, #1
 80039da:	493c      	ldr	r1, [pc, #240]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	4838      	ldr	r0, [pc, #224]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4403      	add	r3, r0
 80039f6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80039f8:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	4933      	ldr	r1, [pc, #204]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	482f      	ldr	r0, [pc, #188]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4403      	add	r3, r0
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003a20:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	1e5a      	subs	r2, r3, #1
 8003a26:	4929      	ldr	r1, [pc, #164]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3308      	adds	r3, #8
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	4825      	ldr	r0, [pc, #148]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4403      	add	r3, r0
 8003a44:	3308      	adds	r3, #8
 8003a46:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003a48:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	491f      	ldr	r1, [pc, #124]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	481b      	ldr	r0, [pc, #108]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4403      	add	r3, r0
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003a70:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	4915      	ldr	r1, [pc, #84]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3310      	adds	r3, #16
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	4811      	ldr	r0, [pc, #68]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4403      	add	r3, r0
 8003a94:	3310      	adds	r3, #16
 8003a96:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	1e5a      	subs	r2, r3, #1
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <SYSVIEW_DeleteTask+0x174>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	2214      	movs	r2, #20
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fb84 	bl	80051bc <memset>
    _NumTasks--;
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a03      	ldr	r2, [pc, #12]	; (8003ac8 <SYSVIEW_DeleteTask+0x170>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e000      	b.n	8003ac2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003ac0:	bf00      	nop
  }
}
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20012e54 	.word	0x20012e54
 8003acc:	20012db4 	.word	0x20012db4

08003ad0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ade:	f107 0314 	add.w	r3, r7, #20
 8003ae2:	2214      	movs	r2, #20
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fb68 	bl	80051bc <memset>
  TaskInfo.TaskID     = TaskID;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fedf 	bl	80048c8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	; 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <_DoInit+0xa0>)
 8003b1c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003b1e:	22a8      	movs	r2, #168	; 0xa8
 8003b20:	2100      	movs	r1, #0
 8003b22:	6838      	ldr	r0, [r7, #0]
 8003b24:	f001 fb4a 	bl	80051bc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2203      	movs	r2, #3
 8003b32:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4a20      	ldr	r2, [pc, #128]	; (8003bb8 <_DoInit+0xa4>)
 8003b38:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <_DoInit+0xa8>)
 8003b3e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b46:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <_DoInit+0xa4>)
 8003b5e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <_DoInit+0xac>)
 8003b64:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2200      	movs	r2, #0
 8003b76:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b7e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	e00c      	b.n	8003ba2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f1c3 030f 	rsb	r3, r3, #15
 8003b8e:	4a0d      	ldr	r2, [pc, #52]	; (8003bc4 <_DoInit+0xb0>)
 8003b90:	5cd1      	ldrb	r1, [r2, r3]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	460a      	mov	r2, r1
 8003b9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d9ef      	bls.n	8003b88 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ba8:	f3bf 8f5f 	dmb	sy
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20012e58 	.word	0x20012e58
 8003bb8:	0800527c 	.word	0x0800527c
 8003bbc:	20012f00 	.word	0x20012f00
 8003bc0:	20013300 	.word	0x20013300
 8003bc4:	080052a0 	.word	0x080052a0

08003bc8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003bd4:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003be2:	f7ff ff97 	bl	8003b14 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	3360      	adds	r3, #96	; 0x60
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d92b      	bls.n	8003c6c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4293      	cmp	r3, r2
 8003c24:	bf28      	it	cs
 8003c26:	4613      	movcs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	4413      	add	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	6939      	ldr	r1, [r7, #16]
 8003c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c3a:	f001 fab1 	bl	80051a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4413      	add	r3, r2
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d101      	bne.n	8003c6c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf28      	it	cs
 8003c7c:	4613      	movcs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d019      	beq.n	8003cba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	4413      	add	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6939      	ldr	r1, [r7, #16]
 8003c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c96:	f001 fa83 	bl	80051a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3730      	adds	r7, #48	; 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20012e58 	.word	0x20012e58

08003cd4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	60fa      	str	r2, [r7, #12]
 8003cea:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b80      	cmp	r3, #128	; 0x80
 8003cf0:	d90a      	bls.n	8003d08 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003cf6:	e007      	b.n	8003d08 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	1c53      	adds	r3, r2, #1
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1c59      	adds	r1, r3, #1
 8003d02:	60f9      	str	r1, [r7, #12]
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <_EncodeStr+0x46>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ee      	bne.n	8003cf8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3307      	adds	r3, #7
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d52:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <_HandleIncomingPacket+0xdc>)
 8003d54:	7e1b      	ldrb	r3, [r3, #24]
 8003d56:	4618      	mov	r0, r3
 8003d58:	1cfb      	adds	r3, r7, #3
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f7ff ff33 	bl	8003bc8 <SEGGER_RTT_ReadNoLock>
 8003d62:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d052      	beq.n	8003e10 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d031      	beq.n	8003dd4 <_HandleIncomingPacket+0x88>
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	dc40      	bgt.n	8003df6 <_HandleIncomingPacket+0xaa>
 8003d74:	2b07      	cmp	r3, #7
 8003d76:	dc15      	bgt.n	8003da4 <_HandleIncomingPacket+0x58>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	dd3c      	ble.n	8003df6 <_HandleIncomingPacket+0xaa>
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d839      	bhi.n	8003df6 <_HandleIncomingPacket+0xaa>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <_HandleIncomingPacket+0x3c>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003dab 	.word	0x08003dab
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db7 	.word	0x08003db7
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003dc3 	.word	0x08003dc3
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003dcf 	.word	0x08003dcf
 8003da4:	2b7f      	cmp	r3, #127	; 0x7f
 8003da6:	d035      	beq.n	8003e14 <_HandleIncomingPacket+0xc8>
 8003da8:	e025      	b.n	8003df6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003daa:	f000 fc13 	bl	80045d4 <SEGGER_SYSVIEW_Start>
      break;
 8003dae:	e036      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003db0:	f000 fcca 	bl	8004748 <SEGGER_SYSVIEW_Stop>
      break;
 8003db4:	e033      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003db6:	f000 fe7f 	bl	8004ab8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003dba:	e030      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003dbc:	f000 fe68 	bl	8004a90 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003dc0:	e02d      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003dc2:	f000 fce7 	bl	8004794 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003dc6:	e02a      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003dc8:	f001 f91c 	bl	8005004 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003dcc:	e027      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003dce:	f001 f8fb 	bl	8004fc8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003dd2:	e024      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <_HandleIncomingPacket+0xdc>)
 8003dd6:	7e1b      	ldrb	r3, [r3, #24]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	1cfb      	adds	r3, r7, #3
 8003ddc:	2201      	movs	r2, #1
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7ff fef2 	bl	8003bc8 <SEGGER_RTT_ReadNoLock>
 8003de4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d015      	beq.n	8003e18 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 f860 	bl	8004eb4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003df4:	e010      	b.n	8003e18 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da0e      	bge.n	8003e1c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <_HandleIncomingPacket+0xdc>)
 8003e00:	7e1b      	ldrb	r3, [r3, #24]
 8003e02:	4618      	mov	r0, r3
 8003e04:	1cfb      	adds	r3, r7, #3
 8003e06:	2201      	movs	r2, #1
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f7ff fedd 	bl	8003bc8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003e0e:	e005      	b.n	8003e1c <_HandleIncomingPacket+0xd0>
    }
  }
 8003e10:	bf00      	nop
 8003e12:	e004      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
      break;
 8003e14:	bf00      	nop
 8003e16:	e002      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
      break;
 8003e18:	bf00      	nop
 8003e1a:	e000      	b.n	8003e1e <_HandleIncomingPacket+0xd2>
      break;
 8003e1c:	bf00      	nop
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20013310 	.word	0x20013310

08003e2c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08c      	sub	sp, #48	; 0x30
 8003e30:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003e32:	2301      	movs	r3, #1
 8003e34:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e40:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e46:	e00b      	b.n	8003e60 <_TrySendOverflowPacket+0x34>
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	09db      	lsrs	r3, r3, #7
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	2b7f      	cmp	r3, #127	; 0x7f
 8003e64:	d8f0      	bhi.n	8003e48 <_TrySendOverflowPacket+0x1c>
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <_TrySendOverflowPacket+0xe0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	e00b      	b.n	8003ea8 <_TrySendOverflowPacket+0x7c>
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	1c59      	adds	r1, r3, #1
 8003e98:	6279      	str	r1, [r7, #36]	; 0x24
 8003e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	09db      	lsrs	r3, r3, #7
 8003ea6:	623b      	str	r3, [r7, #32]
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8003eac:	d8f0      	bhi.n	8003e90 <_TrySendOverflowPacket+0x64>
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	627a      	str	r2, [r7, #36]	; 0x24
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	1d3b      	adds	r3, r7, #4
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f7fc f97e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e004      	b.n	8003efc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a03      	ldr	r2, [pc, #12]	; (8003f08 <_TrySendOverflowPacket+0xdc>)
 8003efa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003efc:	693b      	ldr	r3, [r7, #16]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3730      	adds	r7, #48	; 0x30
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20013310 	.word	0x20013310
 8003f0c:	e0001004 	.word	0xe0001004

08003f10 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003f1c:	4b98      	ldr	r3, [pc, #608]	; (8004180 <_SendPacket+0x270>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d010      	beq.n	8003f46 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003f24:	4b96      	ldr	r3, [pc, #600]	; (8004180 <_SendPacket+0x270>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 812d 	beq.w	8004188 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003f2e:	4b94      	ldr	r3, [pc, #592]	; (8004180 <_SendPacket+0x270>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d109      	bne.n	8003f4a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003f36:	f7ff ff79 	bl	8003e2c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003f3a:	4b91      	ldr	r3, [pc, #580]	; (8004180 <_SendPacket+0x270>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	f040 8124 	bne.w	800418c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003f44:	e001      	b.n	8003f4a <_SendPacket+0x3a>
    goto Send;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <_SendPacket+0x3c>
Send:
 8003f4a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b1f      	cmp	r3, #31
 8003f50:	d809      	bhi.n	8003f66 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003f52:	4b8b      	ldr	r3, [pc, #556]	; (8004180 <_SendPacket+0x270>)
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8115 	bne.w	8004190 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b17      	cmp	r3, #23
 8003f6a:	d807      	bhi.n	8003f7c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e0c4      	b.n	8004106 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b7f      	cmp	r3, #127	; 0x7f
 8003f88:	d912      	bls.n	8003fb0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	09da      	lsrs	r2, r3, #7
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	60fa      	str	r2, [r7, #12]
 8003fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e006      	b.n	8003fbe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b7e      	cmp	r3, #126	; 0x7e
 8003fc2:	d807      	bhi.n	8003fd4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e098      	b.n	8004106 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fda:	d212      	bcs.n	8004002 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	09da      	lsrs	r2, r3, #7
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	60fa      	str	r2, [r7, #12]
 8003ff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e081      	b.n	8004106 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004008:	d21d      	bcs.n	8004046 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0b9a      	lsrs	r2, r3, #14
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	09db      	lsrs	r3, r3, #7
 800401e:	b2db      	uxtb	r3, r3
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	3a01      	subs	r2, #1
 8004024:	60fa      	str	r2, [r7, #12]
 8004026:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800402a:	b2da      	uxtb	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	3a01      	subs	r2, #1
 8004038:	60fa      	str	r2, [r7, #12]
 800403a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e05f      	b.n	8004106 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404c:	d228      	bcs.n	80040a0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0d5a      	lsrs	r2, r3, #21
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3b01      	subs	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0b9b      	lsrs	r3, r3, #14
 8004062:	b2db      	uxtb	r3, r3
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	3a01      	subs	r2, #1
 8004068:	60fa      	str	r2, [r7, #12]
 800406a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	09db      	lsrs	r3, r3, #7
 8004078:	b2db      	uxtb	r3, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	3a01      	subs	r2, #1
 800407e:	60fa      	str	r2, [r7, #12]
 8004080:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	3a01      	subs	r2, #1
 8004092:	60fa      	str	r2, [r7, #12]
 8004094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e032      	b.n	8004106 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	0f1a      	lsrs	r2, r3, #28
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0d5b      	lsrs	r3, r3, #21
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	3a01      	subs	r2, #1
 80040ba:	60fa      	str	r2, [r7, #12]
 80040bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0b9b      	lsrs	r3, r3, #14
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	3a01      	subs	r2, #1
 80040d0:	60fa      	str	r2, [r7, #12]
 80040d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	09db      	lsrs	r3, r3, #7
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	3a01      	subs	r2, #1
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	3a01      	subs	r2, #1
 80040fa:	60fa      	str	r2, [r7, #12]
 80040fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004106:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <_SendPacket+0x274>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800410c:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <_SendPacket+0x270>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	e00b      	b.n	8004138 <_SendPacket+0x228>
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	b2da      	uxtb	r2, r3
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	6279      	str	r1, [r7, #36]	; 0x24
 800412a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	09db      	lsrs	r3, r3, #7
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	2b7f      	cmp	r3, #127	; 0x7f
 800413c:	d8f0      	bhi.n	8004120 <_SendPacket+0x210>
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	627a      	str	r2, [r7, #36]	; 0x24
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800414e:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <_SendPacket+0x270>)
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	4618      	mov	r0, r3
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	461a      	mov	r2, r3
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	f7fc f837 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004162:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <_SendPacket+0x270>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	60d3      	str	r3, [r2, #12]
 8004170:	e00f      	b.n	8004192 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004172:	4b03      	ldr	r3, [pc, #12]	; (8004180 <_SendPacket+0x270>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4b01      	ldr	r3, [pc, #4]	; (8004180 <_SendPacket+0x270>)
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e008      	b.n	8004192 <_SendPacket+0x282>
 8004180:	20013310 	.word	0x20013310
 8004184:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <_SendPacket+0x282>
      goto SendDone;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <_SendPacket+0x282>
      goto SendDone;
 8004190:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004192:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <_SendPacket+0x2d4>)
 8004194:	7e1b      	ldrb	r3, [r3, #24]
 8004196:	4619      	mov	r1, r3
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <_SendPacket+0x2d8>)
 800419a:	460b      	mov	r3, r1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	440b      	add	r3, r1
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	336c      	adds	r3, #108	; 0x6c
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <_SendPacket+0x2d4>)
 80041aa:	7e1b      	ldrb	r3, [r3, #24]
 80041ac:	4618      	mov	r0, r3
 80041ae:	490e      	ldr	r1, [pc, #56]	; (80041e8 <_SendPacket+0x2d8>)
 80041b0:	4603      	mov	r3, r0
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4403      	add	r3, r0
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	3370      	adds	r3, #112	; 0x70
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d00b      	beq.n	80041da <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <_SendPacket+0x2d4>)
 80041c4:	789b      	ldrb	r3, [r3, #2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <_SendPacket+0x2d4>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80041d0:	f7ff fdbc 	bl	8003d4c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <_SendPacket+0x2d4>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041da:	bf00      	nop
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20013310 	.word	0x20013310
 80041e8:	20012e58 	.word	0x20012e58

080041ec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041f4:	f3ef 8311 	mrs	r3, BASEPRI
 80041f8:	f04f 0120 	mov.w	r1, #32
 80041fc:	f381 8811 	msr	BASEPRI, r1
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4808      	ldr	r0, [pc, #32]	; (8004224 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004204:	f7ff fd96 	bl	8003d34 <_PreparePacket>
 8004208:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f7ff fe7e 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f383 8811 	msr	BASEPRI, r3
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20013340 	.word	0x20013340

08004228 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004232:	f3ef 8311 	mrs	r3, BASEPRI
 8004236:	f04f 0120 	mov.w	r1, #32
 800423a:	f381 8811 	msr	BASEPRI, r1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	4816      	ldr	r0, [pc, #88]	; (800429c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004242:	f7ff fd77 	bl	8003d34 <_PreparePacket>
 8004246:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e00b      	b.n	800426e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	1c59      	adds	r1, r3, #1
 800425e:	61f9      	str	r1, [r7, #28]
 8004260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	09db      	lsrs	r3, r3, #7
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b7f      	cmp	r3, #127	; 0x7f
 8004272:	d8f0      	bhi.n	8004256 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	61fa      	str	r2, [r7, #28]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	6938      	ldr	r0, [r7, #16]
 800428a:	f7ff fe41 	bl	8003f10 <_SendPacket>
  RECORD_END();
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f383 8811 	msr	BASEPRI, r3
}
 8004294:	bf00      	nop
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20013340 	.word	0x20013340

080042a0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80042ac:	f3ef 8311 	mrs	r3, BASEPRI
 80042b0:	f04f 0120 	mov.w	r1, #32
 80042b4:	f381 8811 	msr	BASEPRI, r1
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	4825      	ldr	r0, [pc, #148]	; (8004350 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80042bc:	f7ff fd3a 	bl	8003d34 <_PreparePacket>
 80042c0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	e00b      	b.n	80042e8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	1c59      	adds	r1, r3, #1
 80042d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	09db      	lsrs	r3, r3, #7
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	2b7f      	cmp	r3, #127	; 0x7f
 80042ec:	d8f0      	bhi.n	80042d0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	e00b      	b.n	8004320 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	6279      	str	r1, [r7, #36]	; 0x24
 8004312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	09db      	lsrs	r3, r3, #7
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2b7f      	cmp	r3, #127	; 0x7f
 8004324:	d8f0      	bhi.n	8004308 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	627a      	str	r2, [r7, #36]	; 0x24
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6979      	ldr	r1, [r7, #20]
 800433a:	69b8      	ldr	r0, [r7, #24]
 800433c:	f7ff fde8 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f383 8811 	msr	BASEPRI, r3
}
 8004346:	bf00      	nop
 8004348:	3730      	adds	r7, #48	; 0x30
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20013340 	.word	0x20013340

08004354 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b090      	sub	sp, #64	; 0x40
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004362:	f3ef 8311 	mrs	r3, BASEPRI
 8004366:	f04f 0120 	mov.w	r1, #32
 800436a:	f381 8811 	msr	BASEPRI, r1
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	4840      	ldr	r0, [pc, #256]	; (8004474 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004372:	f7ff fcdf 	bl	8003d34 <_PreparePacket>
 8004376:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
 8004384:	e00b      	b.n	800439e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	b2da      	uxtb	r2, r3
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	1c59      	adds	r1, r3, #1
 800438e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	09db      	lsrs	r3, r3, #7
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	2b7f      	cmp	r3, #127	; 0x7f
 80043a2:	d8f0      	bhi.n	8004386 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80043a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
 80043bc:	e00b      	b.n	80043d6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c4:	1c59      	adds	r1, r3, #1
 80043c6:	6379      	str	r1, [r7, #52]	; 0x34
 80043c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	09db      	lsrs	r3, r3, #7
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b7f      	cmp	r3, #127	; 0x7f
 80043da:	d8f0      	bhi.n	80043be <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80043dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	637a      	str	r2, [r7, #52]	; 0x34
 80043e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f4:	e00b      	b.n	800440e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	09db      	lsrs	r3, r3, #7
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	2b7f      	cmp	r3, #127	; 0x7f
 8004412:	d8f0      	bhi.n	80043f6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800441a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
 8004428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	e00b      	b.n	8004446 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	6279      	str	r1, [r7, #36]	; 0x24
 8004438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	09db      	lsrs	r3, r3, #7
 8004444:	623b      	str	r3, [r7, #32]
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	2b7f      	cmp	r3, #127	; 0x7f
 800444a:	d8f0      	bhi.n	800442e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	627a      	str	r2, [r7, #36]	; 0x24
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	6979      	ldr	r1, [r7, #20]
 8004460:	69b8      	ldr	r0, [r7, #24]
 8004462:	f7ff fd55 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f383 8811 	msr	BASEPRI, r3
}
 800446c:	bf00      	nop
 800446e:	3740      	adds	r7, #64	; 0x40
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20013340 	.word	0x20013340

08004478 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b092      	sub	sp, #72	; 0x48
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004486:	f3ef 8311 	mrs	r3, BASEPRI
 800448a:	f04f 0120 	mov.w	r1, #32
 800448e:	f381 8811 	msr	BASEPRI, r1
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	484e      	ldr	r0, [pc, #312]	; (80045d0 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004496:	f7ff fc4d 	bl	8003d34 <_PreparePacket>
 800449a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	647b      	str	r3, [r7, #68]	; 0x44
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	643b      	str	r3, [r7, #64]	; 0x40
 80044a8:	e00b      	b.n	80044c2 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80044aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b0:	1c59      	adds	r1, r3, #1
 80044b2:	6479      	str	r1, [r7, #68]	; 0x44
 80044b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044be:	09db      	lsrs	r3, r3, #7
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
 80044c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c4:	2b7f      	cmp	r3, #127	; 0x7f
 80044c6:	d8f0      	bhi.n	80044aa <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80044c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	647a      	str	r2, [r7, #68]	; 0x44
 80044ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e0:	e00b      	b.n	80044fa <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80044ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	09db      	lsrs	r3, r3, #7
 80044f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	2b7f      	cmp	r3, #127	; 0x7f
 80044fe:	d8f0      	bhi.n	80044e2 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
 8004518:	e00b      	b.n	8004532 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	b2da      	uxtb	r2, r3
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	1c59      	adds	r1, r3, #1
 8004522:	6379      	str	r1, [r7, #52]	; 0x34
 8004524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	09db      	lsrs	r3, r3, #7
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2b7f      	cmp	r3, #127	; 0x7f
 8004536:	d8f0      	bhi.n	800451a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	637a      	str	r2, [r7, #52]	; 0x34
 800453e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004550:	e00b      	b.n	800456a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	b2da      	uxtb	r2, r3
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	1c59      	adds	r1, r3, #1
 800455a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800455c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	09db      	lsrs	r3, r3, #7
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	2b7f      	cmp	r3, #127	; 0x7f
 800456e:	d8f0      	bhi.n	8004552 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
 8004584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004586:	623b      	str	r3, [r7, #32]
 8004588:	e00b      	b.n	80045a2 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	1c59      	adds	r1, r3, #1
 8004592:	6279      	str	r1, [r7, #36]	; 0x24
 8004594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	09db      	lsrs	r3, r3, #7
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2b7f      	cmp	r3, #127	; 0x7f
 80045a6:	d8f0      	bhi.n	800458a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	627a      	str	r2, [r7, #36]	; 0x24
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	69b8      	ldr	r0, [r7, #24]
 80045be:	f7ff fca7 	bl	8003f10 <_SendPacket>
  RECORD_END();
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f383 8811 	msr	BASEPRI, r3
}
 80045c8:	bf00      	nop
 80045ca:	3748      	adds	r7, #72	; 0x48
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20013340 	.word	0x20013340

080045d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80045da:	4b58      	ldr	r3, [pc, #352]	; (800473c <SEGGER_SYSVIEW_Start+0x168>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80045e0:	f3ef 8311 	mrs	r3, BASEPRI
 80045e4:	f04f 0120 	mov.w	r1, #32
 80045e8:	f381 8811 	msr	BASEPRI, r1
 80045ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80045ee:	4b53      	ldr	r3, [pc, #332]	; (800473c <SEGGER_SYSVIEW_Start+0x168>)
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	220a      	movs	r2, #10
 80045f4:	4952      	ldr	r1, [pc, #328]	; (8004740 <SEGGER_SYSVIEW_Start+0x16c>)
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fb fdea 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004602:	200a      	movs	r0, #10
 8004604:	f7ff fdf2 	bl	80041ec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004608:	f3ef 8311 	mrs	r3, BASEPRI
 800460c:	f04f 0120 	mov.w	r1, #32
 8004610:	f381 8811 	msr	BASEPRI, r1
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	484b      	ldr	r0, [pc, #300]	; (8004744 <SEGGER_SYSVIEW_Start+0x170>)
 8004618:	f7ff fb8c 	bl	8003d34 <_PreparePacket>
 800461c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004626:	4b45      	ldr	r3, [pc, #276]	; (800473c <SEGGER_SYSVIEW_Start+0x168>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
 800462c:	e00b      	b.n	8004646 <SEGGER_SYSVIEW_Start+0x72>
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	1c59      	adds	r1, r3, #1
 8004636:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	09db      	lsrs	r3, r3, #7
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	2b7f      	cmp	r3, #127	; 0x7f
 800464a:	d8f0      	bhi.n	800462e <SEGGER_SYSVIEW_Start+0x5a>
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <SEGGER_SYSVIEW_Start+0x168>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	e00b      	b.n	8004680 <SEGGER_SYSVIEW_Start+0xac>
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	b2da      	uxtb	r2, r3
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	6279      	str	r1, [r7, #36]	; 0x24
 8004672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	09db      	lsrs	r3, r3, #7
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2b7f      	cmp	r3, #127	; 0x7f
 8004684:	d8f0      	bhi.n	8004668 <SEGGER_SYSVIEW_Start+0x94>
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	627a      	str	r2, [r7, #36]	; 0x24
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	4b28      	ldr	r3, [pc, #160]	; (800473c <SEGGER_SYSVIEW_Start+0x168>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e00b      	b.n	80046ba <SEGGER_SYSVIEW_Start+0xe6>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	1c59      	adds	r1, r3, #1
 80046aa:	61f9      	str	r1, [r7, #28]
 80046ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	09db      	lsrs	r3, r3, #7
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b7f      	cmp	r3, #127	; 0x7f
 80046be:	d8f0      	bhi.n	80046a2 <SEGGER_SYSVIEW_Start+0xce>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	61fa      	str	r2, [r7, #28]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	e00b      	b.n	80046f2 <SEGGER_SYSVIEW_Start+0x11e>
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	1c59      	adds	r1, r3, #1
 80046e2:	6179      	str	r1, [r7, #20]
 80046e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	09db      	lsrs	r3, r3, #7
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b7f      	cmp	r3, #127	; 0x7f
 80046f6:	d8f0      	bhi.n	80046da <SEGGER_SYSVIEW_Start+0x106>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	617a      	str	r2, [r7, #20]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004708:	2218      	movs	r2, #24
 800470a:	6839      	ldr	r1, [r7, #0]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fbff 	bl	8003f10 <_SendPacket>
      RECORD_END();
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <SEGGER_SYSVIEW_Start+0x168>)
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <SEGGER_SYSVIEW_Start+0x168>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004726:	f000 f9c7 	bl	8004ab8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800472a:	f000 f9b1 	bl	8004a90 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800472e:	f000 fc69 	bl	8005004 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004732:	bf00      	nop
 8004734:	3730      	adds	r7, #48	; 0x30
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20013310 	.word	0x20013310
 8004740:	080052b4 	.word	0x080052b4
 8004744:	20013340 	.word	0x20013340

08004748 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800474e:	f3ef 8311 	mrs	r3, BASEPRI
 8004752:	f04f 0120 	mov.w	r1, #32
 8004756:	f381 8811 	msr	BASEPRI, r1
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	480b      	ldr	r0, [pc, #44]	; (800478c <SEGGER_SYSVIEW_Stop+0x44>)
 800475e:	f7ff fae9 	bl	8003d34 <_PreparePacket>
 8004762:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <SEGGER_SYSVIEW_Stop+0x48>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800476c:	220b      	movs	r2, #11
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	6838      	ldr	r0, [r7, #0]
 8004772:	f7ff fbcd 	bl	8003f10 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <SEGGER_SYSVIEW_Stop+0x48>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f383 8811 	msr	BASEPRI, r3
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20013340 	.word	0x20013340
 8004790:	20013310 	.word	0x20013310

08004794 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b08c      	sub	sp, #48	; 0x30
 8004798:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800479a:	f3ef 8311 	mrs	r3, BASEPRI
 800479e:	f04f 0120 	mov.w	r1, #32
 80047a2:	f381 8811 	msr	BASEPRI, r1
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	4845      	ldr	r0, [pc, #276]	; (80048c0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80047aa:	f7ff fac3 	bl	8003d34 <_PreparePacket>
 80047ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b8:	4b42      	ldr	r3, [pc, #264]	; (80048c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047be:	e00b      	b.n	80047d8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	09db      	lsrs	r3, r3, #7
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	2b7f      	cmp	r3, #127	; 0x7f
 80047dc:	d8f0      	bhi.n	80047c0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	e00b      	b.n	8004812 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	6279      	str	r1, [r7, #36]	; 0x24
 8004804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	09db      	lsrs	r3, r3, #7
 8004810:	623b      	str	r3, [r7, #32]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	2b7f      	cmp	r3, #127	; 0x7f
 8004816:	d8f0      	bhi.n	80047fa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	627a      	str	r2, [r7, #36]	; 0x24
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e00b      	b.n	800484c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	61f9      	str	r1, [r7, #28]
 800483e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	09db      	lsrs	r3, r3, #7
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b7f      	cmp	r3, #127	; 0x7f
 8004850:	d8f0      	bhi.n	8004834 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	61fa      	str	r2, [r7, #28]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	e00b      	b.n	8004884 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	6179      	str	r1, [r7, #20]
 8004876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b7f      	cmp	r3, #127	; 0x7f
 8004888:	d8f0      	bhi.n	800486c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	617a      	str	r2, [r7, #20]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800489a:	2218      	movs	r2, #24
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	f7ff fb36 	bl	8003f10 <_SendPacket>
  RECORD_END();
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	4798      	blx	r3
  }
}
 80048b8:	bf00      	nop
 80048ba:	3730      	adds	r7, #48	; 0x30
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20013340 	.word	0x20013340
 80048c4:	20013310 	.word	0x20013310

080048c8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b092      	sub	sp, #72	; 0x48
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80048d0:	f3ef 8311 	mrs	r3, BASEPRI
 80048d4:	f04f 0120 	mov.w	r1, #32
 80048d8:	f381 8811 	msr	BASEPRI, r1
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	486a      	ldr	r0, [pc, #424]	; (8004a88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80048e0:	f7ff fa28 	bl	8003d34 <_PreparePacket>
 80048e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b66      	ldr	r3, [pc, #408]	; (8004a8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	643b      	str	r3, [r7, #64]	; 0x40
 80048fa:	e00b      	b.n	8004914 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80048fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	6479      	str	r1, [r7, #68]	; 0x44
 8004906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004910:	09db      	lsrs	r3, r3, #7
 8004912:	643b      	str	r3, [r7, #64]	; 0x40
 8004914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004916:	2b7f      	cmp	r3, #127	; 0x7f
 8004918:	d8f0      	bhi.n	80048fc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800491a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	647a      	str	r2, [r7, #68]	; 0x44
 8004920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004928:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
 8004934:	e00b      	b.n	800494e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	b2da      	uxtb	r2, r3
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	1c59      	adds	r1, r3, #1
 800493e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	09db      	lsrs	r3, r3, #7
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b7f      	cmp	r3, #127	; 0x7f
 8004952:	d8f0      	bhi.n	8004936 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800495a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	4619      	mov	r1, r3
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff f9b1 	bl	8003cd4 <_EncodeStr>
 8004972:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004974:	2209      	movs	r2, #9
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	6938      	ldr	r0, [r7, #16]
 800497a:	f7ff fac9 	bl	8003f10 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	633b      	str	r3, [r7, #48]	; 0x30
 8004992:	e00b      	b.n	80049ac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	b2da      	uxtb	r2, r3
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	6379      	str	r1, [r7, #52]	; 0x34
 800499e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	09db      	lsrs	r3, r3, #7
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	2b7f      	cmp	r3, #127	; 0x7f
 80049b0:	d8f0      	bhi.n	8004994 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	637a      	str	r2, [r7, #52]	; 0x34
 80049b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80049cc:	e00b      	b.n	80049e6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	1c59      	adds	r1, r3, #1
 80049d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	09db      	lsrs	r3, r3, #7
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	2b7f      	cmp	r3, #127	; 0x7f
 80049ea:	d8f0      	bhi.n	80049ce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	623b      	str	r3, [r7, #32]
 8004a06:	e00b      	b.n	8004a20 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	1c59      	adds	r1, r3, #1
 8004a10:	6279      	str	r1, [r7, #36]	; 0x24
 8004a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	09db      	lsrs	r3, r3, #7
 8004a1e:	623b      	str	r3, [r7, #32]
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	2b7f      	cmp	r3, #127	; 0x7f
 8004a24:	d8f0      	bhi.n	8004a08 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	627a      	str	r2, [r7, #36]	; 0x24
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e00b      	b.n	8004a58 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	1c59      	adds	r1, r3, #1
 8004a48:	61f9      	str	r1, [r7, #28]
 8004a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	09db      	lsrs	r3, r3, #7
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a5c:	d8f0      	bhi.n	8004a40 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	61fa      	str	r2, [r7, #28]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004a6e:	2215      	movs	r2, #21
 8004a70:	68f9      	ldr	r1, [r7, #12]
 8004a72:	6938      	ldr	r0, [r7, #16]
 8004a74:	f7ff fa4c 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f383 8811 	msr	BASEPRI, r3
}
 8004a7e:	bf00      	nop
 8004a80:	3748      	adds	r7, #72	; 0x48
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20013340 	.word	0x20013340
 8004a8c:	20013310 	.word	0x20013310

08004a90 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004aa6:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4798      	blx	r3
  }
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20013310 	.word	0x20013310

08004ab8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004abe:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01a      	beq.n	8004afc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d015      	beq.n	8004afc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004ad0:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4798      	blx	r3
 8004ad8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004adc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	000a      	movs	r2, r1
 8004aec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004aee:	4613      	mov	r3, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4621      	mov	r1, r4
 8004af4:	200d      	movs	r0, #13
 8004af6:	f7ff fbd3 	bl	80042a0 <SEGGER_SYSVIEW_RecordU32x2>
 8004afa:	e006      	b.n	8004b0a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	200c      	movs	r0, #12
 8004b04:	f7ff fb90 	bl	8004228 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20013310 	.word	0x20013310
 8004b18:	e0001004 	.word	0xe0001004

08004b1c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b22:	f3ef 8311 	mrs	r3, BASEPRI
 8004b26:	f04f 0120 	mov.w	r1, #32
 8004b2a:	f381 8811 	msr	BASEPRI, r1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	4819      	ldr	r0, [pc, #100]	; (8004b98 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004b32:	f7ff f8ff 	bl	8003d34 <_PreparePacket>
 8004b36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b44:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	e00b      	b.n	8004b68 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	6179      	str	r1, [r7, #20]
 8004b5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	09db      	lsrs	r3, r3, #7
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6c:	d8f0      	bhi.n	8004b50 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	617a      	str	r2, [r7, #20]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004b7e:	2202      	movs	r2, #2
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	68b8      	ldr	r0, [r7, #8]
 8004b84:	f7ff f9c4 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f383 8811 	msr	BASEPRI, r3
}
 8004b8e:	bf00      	nop
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20013340 	.word	0x20013340
 8004b9c:	e000ed04 	.word	0xe000ed04

08004ba0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8004baa:	f04f 0120 	mov.w	r1, #32
 8004bae:	f381 8811 	msr	BASEPRI, r1
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	4807      	ldr	r0, [pc, #28]	; (8004bd4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004bb6:	f7ff f8bd 	bl	8003d34 <_PreparePacket>
 8004bba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	6838      	ldr	r0, [r7, #0]
 8004bc2:	f7ff f9a5 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f383 8811 	msr	BASEPRI, r3
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20013340 	.word	0x20013340

08004bd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bde:	f3ef 8311 	mrs	r3, BASEPRI
 8004be2:	f04f 0120 	mov.w	r1, #32
 8004be6:	f381 8811 	msr	BASEPRI, r1
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	4807      	ldr	r0, [pc, #28]	; (8004c0c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004bee:	f7ff f8a1 	bl	8003d34 <_PreparePacket>
 8004bf2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004bf4:	2212      	movs	r2, #18
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	6838      	ldr	r0, [r7, #0]
 8004bfa:	f7ff f989 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f383 8811 	msr	BASEPRI, r3
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20013340 	.word	0x20013340

08004c10 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c16:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1a:	f04f 0120 	mov.w	r1, #32
 8004c1e:	f381 8811 	msr	BASEPRI, r1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	4807      	ldr	r0, [pc, #28]	; (8004c44 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004c26:	f7ff f885 	bl	8003d34 <_PreparePacket>
 8004c2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004c2c:	2211      	movs	r2, #17
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f7ff f96d 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f383 8811 	msr	BASEPRI, r3
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20013340 	.word	0x20013340

08004c48 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c50:	f3ef 8311 	mrs	r3, BASEPRI
 8004c54:	f04f 0120 	mov.w	r1, #32
 8004c58:	f381 8811 	msr	BASEPRI, r1
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	4819      	ldr	r0, [pc, #100]	; (8004cc4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004c60:	f7ff f868 	bl	8003d34 <_PreparePacket>
 8004c64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e00b      	b.n	8004c96 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	61f9      	str	r1, [r7, #28]
 8004c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	09db      	lsrs	r3, r3, #7
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9a:	d8f0      	bhi.n	8004c7e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004cac:	2208      	movs	r2, #8
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	6938      	ldr	r0, [r7, #16]
 8004cb2:	f7ff f92d 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f383 8811 	msr	BASEPRI, r3
}
 8004cbc:	bf00      	nop
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20013340 	.word	0x20013340
 8004cc8:	20013310 	.word	0x20013310

08004ccc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd8:	f04f 0120 	mov.w	r1, #32
 8004cdc:	f381 8811 	msr	BASEPRI, r1
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	4819      	ldr	r0, [pc, #100]	; (8004d48 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ce4:	f7ff f826 	bl	8003d34 <_PreparePacket>
 8004ce8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	e00b      	b.n	8004d1a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	1c59      	adds	r1, r3, #1
 8004d0a:	61f9      	str	r1, [r7, #28]
 8004d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	09db      	lsrs	r3, r3, #7
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1e:	d8f0      	bhi.n	8004d02 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	61fa      	str	r2, [r7, #28]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004d30:	2204      	movs	r2, #4
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	6938      	ldr	r0, [r7, #16]
 8004d36:	f7ff f8eb 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f383 8811 	msr	BASEPRI, r3
}
 8004d40:	bf00      	nop
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20013340 	.word	0x20013340
 8004d4c:	20013310 	.word	0x20013310

08004d50 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d58:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5c:	f04f 0120 	mov.w	r1, #32
 8004d60:	f381 8811 	msr	BASEPRI, r1
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	4819      	ldr	r0, [pc, #100]	; (8004dcc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004d68:	f7fe ffe4 	bl	8003d34 <_PreparePacket>
 8004d6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d72:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e00b      	b.n	8004d9e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	61f9      	str	r1, [r7, #28]
 8004d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	09db      	lsrs	r3, r3, #7
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b7f      	cmp	r3, #127	; 0x7f
 8004da2:	d8f0      	bhi.n	8004d86 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	61fa      	str	r2, [r7, #28]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004db4:	2206      	movs	r2, #6
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	6938      	ldr	r0, [r7, #16]
 8004dba:	f7ff f8a9 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f383 8811 	msr	BASEPRI, r3
}
 8004dc4:	bf00      	nop
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20013340 	.word	0x20013340
 8004dd0:	20013310 	.word	0x20013310

08004dd4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dde:	f3ef 8311 	mrs	r3, BASEPRI
 8004de2:	f04f 0120 	mov.w	r1, #32
 8004de6:	f381 8811 	msr	BASEPRI, r1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	4827      	ldr	r0, [pc, #156]	; (8004e8c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004dee:	f7fe ffa1 	bl	8003d34 <_PreparePacket>
 8004df2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004df8:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	623b      	str	r3, [r7, #32]
 8004e0a:	e00b      	b.n	8004e24 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	6279      	str	r1, [r7, #36]	; 0x24
 8004e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	623b      	str	r3, [r7, #32]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b7f      	cmp	r3, #127	; 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e00b      	b.n	8004e5c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1c59      	adds	r1, r3, #1
 8004e4c:	61f9      	str	r1, [r7, #28]
 8004e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	09db      	lsrs	r3, r3, #7
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e60:	d8f0      	bhi.n	8004e44 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	61fa      	str	r2, [r7, #28]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004e72:	2207      	movs	r2, #7
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f7ff f84a 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f383 8811 	msr	BASEPRI, r3
}
 8004e82:	bf00      	nop
 8004e84:	3728      	adds	r7, #40	; 0x28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20013340 	.word	0x20013340
 8004e90:	20013310 	.word	0x20013310

08004e94 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	1ad3      	subs	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20013310 	.word	0x20013310

08004eb4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08c      	sub	sp, #48	; 0x30
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004ebe:	4b40      	ldr	r3, [pc, #256]	; (8004fc0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d077      	beq.n	8004fb6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004ec6:	4b3e      	ldr	r3, [pc, #248]	; (8004fc0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed0:	e008      	b.n	8004ee4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3f2      	bcc.n	8004ed2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004eec:	e000      	b.n	8004ef0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004eee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d055      	beq.n	8004fa2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8004efa:	f04f 0120 	mov.w	r1, #32
 8004efe:	f381 8811 	msr	BASEPRI, r1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	482f      	ldr	r0, [pc, #188]	; (8004fc4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004f06:	f7fe ff15 	bl	8003d34 <_PreparePacket>
 8004f0a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	e00b      	b.n	8004f32 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	1c59      	adds	r1, r3, #1
 8004f22:	6279      	str	r1, [r7, #36]	; 0x24
 8004f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	09db      	lsrs	r3, r3, #7
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	2b7f      	cmp	r3, #127	; 0x7f
 8004f36:	d8f0      	bhi.n	8004f1a <SEGGER_SYSVIEW_SendModule+0x66>
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f3e:	6a3a      	ldr	r2, [r7, #32]
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	e00b      	b.n	8004f6c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	61f9      	str	r1, [r7, #28]
 8004f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f70:	d8f0      	bhi.n	8004f54 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	61fa      	str	r2, [r7, #28]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7fe fea2 	bl	8003cd4 <_EncodeStr>
 8004f90:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004f92:	2216      	movs	r2, #22
 8004f94:	68f9      	ldr	r1, [r7, #12]
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	f7fe ffba 	bl	8003f10 <_SendPacket>
      RECORD_END();
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <SEGGER_SYSVIEW_SendModule+0x102>
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4798      	blx	r3
    }
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	3730      	adds	r7, #48	; 0x30
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20013338 	.word	0x20013338
 8004fc4:	20013340 	.word	0x20013340

08004fc8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00f      	beq.n	8004ff6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f2      	bne.n	8004fdc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20013338 	.word	0x20013338

08005004 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800500a:	f3ef 8311 	mrs	r3, BASEPRI
 800500e:	f04f 0120 	mov.w	r1, #32
 8005012:	f381 8811 	msr	BASEPRI, r1
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	4817      	ldr	r0, [pc, #92]	; (8005078 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800501a:	f7fe fe8b 	bl	8003d34 <_PreparePacket>
 800501e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	e00b      	b.n	8005048 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	b2da      	uxtb	r2, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1c59      	adds	r1, r3, #1
 8005038:	6179      	str	r1, [r7, #20]
 800503a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	09db      	lsrs	r3, r3, #7
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b7f      	cmp	r3, #127	; 0x7f
 800504c:	d8f0      	bhi.n	8005030 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	617a      	str	r2, [r7, #20]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800505e:	221b      	movs	r2, #27
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	68b8      	ldr	r0, [r7, #8]
 8005064:	f7fe ff54 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f383 8811 	msr	BASEPRI, r3
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20013340 	.word	0x20013340
 800507c:	2001333c 	.word	0x2001333c

08005080 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005088:	f3ef 8311 	mrs	r3, BASEPRI
 800508c:	f04f 0120 	mov.w	r1, #32
 8005090:	f381 8811 	msr	BASEPRI, r1
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	4827      	ldr	r0, [pc, #156]	; (8005134 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005098:	f7fe fe4c 	bl	8003d34 <_PreparePacket>
 800509c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800509e:	2280      	movs	r2, #128	; 0x80
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	6938      	ldr	r0, [r7, #16]
 80050a4:	f7fe fe16 	bl	8003cd4 <_EncodeStr>
 80050a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
 80050ae:	2301      	movs	r3, #1
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	e00b      	b.n	80050cc <SEGGER_SYSVIEW_Warn+0x4c>
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	6279      	str	r1, [r7, #36]	; 0x24
 80050be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	09db      	lsrs	r3, r3, #7
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b7f      	cmp	r3, #127	; 0x7f
 80050d0:	d8f0      	bhi.n	80050b4 <SEGGER_SYSVIEW_Warn+0x34>
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	627a      	str	r2, [r7, #36]	; 0x24
 80050d8:	6a3a      	ldr	r2, [r7, #32]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e00b      	b.n	8005104 <SEGGER_SYSVIEW_Warn+0x84>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	61f9      	str	r1, [r7, #28]
 80050f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	09db      	lsrs	r3, r3, #7
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b7f      	cmp	r3, #127	; 0x7f
 8005108:	d8f0      	bhi.n	80050ec <SEGGER_SYSVIEW_Warn+0x6c>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	61fa      	str	r2, [r7, #28]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800511a:	221a      	movs	r2, #26
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	6938      	ldr	r0, [r7, #16]
 8005120:	f7fe fef6 	bl	8003f10 <_SendPacket>
  RECORD_END();
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f383 8811 	msr	BASEPRI, r3
}
 800512a:	bf00      	nop
 800512c:	3728      	adds	r7, #40	; 0x28
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20013340 	.word	0x20013340

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4d0d      	ldr	r5, [pc, #52]	; (8005170 <__libc_init_array+0x38>)
 800513c:	4c0d      	ldr	r4, [pc, #52]	; (8005174 <__libc_init_array+0x3c>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	2600      	movs	r6, #0
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	4d0b      	ldr	r5, [pc, #44]	; (8005178 <__libc_init_array+0x40>)
 800514a:	4c0c      	ldr	r4, [pc, #48]	; (800517c <__libc_init_array+0x44>)
 800514c:	f000 f83e 	bl	80051cc <_init>
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	2600      	movs	r6, #0
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	080052c8 	.word	0x080052c8
 8005174:	080052c8 	.word	0x080052c8
 8005178:	080052c8 	.word	0x080052c8
 800517c:	080052cc 	.word	0x080052cc

08005180 <memcmp>:
 8005180:	b510      	push	{r4, lr}
 8005182:	3901      	subs	r1, #1
 8005184:	4402      	add	r2, r0
 8005186:	4290      	cmp	r0, r2
 8005188:	d101      	bne.n	800518e <memcmp+0xe>
 800518a:	2000      	movs	r0, #0
 800518c:	e005      	b.n	800519a <memcmp+0x1a>
 800518e:	7803      	ldrb	r3, [r0, #0]
 8005190:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005194:	42a3      	cmp	r3, r4
 8005196:	d001      	beq.n	800519c <memcmp+0x1c>
 8005198:	1b18      	subs	r0, r3, r4
 800519a:	bd10      	pop	{r4, pc}
 800519c:	3001      	adds	r0, #1
 800519e:	e7f2      	b.n	8005186 <memcmp+0x6>

080051a0 <memcpy>:
 80051a0:	440a      	add	r2, r1
 80051a2:	4291      	cmp	r1, r2
 80051a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051a8:	d100      	bne.n	80051ac <memcpy+0xc>
 80051aa:	4770      	bx	lr
 80051ac:	b510      	push	{r4, lr}
 80051ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b6:	4291      	cmp	r1, r2
 80051b8:	d1f9      	bne.n	80051ae <memcpy+0xe>
 80051ba:	bd10      	pop	{r4, pc}

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <_init>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	bf00      	nop
 80051d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d2:	bc08      	pop	{r3}
 80051d4:	469e      	mov	lr, r3
 80051d6:	4770      	bx	lr

080051d8 <_fini>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr
