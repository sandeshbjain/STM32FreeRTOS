
FreeRTOS_M4Cortex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005340  08005340  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005348  08005348  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00013410  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013424  20013424  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b4b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002870  00000000  00000000  00032b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00035400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  000365b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023174  00000000  00000000  00037608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ea8  00000000  00000000  0005a77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d61bb  00000000  00000000  0006d624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001437df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049e8  00000000  00000000  00143830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800524c 	.word	0x0800524c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800524c 	.word	0x0800524c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e58 	.word	0x20012e58

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <task1_handler>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
static void task1_handler(void *parameters)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
	//char msg[50];
	while(1)
	{
		//snprintf(msg, 50, (char*) parameters);
	//	SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <task1_handler+0x4c>)
 8000574:	f000 fdb3 	bl	80010de <HAL_GPIO_TogglePin>
		waitstatus= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2000      	movs	r0, #0
 8000586:	f002 facf 	bl	8002b28 <xTaskGenericNotifyWait>
 800058a:	60f8      	str	r0, [r7, #12]

		if(waitstatus==pdTRUE)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1ee      	bne.n	8000570 <task1_handler+0x8>
		{
			//vTaskSuspendAll();
			portENTER_CRITICAL();
 8000592:	f002 fe8f 	bl	80032b4 <vPortEnterCritical>
			next_task = task2_handle;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <task1_handler+0x50>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <task1_handler+0x54>)
 800059c:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <task1_handler+0x4c>)
 80005a4:	f000 fd82 	bl	80010ac <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 ff2f 	bl	800240c <vTaskDelete>
			portEXIT_CRITICAL();
 80005ae:	f002 feb1 	bl	8003314 <vPortExitCritical>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80005b2:	e7dd      	b.n	8000570 <task1_handler+0x8>
 80005b4:	40020000 	.word	0x40020000
 80005b8:	20000034 	.word	0x20000034
 80005bc:	20000038 	.word	0x20000038

080005c0 <task2_handler>:

	}
}

static void task2_handler(void *parameters)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
	//char msg[50];
	while(1)
	{
		//snprintf(msg, 50, (char*) parameters);
	//	SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <task2_handler+0x4c>)
 80005cc:	f000 fd87 	bl	80010de <HAL_GPIO_TogglePin>
		waitstatus= xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 faa3 	bl	8002b28 <xTaskGenericNotifyWait>
 80005e2:	60f8      	str	r0, [r7, #12]

		if(waitstatus==pdTRUE)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d1ee      	bne.n	80005c8 <task2_handler+0x8>
			{
				//vTaskSuspendAll();
				portENTER_CRITICAL();
 80005ea:	f002 fe63 	bl	80032b4 <vPortEnterCritical>
				next_task = NULL;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <task2_handler+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
				//xTaskResumeAll();
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <task2_handler+0x4c>)
 80005fa:	f000 fd57 	bl	80010ac <HAL_GPIO_WritePin>
				//vTaskDelete(button_handle);
				vTaskDelete(NULL);
 80005fe:	2000      	movs	r0, #0
 8000600:	f001 ff04 	bl	800240c <vTaskDelete>
				portEXIT_CRITICAL();
 8000604:	f002 fe86 	bl	8003314 <vPortExitCritical>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000608:	e7de      	b.n	80005c8 <task2_handler+0x8>
 800060a:	bf00      	nop
 800060c:	40020000 	.word	0x40020000
 8000610:	20000038 	.word	0x20000038

08000614 <Button_interrupt_Handler>:
	}
}
*/

void Button_interrupt_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]

	xTaskNotifyFromISR(next_task,0,eNoAction, &pxHigherPriorityTaskWoken);
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <Button_interrupt_Handler+0x48>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2300      	movs	r3, #0
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	f002 fb02 	bl	8002c38 <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00a      	beq.n	8000650 <Button_interrupt_Handler+0x3c>
 800063a:	f004 fb0d 	bl	8004c58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <Button_interrupt_Handler+0x4c>)
 8000640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	f3bf 8f6f 	isb	sy
}
 800064e:	e001      	b.n	8000654 <Button_interrupt_Handler+0x40>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000650:	f004 fae6 	bl	8004c20 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000038 	.word	0x20000038
 8000660:	e000ed04 	.word	0xe000ed04

08000664 <vApplicationIdleHook>:

void vApplicationIdleHook( void )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000668:	2101      	movs	r1, #1
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fd76 	bl	800115c <HAL_PWR_EnterSLEEPMode>

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fa57 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f863 	bl	8000748 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <main+0xa8>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <main+0xa8>)
 8000688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800068c:	60d3      	str	r3, [r2, #12]

  DWT->CYCCNT = 0;
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <main+0xac>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f8c2 	bl	800081c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL|=(1<<0);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <main+0xac>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <main+0xac>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]


 // SEGGER_SYSVIEW_Conf();
//  SEGGER_SYSVIEW_Start();

  task1_status=xTaskCreate(task1_handler, "Task-1", 2000, "Hello world task 1", 1, &task1_handle);
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <main+0xb0>)
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	2301      	movs	r3, #1
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <main+0xb4>)
 80006ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006b2:	491e      	ldr	r1, [pc, #120]	; (800072c <main+0xb8>)
 80006b4:	481e      	ldr	r0, [pc, #120]	; (8000730 <main+0xbc>)
 80006b6:	f001 fd45 	bl	8002144 <xTaskCreate>
 80006ba:	60f8      	str	r0, [r7, #12]
  configASSERT(task1_status == pdPASS);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00a      	beq.n	80006d8 <main+0x64>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006d4:	bf00      	nop
 80006d6:	e7fe      	b.n	80006d6 <main+0x62>
  next_task = task1_handle;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <main+0xb0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a15      	ldr	r2, [pc, #84]	; (8000734 <main+0xc0>)
 80006de:	6013      	str	r3, [r2, #0]
  task2_status=xTaskCreate(task2_handler, "Task-2", 2000, "Hello world task 2", 2, &task2_handle);
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <main+0xc4>)
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2302      	movs	r3, #2
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <main+0xc8>)
 80006ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ee:	4914      	ldr	r1, [pc, #80]	; (8000740 <main+0xcc>)
 80006f0:	4814      	ldr	r0, [pc, #80]	; (8000744 <main+0xd0>)
 80006f2:	f001 fd27 	bl	8002144 <xTaskCreate>
 80006f6:	60b8      	str	r0, [r7, #8]
  configASSERT(task2_status == pdPASS);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d00a      	beq.n	8000714 <main+0xa0>
        __asm volatile
 80006fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000702:	f383 8811 	msr	BASEPRI, r3
 8000706:	f3bf 8f6f 	isb	sy
 800070a:	f3bf 8f4f 	dsb	sy
 800070e:	603b      	str	r3, [r7, #0]
    }
 8000710:	bf00      	nop
 8000712:	e7fe      	b.n	8000712 <main+0x9e>

  //button_status=xTaskCreate(button_handler, "Button task", 2000, "Button handler running", 3, &button_handle);
  //configASSERT(button_status == pdPASS);


  vTaskStartScheduler();
 8000714:	f001 ff24 	bl	8002560 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0xa4>
 800071a:	bf00      	nop
 800071c:	e000edf0 	.word	0xe000edf0
 8000720:	e0001000 	.word	0xe0001000
 8000724:	20000030 	.word	0x20000030
 8000728:	08005264 	.word	0x08005264
 800072c:	08005278 	.word	0x08005278
 8000730:	08000569 	.word	0x08000569
 8000734:	20000038 	.word	0x20000038
 8000738:	20000034 	.word	0x20000034
 800073c:	08005280 	.word	0x08005280
 8000740:	08005294 	.word	0x08005294
 8000744:	080005c1 	.word	0x080005c1

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fd70 	bl	800523c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a27      	ldr	r2, [pc, #156]	; (8000814 <SystemClock_Config+0xcc>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xd0>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2310      	movs	r3, #16
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b8:	2310      	movs	r3, #16
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80007bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fce0 	bl	8001194 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007da:	f000 f897 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2302      	movs	r3, #2
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80007ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2104      	movs	r1, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 ff41 	bl	8001684 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000808:	f000 f880 	bl	800090c <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3750      	adds	r7, #80	; 0x50
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_GPIO_Init+0xc0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <MX_GPIO_Init+0xc0>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0xc0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xc0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <MX_GPIO_Init+0xc0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xc0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	21c0      	movs	r1, #192	; 0xc0
 800086e:	481c      	ldr	r0, [pc, #112]	; (80008e0 <MX_GPIO_Init+0xc4>)
 8000870:	f000 fc1c 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000874:	2308      	movs	r3, #8
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <MX_GPIO_Init+0xc8>)
 8000888:	f000 fa74 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000890:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_GPIO_Init+0xc8>)
 80008a2:	f000 fa67 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a6:	23c0      	movs	r3, #192	; 0xc0
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <MX_GPIO_Init+0xc4>)
 80008be:	f000 fa59 	bl	8000d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2106      	movs	r1, #6
 80008c6:	200a      	movs	r0, #10
 80008c8:	f000 fa2a 	bl	8000d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f000 fa43 	bl	8000d58 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fa:	f000 f939 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40001000 	.word	0x40001000

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <HAL_MspInit+0x4c>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x4c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000956:	f002 fc2f 	bl	80031b8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	; 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_InitTick+0xe4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a32      	ldr	r2, [pc, #200]	; (8000a4c <HAL_InitTick+0xe4>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <HAL_InitTick+0xe4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000994:	f107 0210 	add.w	r2, r7, #16
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 f83c 	bl	8001a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ae:	f001 f821 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80009b2:	6378      	str	r0, [r7, #52]	; 0x34
 80009b4:	e004      	b.n	80009c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009b6:	f001 f81d 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80009ba:	4603      	mov	r3, r0
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <HAL_InitTick+0xe8>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	0c9b      	lsrs	r3, r3, #18
 80009ca:	3b01      	subs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <HAL_InitTick+0xec>)
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <HAL_InitTick+0xf0>)
 80009d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <HAL_InitTick+0xec>)
 80009d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <HAL_InitTick+0xec>)
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_InitTick+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_InitTick+0xec>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_InitTick+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009f4:	4817      	ldr	r0, [pc, #92]	; (8000a54 <HAL_InitTick+0xec>)
 80009f6:	f001 f843 	bl	8001a80 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11b      	bne.n	8000a40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <HAL_InitTick+0xec>)
 8000a0a:	f001 f893 	bl	8001b34 <HAL_TIM_Base_Start_IT>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d111      	bne.n	8000a40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a1c:	2036      	movs	r0, #54	; 0x36
 8000a1e:	f000 f99b 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d808      	bhi.n	8000a3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	2036      	movs	r0, #54	; 0x36
 8000a2e:	f000 f977 	bl	8000d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_InitTick+0xf4>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e002      	b.n	8000a40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3738      	adds	r7, #56	; 0x38
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	2000003c 	.word	0x2000003c
 8000a58:	40001000 	.word	0x40001000
 8000a5c:	20000004 	.word	0x20000004

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000a90:	2010      	movs	r0, #16
 8000a92:	f000 fb3f 	bl	8001114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  Button_interrupt_Handler();
 8000a96:	f7ff fdbd 	bl	8000614 <Button_interrupt_Handler>

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM6_DAC_IRQHandler+0x10>)
 8000aa6:	f001 f8b5 	bl	8001c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000003c 	.word	0x2000003c

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b02:	f7ff ffd7 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 fb57 	bl	80051b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fdb3 	bl	8000674 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b1c:	08005350 	.word	0x08005350
  ldr r2, =_sbss
 8000b20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b24:	20013424 	.word	0x20013424

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8d8 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff ff04 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff feda 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000084 	.word	0x20000084

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000084 	.word	0x20000084

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e16b      	b.n	8001068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 815a 	bne.w	8001062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80b4 	beq.w	8001062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b60      	ldr	r3, [pc, #384]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a5f      	ldr	r2, [pc, #380]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a5b      	ldr	r2, [pc, #364]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x314>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d02b      	beq.n	8000f9a <HAL_GPIO_Init+0x226>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a51      	ldr	r2, [pc, #324]	; (800108c <HAL_GPIO_Init+0x318>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x222>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <HAL_GPIO_Init+0x31c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x21e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4f      	ldr	r2, [pc, #316]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x216>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4d      	ldr	r2, [pc, #308]	; (800109c <HAL_GPIO_Init+0x328>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x20e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x20a>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e00e      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f7e:	2308      	movs	r3, #8
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f82:	2306      	movs	r3, #6
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <HAL_GPIO_Init+0x334>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_GPIO_Init+0x334>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_GPIO_Init+0x334>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_GPIO_Init+0x334>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f ae90 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40021400 	.word	0x40021400
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40021c00 	.word	0x40021c00
 80010a8:	40013c00 	.word	0x40013c00

080010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f0:	887a      	ldrh	r2, [r7, #2]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	041a      	lsls	r2, r3, #16
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	400b      	ands	r3, r1
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f806 	bl	8001144 <HAL_GPIO_EXTI_Callback>
  }
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_PWR_EnterSLEEPMode+0x34>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_PWR_EnterSLEEPMode+0x34>)
 800116e:	f023 0304 	bic.w	r3, r3, #4
 8001172:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800117a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800117c:	e002      	b.n	8001184 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800117e:	bf40      	sev
    __WFE();
 8001180:	bf20      	wfe
    __WFE();
 8001182:	bf20      	wfe
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e267      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d075      	beq.n	800129e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b2:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d00c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011be:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d112      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ca:	4b82      	ldr	r3, [pc, #520]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d6:	d10b      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d05b      	beq.n	800129c <HAL_RCC_OscConfig+0x108>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d157      	bne.n	800129c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e242      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x74>
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a75      	ldr	r2, [pc, #468]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x98>
 8001212:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6f      	ldr	r2, [pc, #444]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6d      	ldr	r3, [pc, #436]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6c      	ldr	r2, [pc, #432]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 800122c:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a68      	ldr	r2, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b66      	ldr	r3, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fca4 	bl	8000b98 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fca0 	bl	8000b98 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e207      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xc0>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc90 	bl	8000b98 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc8c 	bl	8000b98 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1f3      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0xe8>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1c7      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4937      	ldr	r1, [pc, #220]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fc45 	bl	8000b98 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc41 	bl	8000b98 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1a8      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4925      	ldr	r1, [pc, #148]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc24 	bl	8000b98 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fc20 	bl	8000b98 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e187      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d036      	beq.n	80013ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d016      	beq.n	80013b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_RCC_OscConfig+0x248>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fc04 	bl	8000b98 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fc00 	bl	8000b98 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e167      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x200>
 80013b2:	e01b      	b.n	80013ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_RCC_OscConfig+0x248>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbed 	bl	8000b98 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	e00e      	b.n	80013e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fbe9 	bl	8000b98 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d907      	bls.n	80013e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e150      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	4b88      	ldr	r3, [pc, #544]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ea      	bne.n	80013c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8097 	beq.w	8001528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10f      	bne.n	800142a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a7c      	ldr	r2, [pc, #496]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b77      	ldr	r3, [pc, #476]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d118      	bne.n	8001468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b74      	ldr	r3, [pc, #464]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a73      	ldr	r2, [pc, #460]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff fba9 	bl	8000b98 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144a:	f7ff fba5 	bl	8000b98 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e10c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x2ea>
 8001470:	4b64      	ldr	r3, [pc, #400]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a63      	ldr	r2, [pc, #396]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b05      	cmp	r3, #5
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x30c>
 8001486:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a5e      	ldr	r2, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
 8001492:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a5b      	ldr	r2, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 80014a0:	4b58      	ldr	r3, [pc, #352]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6713      	str	r3, [r2, #112]	; 0x70
 80014ac:	4b55      	ldr	r3, [pc, #340]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a54      	ldr	r2, [pc, #336]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 0304 	bic.w	r3, r3, #4
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d015      	beq.n	80014ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fb6a 	bl	8000b98 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fb66 	bl	8000b98 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0cb      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0ee      	beq.n	80014c8 <HAL_RCC_OscConfig+0x334>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fb54 	bl	8000b98 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff fb50 	bl	8000b98 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0b5      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150a:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ee      	bne.n	80014f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a38      	ldr	r2, [pc, #224]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a1 	beq.w	8001674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b08      	cmp	r3, #8
 800153c:	d05c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d141      	bne.n	80015ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_RCC_OscConfig+0x478>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fb24 	bl	8000b98 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fb20 	bl	8000b98 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e087      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	3b01      	subs	r3, #1
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_OscConfig+0x478>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff faf9 	bl	8000b98 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff faf5 	bl	8000b98 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e05c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x416>
 80015c8:	e054      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_RCC_OscConfig+0x478>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fae2 	bl	8000b98 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fade 	bl	8000b98 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e045      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x444>
 80015f6:	e03d      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e038      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
 800160c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x4ec>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d028      	beq.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d121      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d11a      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001640:	4013      	ands	r3, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	3b01      	subs	r3, #1
 800165a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0cc      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d90c      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a52      	ldr	r2, [pc, #328]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	494d      	ldr	r1, [pc, #308]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d044      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d003      	beq.n	8001742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	2b03      	cmp	r3, #3
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e067      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4934      	ldr	r1, [pc, #208]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff fa10 	bl	8000b98 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff fa0c 	bl	8000b98 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e04f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d20c      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e032      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4916      	ldr	r1, [pc, #88]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	490e      	ldr	r1, [pc, #56]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800180a:	f000 f821 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 800180e:	4602      	mov	r2, r0
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	490a      	ldr	r1, [pc, #40]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	5ccb      	ldrb	r3, [r1, r3]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f89c 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00
 8001840:	40023800 	.word	0x40023800
 8001844:	08005308 	.word	0x08005308
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001854:	b090      	sub	sp, #64	; 0x40
 8001856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
 800185c:	2300      	movs	r3, #0
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d00d      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x40>
 8001874:	2b08      	cmp	r3, #8
 8001876:	f200 80a1 	bhi.w	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x34>
 800187e:	2b04      	cmp	r3, #4
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x3a>
 8001882:	e09b      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001888:	e09b      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800188e:	e098      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	2200      	movs	r2, #0
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	627a      	str	r2, [r7, #36]	; 0x24
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018b8:	2100      	movs	r1, #0
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018bc:	fb03 f201 	mul.w	r2, r3, r1
 80018c0:	2300      	movs	r3, #0
 80018c2:	fb00 f303 	mul.w	r3, r0, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ca:	fba0 1202 	umull	r1, r2, r0, r2
 80018ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018d0:	460a      	mov	r2, r1
 80018d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	4413      	add	r3, r2
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018dc:	2200      	movs	r2, #0
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	61fa      	str	r2, [r7, #28]
 80018e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ea:	f7fe fcbb 	bl	8000264 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4613      	mov	r3, r2
 80018f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f6:	e053      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f8:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	2200      	movs	r2, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	617a      	str	r2, [r7, #20]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800190a:	f04f 0b00 	mov.w	fp, #0
 800190e:	4652      	mov	r2, sl
 8001910:	465b      	mov	r3, fp
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	ebb2 080a 	subs.w	r8, r2, sl
 800192a:	eb63 090b 	sbc.w	r9, r3, fp
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800193a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800193e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001942:	ebb2 0408 	subs.w	r4, r2, r8
 8001946:	eb63 0509 	sbc.w	r5, r3, r9
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	00eb      	lsls	r3, r5, #3
 8001954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001958:	00e2      	lsls	r2, r4, #3
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	eb14 030a 	adds.w	r3, r4, sl
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	eb45 030b 	adc.w	r3, r5, fp
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001976:	4629      	mov	r1, r5
 8001978:	028b      	lsls	r3, r1, #10
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001980:	4621      	mov	r1, r4
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	2200      	movs	r2, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	60fa      	str	r2, [r7, #12]
 8001990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001994:	f7fe fc66 	bl	8000264 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3740      	adds	r7, #64	; 0x40
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	017d7840 	.word	0x017d7840

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f8:	f7ff fff0 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0a9b      	lsrs	r3, r3, #10
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08005318 	.word	0x08005318

08001a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	220f      	movs	r2, #15
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_RCC_GetClockConfig+0x60>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0207 	and.w	r2, r3, #7
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e041      	b.n	8001b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f839 	bl	8001b1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 f9d8 	bl	8001e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d001      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04e      	b.n	8001bea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d022      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b76:	d01d      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d018      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00e      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d111      	bne.n	8001bd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d010      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	e007      	b.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	40014000 	.word	0x40014000
 8001c10:	40001800 	.word	0x40001800

08001c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0202 	mvn.w	r2, #2
 8001c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8ee 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8e0 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8f1 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0204 	mvn.w	r2, #4
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8c4 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8b6 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8c7 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0208 	mvn.w	r2, #8
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2204      	movs	r2, #4
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f89a 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f88c 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f89d 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0210 	mvn.w	r2, #16
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2208      	movs	r2, #8
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f870 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f862 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f873 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0201 	mvn.w	r2, #1
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fda8 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f902 	bl	8001fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b40      	cmp	r3, #64	; 0x40
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f838 	bl	8001e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0220 	mvn.w	r2, #32
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8cc 	bl	8001fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a40      	ldr	r2, [pc, #256]	; (8001f88 <TIM_Base_SetConfig+0x114>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d00f      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <TIM_Base_SetConfig+0x118>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <TIM_Base_SetConfig+0x11c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <TIM_Base_SetConfig+0x120>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <TIM_Base_SetConfig+0x124>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d108      	bne.n	8001ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <TIM_Base_SetConfig+0x114>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d02b      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d027      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <TIM_Base_SetConfig+0x118>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d023      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <TIM_Base_SetConfig+0x11c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <TIM_Base_SetConfig+0x120>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01b      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <TIM_Base_SetConfig+0x124>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d017      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <TIM_Base_SetConfig+0x128>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <TIM_Base_SetConfig+0x12c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00f      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <TIM_Base_SetConfig+0x130>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00b      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <TIM_Base_SetConfig+0x134>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <TIM_Base_SetConfig+0x138>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <TIM_Base_SetConfig+0x13c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <TIM_Base_SetConfig+0x114>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d003      	beq.n	8001f6c <TIM_Base_SetConfig+0xf8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <TIM_Base_SetConfig+0x124>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d103      	bne.n	8001f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	615a      	str	r2, [r3, #20]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40010400 	.word	0x40010400
 8001f9c:	40014000 	.word	0x40014000
 8001fa0:	40014400 	.word	0x40014400
 8001fa4:	40014800 	.word	0x40014800
 8001fa8:	40001800 	.word	0x40001800
 8001fac:	40001c00 	.word	0x40001c00
 8001fb0:	40002000 	.word	0x40002000

08001fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f103 0208 	add.w	r2, r3, #8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f103 0208 	add.w	r2, r3, #8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f103 0208 	add.w	r2, r3, #8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d103      	bne.n	800209e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e00c      	b.n	80020b8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3308      	adds	r3, #8
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e002      	b.n	80020ac <vListInsert+0x2e>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d2f6      	bcs.n	80020a6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	601a      	str	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6892      	ldr	r2, [r2, #8]
 8002106:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	d103      	bne.n	8002124 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af04      	add	r7, sp, #16
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4618      	mov	r0, r3
 800215a:	f001 f9d7 	bl	800350c <pvPortMalloc>
 800215e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00e      	beq.n	8002184 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002166:	2058      	movs	r0, #88	; 0x58
 8002168:	f001 f9d0 	bl	800350c <pvPortMalloc>
 800216c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
 800217a:	e005      	b.n	8002188 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f001 faa5 	bl	80036cc <vPortFree>
 8002182:	e001      	b.n	8002188 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d013      	beq.n	80021b6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	2300      	movs	r3, #0
 8002192:	9303      	str	r3, [sp, #12]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f80e 	bl	80021c6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	f000 f8a2 	bl	80022f4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021b0:	2301      	movs	r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	e002      	b.n	80021bc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021bc:	69bb      	ldr	r3, [r7, #24]
    }
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b088      	sub	sp, #32
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	461a      	mov	r2, r3
 80021de:	21a5      	movs	r1, #165	; 0xa5
 80021e0:	f003 f82c 	bl	800523c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021ee:	3b01      	subs	r3, #1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f023 0307 	bic.w	r3, r3, #7
 80021fc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220c:	f383 8811 	msr	BASEPRI, r3
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	617b      	str	r3, [r7, #20]
    }
 800221a:	bf00      	nop
 800221c:	e7fe      	b.n	800221c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01f      	beq.n	8002264 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	e012      	b.n	8002250 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	7819      	ldrb	r1, [r3, #0]
 8002232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	4413      	add	r3, r2
 8002238:	3334      	adds	r3, #52	; 0x34
 800223a:	460a      	mov	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3301      	adds	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e9      	bls.n	800222a <prvInitialiseNewTask+0x64>
 8002256:	e000      	b.n	800225a <prvInitialiseNewTask+0x94>
            {
                break;
 8002258:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002262:	e003      	b.n	800226c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	2b04      	cmp	r3, #4
 8002270:	d901      	bls.n	8002276 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002272:	2304      	movs	r3, #4
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002280:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	2200      	movs	r2, #0
 8002286:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	3304      	adds	r3, #4
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fec5 	bl	800201c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	3318      	adds	r3, #24
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fec0 	bl	800201c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	f1c3 0205 	rsb	r2, r3, #5
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	3350      	adds	r3, #80	; 0x50
 80022b6:	2204      	movs	r2, #4
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 ffbe 	bl	800523c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	3354      	adds	r3, #84	; 0x54
 80022c4:	2201      	movs	r2, #1
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 ffb7 	bl	800523c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	69b8      	ldr	r0, [r7, #24]
 80022d4:	f000 fe3e 	bl	8002f54 <pxPortInitialiseStack>
 80022d8:	4602      	mov	r2, r0
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022ea:	bf00      	nop
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022f4:	b5b0      	push	{r4, r5, r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022fc:	f000 ffda 	bl	80032b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <prvAddNewTaskToReadyList+0xfc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <prvAddNewTaskToReadyList+0xfc>)
 8002308:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <prvAddNewTaskToReadyList+0x100>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002312:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <prvAddNewTaskToReadyList+0x100>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002318:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <prvAddNewTaskToReadyList+0xfc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d110      	bne.n	8002342 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002320:	f000 fb68 	bl	80029f4 <prvInitialiseTaskLists>
 8002324:	e00d      	b.n	8002342 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <prvAddNewTaskToReadyList+0x104>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <prvAddNewTaskToReadyList+0x100>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	429a      	cmp	r2, r3
 800233a:	d802      	bhi.n	8002342 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800233c:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <prvAddNewTaskToReadyList+0x100>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <prvAddNewTaskToReadyList+0x108>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <prvAddNewTaskToReadyList+0x108>)
 800234a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <prvAddNewTaskToReadyList+0x108>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <prvAddNewTaskToReadyList+0x94>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	f002 fcb3 	bl	8004cc8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	461d      	mov	r5, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461c      	mov	r4, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	1ae3      	subs	r3, r4, r3
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	462b      	mov	r3, r5
 8002384:	f001 fac0 	bl	8003908 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fd20 	bl	8004dd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2201      	movs	r2, #1
 8002396:	409a      	lsls	r2, r3
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <prvAddNewTaskToReadyList+0x10c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <prvAddNewTaskToReadyList+0x10c>)
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4a15      	ldr	r2, [pc, #84]	; (8002404 <prvAddNewTaskToReadyList+0x110>)
 80023b0:	441a      	add	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff fe3c 	bl	8002036 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023be:	f000 ffa9 	bl	8003314 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <prvAddNewTaskToReadyList+0x104>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <prvAddNewTaskToReadyList+0x100>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <prvAddNewTaskToReadyList+0x114>)
 80023da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	20000160 	.word	0x20000160
 80023f4:	20000088 	.word	0x20000088
 80023f8:	2000016c 	.word	0x2000016c
 80023fc:	2000017c 	.word	0x2000017c
 8002400:	20000168 	.word	0x20000168
 8002404:	2000008c 	.word	0x2000008c
 8002408:	e000ed04 	.word	0xe000ed04

0800240c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002414:	f000 ff4e 	bl	80032b4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <vTaskDelete+0x18>
 800241e:	4b46      	ldr	r3, [pc, #280]	; (8002538 <vTaskDelete+0x12c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	e000      	b.n	8002426 <vTaskDelete+0x1a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3304      	adds	r3, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fe5f 	bl	80020f0 <uxListRemove>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d115      	bne.n	8002464 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	493f      	ldr	r1, [pc, #252]	; (800253c <vTaskDelete+0x130>)
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10a      	bne.n	8002464 <vTaskDelete+0x58>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	2201      	movs	r2, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43da      	mvns	r2, r3
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <vTaskDelete+0x134>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4013      	ands	r3, r2
 8002460:	4a37      	ldr	r2, [pc, #220]	; (8002540 <vTaskDelete+0x134>)
 8002462:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3318      	adds	r3, #24
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fe3d 	bl	80020f0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <vTaskDelete+0x138>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	4a31      	ldr	r2, [pc, #196]	; (8002544 <vTaskDelete+0x138>)
 800247e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <vTaskDelete+0x12c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	429a      	cmp	r2, r3
 8002488:	d118      	bne.n	80024bc <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	4619      	mov	r1, r3
 8002490:	482d      	ldr	r0, [pc, #180]	; (8002548 <vTaskDelete+0x13c>)
 8002492:	f7ff fdd0 	bl	8002036 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <vTaskDelete+0x140>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <vTaskDelete+0x140>)
 800249e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fd36 	bl	8004f14 <SEGGER_SYSVIEW_ShrinkId>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4619      	mov	r1, r3
 80024ac:	2022      	movs	r0, #34	; 0x22
 80024ae:	f001 fefb 	bl	80042a8 <SEGGER_SYSVIEW_RecordU32>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fa8f 	bl	80039d8 <SYSVIEW_DeleteTask>
 80024ba:	e016      	b.n	80024ea <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <vTaskDelete+0x144>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <vTaskDelete+0x144>)
 80024c4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 fd23 	bl	8004f14 <SEGGER_SYSVIEW_ShrinkId>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4619      	mov	r1, r3
 80024d2:	2022      	movs	r0, #34	; 0x22
 80024d4:	f001 fee8 	bl	80042a8 <SEGGER_SYSVIEW_RecordU32>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 fa7c 	bl	80039d8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 faf5 	bl	8002ad0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80024e6:	f000 fb03 	bl	8002af0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80024ea:	f000 ff13 	bl	8003314 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <vTaskDelete+0x148>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01b      	beq.n	800252e <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <vTaskDelete+0x12c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d116      	bne.n	800252e <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <vTaskDelete+0x14c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <vTaskDelete+0x112>
        __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	60bb      	str	r3, [r7, #8]
    }
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <vTaskDelete+0x150>)
 8002520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000088 	.word	0x20000088
 800253c:	2000008c 	.word	0x2000008c
 8002540:	20000168 	.word	0x20000168
 8002544:	2000017c 	.word	0x2000017c
 8002548:	20000134 	.word	0x20000134
 800254c:	20000148 	.word	0x20000148
 8002550:	20000160 	.word	0x20000160
 8002554:	2000016c 	.word	0x2000016c
 8002558:	20000188 	.word	0x20000188
 800255c:	e000ed04 	.word	0xe000ed04

08002560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(prvIdleTask,
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <vTaskStartScheduler+0x98>)
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2300      	movs	r3, #0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	2282      	movs	r2, #130	; 0x82
 8002572:	4922      	ldr	r1, [pc, #136]	; (80025fc <vTaskStartScheduler+0x9c>)
 8002574:	4822      	ldr	r0, [pc, #136]	; (8002600 <vTaskStartScheduler+0xa0>)
 8002576:	f7ff fde5 	bl	8002144 <xTaskCreate>
 800257a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d124      	bne.n	80025cc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	60bb      	str	r3, [r7, #8]
    }
 8002594:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <vTaskStartScheduler+0xa4>)
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <vTaskStartScheduler+0xa8>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <vTaskStartScheduler+0xac>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <vTaskStartScheduler+0xb0>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <vTaskStartScheduler+0x98>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d102      	bne.n	80025bc <vTaskStartScheduler+0x5c>
 80025b6:	f002 fb6b 	bl	8004c90 <SEGGER_SYSVIEW_OnIdle>
 80025ba:	e004      	b.n	80025c6 <vTaskStartScheduler+0x66>
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <vTaskStartScheduler+0xb0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fbc3 	bl	8004d4c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025c6:	f000 fd55 	bl	8003074 <xPortStartScheduler>
 80025ca:	e00e      	b.n	80025ea <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d10a      	bne.n	80025ea <vTaskStartScheduler+0x8a>
        __asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	607b      	str	r3, [r7, #4]
    }
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <vTaskStartScheduler+0xb4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000184 	.word	0x20000184
 80025fc:	0800529c 	.word	0x0800529c
 8002600:	080029c1 	.word	0x080029c1
 8002604:	20000180 	.word	0x20000180
 8002608:	2000016c 	.word	0x2000016c
 800260c:	20000164 	.word	0x20000164
 8002610:	20000088 	.word	0x20000088
 8002614:	2000000c 	.word	0x2000000c

08002618 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <vTaskSuspendAll+0x18>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a03      	ldr	r2, [pc, #12]	; (8002630 <vTaskSuspendAll+0x18>)
 8002624:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	20000188 	.word	0x20000188

08002634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <xTaskResumeAll+0x11c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <xTaskResumeAll+0x2c>
        __asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	603b      	str	r3, [r7, #0]
    }
 800265c:	bf00      	nop
 800265e:	e7fe      	b.n	800265e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002660:	f000 fe28 	bl	80032b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <xTaskResumeAll+0x11c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3b01      	subs	r3, #1
 800266a:	4a39      	ldr	r2, [pc, #228]	; (8002750 <xTaskResumeAll+0x11c>)
 800266c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <xTaskResumeAll+0x11c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d165      	bne.n	8002742 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <xTaskResumeAll+0x120>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d061      	beq.n	8002742 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800267e:	e032      	b.n	80026e6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <xTaskResumeAll+0x124>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3318      	adds	r3, #24
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fd2f 	bl	80020f0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3304      	adds	r3, #4
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fd2a 	bl	80020f0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 fb96 	bl	8004dd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <xTaskResumeAll+0x128>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	4a2a      	ldr	r2, [pc, #168]	; (800275c <xTaskResumeAll+0x128>)
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <xTaskResumeAll+0x12c>)
 80026c4:	441a      	add	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3304      	adds	r3, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7ff fcb2 	bl	8002036 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <xTaskResumeAll+0x130>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	429a      	cmp	r2, r3
 80026de:	d302      	bcc.n	80026e6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80026e0:	4b21      	ldr	r3, [pc, #132]	; (8002768 <xTaskResumeAll+0x134>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <xTaskResumeAll+0x124>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1c8      	bne.n	8002680 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026f4:	f000 f9fc 	bl	8002af0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <xTaskResumeAll+0x138>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002704:	f000 f836 	bl	8002774 <xTaskIncrementTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <xTaskResumeAll+0x134>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f1      	bne.n	8002704 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <xTaskResumeAll+0x138>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <xTaskResumeAll+0x134>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800272e:	2301      	movs	r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <xTaskResumeAll+0x13c>)
 8002734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002742:	f000 fde7 	bl	8003314 <vPortExitCritical>

    return xAlreadyYielded;
 8002746:	68bb      	ldr	r3, [r7, #8]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000188 	.word	0x20000188
 8002754:	20000160 	.word	0x20000160
 8002758:	20000120 	.word	0x20000120
 800275c:	20000168 	.word	0x20000168
 8002760:	2000008c 	.word	0x2000008c
 8002764:	20000088 	.word	0x20000088
 8002768:	20000174 	.word	0x20000174
 800276c:	20000170 	.word	0x20000170
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <xTaskIncrementTick+0x14c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 8092 	bne.w	80028ac <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002788:	4b4e      	ldr	r3, [pc, #312]	; (80028c4 <xTaskIncrementTick+0x150>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002790:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <xTaskIncrementTick+0x150>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d120      	bne.n	80027de <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800279c:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <xTaskIncrementTick+0x154>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <xTaskIncrementTick+0x48>
        __asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	603b      	str	r3, [r7, #0]
    }
 80027b8:	bf00      	nop
 80027ba:	e7fe      	b.n	80027ba <xTaskIncrementTick+0x46>
 80027bc:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <xTaskIncrementTick+0x154>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <xTaskIncrementTick+0x158>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a40      	ldr	r2, [pc, #256]	; (80028c8 <xTaskIncrementTick+0x154>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <xTaskIncrementTick+0x158>)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <xTaskIncrementTick+0x15c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <xTaskIncrementTick+0x15c>)
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	f000 f989 	bl	8002af0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <xTaskIncrementTick+0x160>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d34c      	bcc.n	8002882 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <xTaskIncrementTick+0x154>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027f2:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <xTaskIncrementTick+0x160>)
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	601a      	str	r2, [r3, #0]
                    break;
 80027fa:	e042      	b.n	8002882 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <xTaskIncrementTick+0x154>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	d203      	bcs.n	800281c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002814:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <xTaskIncrementTick+0x160>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800281a:	e032      	b.n	8002882 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	3304      	adds	r3, #4
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fc65 	bl	80020f0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	3318      	adds	r3, #24
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fc5c 	bl	80020f0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fac8 	bl	8004dd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2201      	movs	r2, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <xTaskIncrementTick+0x164>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <xTaskIncrementTick+0x164>)
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <xTaskIncrementTick+0x168>)
 8002860:	441a      	add	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3304      	adds	r3, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f7ff fbe4 	bl	8002036 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <xTaskIncrementTick+0x16c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	429a      	cmp	r2, r3
 800287a:	d3b5      	bcc.n	80027e8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800287c:	2301      	movs	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002880:	e7b2      	b.n	80027e8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <xTaskIncrementTick+0x16c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	4914      	ldr	r1, [pc, #80]	; (80028dc <xTaskIncrementTick+0x168>)
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d901      	bls.n	800289e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800289a:	2301      	movs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <xTaskIncrementTick+0x170>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e004      	b.n	80028b6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <xTaskIncrementTick+0x174>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <xTaskIncrementTick+0x174>)
 80028b4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028b6:	697b      	ldr	r3, [r7, #20]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000188 	.word	0x20000188
 80028c4:	20000164 	.word	0x20000164
 80028c8:	20000118 	.word	0x20000118
 80028cc:	2000011c 	.word	0x2000011c
 80028d0:	20000178 	.word	0x20000178
 80028d4:	20000180 	.word	0x20000180
 80028d8:	20000168 	.word	0x20000168
 80028dc:	2000008c 	.word	0x2000008c
 80028e0:	20000088 	.word	0x20000088
 80028e4:	20000174 	.word	0x20000174
 80028e8:	20000170 	.word	0x20000170

080028ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <vTaskSwitchContext+0xbc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80028fa:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <vTaskSwitchContext+0xc0>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002900:	e04d      	b.n	800299e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <vTaskSwitchContext+0xc0>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <vTaskSwitchContext+0xc4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	f1c3 031f 	rsb	r3, r3, #31
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4925      	ldr	r1, [pc, #148]	; (80029b4 <vTaskSwitchContext+0xc8>)
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	607b      	str	r3, [r7, #4]
    }
 8002944:	bf00      	nop
 8002946:	e7fe      	b.n	8002946 <vTaskSwitchContext+0x5a>
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <vTaskSwitchContext+0xc8>)
 8002954:	4413      	add	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	3308      	adds	r3, #8
 800296a:	429a      	cmp	r2, r3
 800296c:	d104      	bne.n	8002978 <vTaskSwitchContext+0x8c>
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <vTaskSwitchContext+0xcc>)
 8002980:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <vTaskSwitchContext+0xcc>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <vTaskSwitchContext+0xd0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d102      	bne.n	8002994 <vTaskSwitchContext+0xa8>
 800298e:	f002 f97f 	bl	8004c90 <SEGGER_SYSVIEW_OnIdle>
}
 8002992:	e004      	b.n	800299e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <vTaskSwitchContext+0xcc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 f9d7 	bl	8004d4c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000188 	.word	0x20000188
 80029ac:	20000174 	.word	0x20000174
 80029b0:	20000168 	.word	0x20000168
 80029b4:	2000008c 	.word	0x2000008c
 80029b8:	20000088 	.word	0x20000088
 80029bc:	20000184 	.word	0x20000184

080029c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029c8:	f000 f854 	bl	8002a74 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <prvIdleTask+0x2c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d907      	bls.n	80029e4 <prvIdleTask+0x24>
                {
                    taskYIELD();
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <prvIdleTask+0x30>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 80029e4:	f7fd fe3e 	bl	8000664 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80029e8:	e7ee      	b.n	80029c8 <prvIdleTask+0x8>
 80029ea:	bf00      	nop
 80029ec:	2000008c 	.word	0x2000008c
 80029f0:	e000ed04 	.word	0xe000ed04

080029f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	e00c      	b.n	8002a1a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <prvInitialiseTaskLists+0x60>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fae4 	bl	8001fdc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3301      	adds	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d9ef      	bls.n	8002a00 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <prvInitialiseTaskLists+0x64>)
 8002a22:	f7ff fadb 	bl	8001fdc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a26:	480d      	ldr	r0, [pc, #52]	; (8002a5c <prvInitialiseTaskLists+0x68>)
 8002a28:	f7ff fad8 	bl	8001fdc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a2c:	480c      	ldr	r0, [pc, #48]	; (8002a60 <prvInitialiseTaskLists+0x6c>)
 8002a2e:	f7ff fad5 	bl	8001fdc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a32:	480c      	ldr	r0, [pc, #48]	; (8002a64 <prvInitialiseTaskLists+0x70>)
 8002a34:	f7ff fad2 	bl	8001fdc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a38:	480b      	ldr	r0, [pc, #44]	; (8002a68 <prvInitialiseTaskLists+0x74>)
 8002a3a:	f7ff facf 	bl	8001fdc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <prvInitialiseTaskLists+0x78>)
 8002a40:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <prvInitialiseTaskLists+0x64>)
 8002a42:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <prvInitialiseTaskLists+0x7c>)
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <prvInitialiseTaskLists+0x68>)
 8002a48:	601a      	str	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000008c 	.word	0x2000008c
 8002a58:	200000f0 	.word	0x200000f0
 8002a5c:	20000104 	.word	0x20000104
 8002a60:	20000120 	.word	0x20000120
 8002a64:	20000134 	.word	0x20000134
 8002a68:	2000014c 	.word	0x2000014c
 8002a6c:	20000118 	.word	0x20000118
 8002a70:	2000011c 	.word	0x2000011c

08002a74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a7a:	e019      	b.n	8002ab0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a7c:	f000 fc1a 	bl	80032b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <prvCheckTasksWaitingTermination+0x50>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fb2f 	bl	80020f0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <prvCheckTasksWaitingTermination+0x54>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <prvCheckTasksWaitingTermination+0x54>)
 8002a9a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <prvCheckTasksWaitingTermination+0x58>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <prvCheckTasksWaitingTermination+0x58>)
 8002aa4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002aa6:	f000 fc35 	bl	8003314 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f810 	bl	8002ad0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <prvCheckTasksWaitingTermination+0x58>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e1      	bne.n	8002a7c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000134 	.word	0x20000134
 8002ac8:	20000160 	.word	0x20000160
 8002acc:	20000148 	.word	0x20000148

08002ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fdf5 	bl	80036cc <vPortFree>
                vPortFree( pxTCB );
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fdf2 	bl	80036cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <prvResetNextTaskUnblockTime+0x30>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <prvResetNextTaskUnblockTime+0x34>)
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b06:	e005      	b.n	8002b14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <prvResetNextTaskUnblockTime+0x30>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <prvResetNextTaskUnblockTime+0x34>)
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000118 	.word	0x20000118
 8002b24:	20000180 	.word	0x20000180

08002b28 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	613b      	str	r3, [r7, #16]
    }
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002b52:	f000 fbaf 	bl	80032b4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <xTaskGenericNotifyWait+0x108>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3354      	adds	r3, #84	; 0x54
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d022      	beq.n	8002bae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002b68:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <xTaskGenericNotifyWait+0x108>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	3214      	adds	r2, #20
 8002b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	43d2      	mvns	r2, r2
 8002b78:	4011      	ands	r1, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	3214      	adds	r2, #20
 8002b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002b82:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <xTaskGenericNotifyWait+0x108>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	3354      	adds	r3, #84	; 0x54
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b96:	2101      	movs	r1, #1
 8002b98:	6a38      	ldr	r0, [r7, #32]
 8002b9a:	f000 f963 	bl	8002e64 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <xTaskGenericNotifyWait+0x10c>)
 8002ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002bae:	f000 fbb1 	bl	8003314 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002bb2:	f000 fb7f 	bl	80032b4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	2040      	movs	r0, #64	; 0x40
 8002bc4:	f001 fc06 	bl	80043d4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <xTaskGenericNotifyWait+0x108>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	3214      	adds	r2, #20
 8002bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <xTaskGenericNotifyWait+0x108>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	3354      	adds	r3, #84	; 0x54
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d002      	beq.n	8002bf6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e00e      	b.n	8002c14 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <xTaskGenericNotifyWait+0x108>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	3214      	adds	r2, #20
 8002bfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	43d2      	mvns	r2, r2
 8002c06:	4011      	ands	r1, r2
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	3214      	adds	r2, #20
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002c10:	2301      	movs	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <xTaskGenericNotifyWait+0x108>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3354      	adds	r3, #84	; 0x54
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002c22:	f000 fb77 	bl	8003314 <vPortExitCritical>

        return xReturn;
 8002c26:	697b      	ldr	r3, [r7, #20]
    }
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000088 	.word	0x20000088
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	; 0x48
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002c46:	2301      	movs	r3, #1
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c82:	f000 fc03 	bl	800348c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8002ca0:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	3214      	adds	r2, #20
 8002cb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3354      	adds	r3, #84	; 0x54
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3354      	adds	r3, #84	; 0x54
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d83b      	bhi.n	8002d52 <xTaskGenericNotifyFromISR+0x11a>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <xTaskGenericNotifyFromISR+0xa8>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002d71 	.word	0x08002d71
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d11 	.word	0x08002d11
 8002cec:	08002d29 	.word	0x08002d29
 8002cf0:	08002d37 	.word	0x08002d37
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	3214      	adds	r2, #20
 8002cfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	3214      	adds	r2, #20
 8002d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002d0e:	e032      	b.n	8002d76 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	3214      	adds	r2, #20
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	3214      	adds	r2, #20
 8002d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002d26:	e026      	b.n	8002d76 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	3214      	adds	r2, #20
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002d34:	e01f      	b.n	8002d76 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002d36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d006      	beq.n	8002d4c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	3214      	adds	r2, #20
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002d4a:	e014      	b.n	8002d76 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002d50:	e011      	b.n	8002d76 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <xTaskGenericNotifyFromISR+0x210>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	61fb      	str	r3, [r7, #28]
    }
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002d70:	bf00      	nop
 8002d72:	e000      	b.n	8002d76 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8002d74:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 f8cb 	bl	8004f14 <SEGGER_SYSVIEW_ShrinkId>
 8002d7e:	78f9      	ldrb	r1, [r7, #3]
 8002d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d84:	9201      	str	r2, [sp, #4]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4601      	mov	r1, r0
 8002d8e:	203f      	movs	r0, #63	; 0x3f
 8002d90:	f001 fbb2 	bl	80044f8 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002d94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d149      	bne.n	8002e30 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	61bb      	str	r3, [r7, #24]
    }
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <xTaskGenericNotifyFromISR+0x214>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d120      	bne.n	8002e04 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f992 	bl	80020f0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 fffe 	bl	8004dd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <xTaskGenericNotifyFromISR+0x218>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <xTaskGenericNotifyFromISR+0x218>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <xTaskGenericNotifyFromISR+0x21c>)
 8002df4:	441a      	add	r2, r3
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7ff f91a 	bl	8002036 <vListInsertEnd>
 8002e02:	e005      	b.n	8002e10 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	3318      	adds	r3, #24
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4813      	ldr	r0, [pc, #76]	; (8002e58 <xTaskGenericNotifyFromISR+0x220>)
 8002e0c:	f7ff f913 	bl	8002036 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <xTaskGenericNotifyFromISR+0x224>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d908      	bls.n	8002e30 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <xTaskGenericNotifyFromISR+0x228>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e3a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3740      	adds	r7, #64	; 0x40
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000164 	.word	0x20000164
 8002e4c:	20000188 	.word	0x20000188
 8002e50:	20000168 	.word	0x20000168
 8002e54:	2000008c 	.word	0x2000008c
 8002e58:	20000120 	.word	0x20000120
 8002e5c:	20000088 	.word	0x20000088
 8002e60:	20000174 	.word	0x20000174

08002e64 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e6e:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f938 	bl	80020f0 <uxListRemove>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e86:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d110      	bne.n	8002ec8 <prvAddCurrentTaskToDelayedList+0x64>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	211b      	movs	r1, #27
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 ffce 	bl	8004e54 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4820      	ldr	r0, [pc, #128]	; (8002f44 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002ec2:	f7ff f8b8 	bl	8002036 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ec6:	e032      	b.n	8002f2e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d20f      	bcs.n	8002f00 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 ffb4 	bl	8004e54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f7ff f8c0 	bl	800207e <vListInsert>
}
 8002efe:	e016      	b.n	8002f2e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2104      	movs	r1, #4
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 ffa4 	bl	8004e54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7ff f8b0 	bl	800207e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d202      	bcs.n	8002f2e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002f28:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000164 	.word	0x20000164
 8002f3c:	20000088 	.word	0x20000088
 8002f40:	20000168 	.word	0x20000168
 8002f44:	2000014c 	.word	0x2000014c
 8002f48:	2000011c 	.word	0x2000011c
 8002f4c:	20000118 	.word	0x20000118
 8002f50:	20000180 	.word	0x20000180

08002f54 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3b04      	subs	r3, #4
 8002f64:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3b04      	subs	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f023 0201 	bic.w	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3b04      	subs	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f84:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <pxPortInitialiseStack+0x64>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b14      	subs	r3, #20
 8002f8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3b04      	subs	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f06f 0202 	mvn.w	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3b20      	subs	r3, #32
 8002fa8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002faa:	68fb      	ldr	r3, [r7, #12]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	08002fbd 	.word	0x08002fbd

08002fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <prvTaskExitError+0x54>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d00a      	beq.n	8002fe6 <prvTaskExitError+0x2a>
        __asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	60fb      	str	r3, [r7, #12]
    }
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <prvTaskExitError+0x28>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	60bb      	str	r3, [r7, #8]
    }
 8002ff8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ffa:	bf00      	nop
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0fc      	beq.n	8002ffc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	20000010 	.word	0x20000010
	...

08003020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <pxCurrentTCBConst2>)
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	6808      	ldr	r0, [r1, #0]
 8003026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302a:	f380 8809 	msr	PSP, r0
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f380 8811 	msr	BASEPRI, r0
 800303a:	4770      	bx	lr
 800303c:	f3af 8000 	nop.w

08003040 <pxCurrentTCBConst2>:
 8003040:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop

08003048 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003048:	4808      	ldr	r0, [pc, #32]	; (800306c <prvPortStartFirstTask+0x24>)
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	f380 8808 	msr	MSP, r0
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f380 8814 	msr	CONTROL, r0
 800305a:	b662      	cpsie	i
 800305c:	b661      	cpsie	f
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	df00      	svc	0
 8003068:	bf00      	nop
 800306a:	0000      	.short	0x0000
 800306c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop

08003074 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800307a:	4b46      	ldr	r3, [pc, #280]	; (8003194 <xPortStartScheduler+0x120>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a46      	ldr	r2, [pc, #280]	; (8003198 <xPortStartScheduler+0x124>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10a      	bne.n	800309a <xPortStartScheduler+0x26>
        __asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	613b      	str	r3, [r7, #16]
    }
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800309a:	4b3e      	ldr	r3, [pc, #248]	; (8003194 <xPortStartScheduler+0x120>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3f      	ldr	r2, [pc, #252]	; (800319c <xPortStartScheduler+0x128>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10a      	bne.n	80030ba <xPortStartScheduler+0x46>
        __asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	60fb      	str	r3, [r7, #12]
    }
 80030b6:	bf00      	nop
 80030b8:	e7fe      	b.n	80030b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <xPortStartScheduler+0x12c>)
 80030bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	22ff      	movs	r2, #255	; 0xff
 80030ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <xPortStartScheduler+0x130>)
 80030e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <xPortStartScheduler+0x134>)
 80030e4:	2207      	movs	r2, #7
 80030e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030e8:	e009      	b.n	80030fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80030ea:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <xPortStartScheduler+0x134>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <xPortStartScheduler+0x134>)
 80030f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d0ef      	beq.n	80030ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800310a:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <xPortStartScheduler+0x134>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00a      	beq.n	800312c <xPortStartScheduler+0xb8>
        __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60bb      	str	r3, [r7, #8]
    }
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <xPortStartScheduler+0x134>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <xPortStartScheduler+0x134>)
 8003134:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003136:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <xPortStartScheduler+0x134>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <xPortStartScheduler+0x134>)
 8003140:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <xPortStartScheduler+0x138>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <xPortStartScheduler+0x138>)
 8003150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003154:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <xPortStartScheduler+0x138>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <xPortStartScheduler+0x138>)
 800315c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003160:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003162:	f000 f963 	bl	800342c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <xPortStartScheduler+0x13c>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800316c:	f000 f982 	bl	8003474 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <xPortStartScheduler+0x140>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <xPortStartScheduler+0x140>)
 8003176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800317a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800317c:	f7ff ff64 	bl	8003048 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003180:	f7ff fbb4 	bl	80028ec <vTaskSwitchContext>
    prvTaskExitError();
 8003184:	f7ff ff1a 	bl	8002fbc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	e000ed00 	.word	0xe000ed00
 8003198:	410fc271 	.word	0x410fc271
 800319c:	410fc270 	.word	0x410fc270
 80031a0:	e000e400 	.word	0xe000e400
 80031a4:	2000018c 	.word	0x2000018c
 80031a8:	20000190 	.word	0x20000190
 80031ac:	e000ed20 	.word	0xe000ed20
 80031b0:	20000010 	.word	0x20000010
 80031b4:	e000ef34 	.word	0xe000ef34

080031b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <vInitPrioGroupValue+0xe4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <vInitPrioGroupValue+0xe8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10a      	bne.n	80031de <vInitPrioGroupValue+0x26>
        __asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	613b      	str	r3, [r7, #16]
    }
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031de:	4b2f      	ldr	r3, [pc, #188]	; (800329c <vInitPrioGroupValue+0xe4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a30      	ldr	r2, [pc, #192]	; (80032a4 <vInitPrioGroupValue+0xec>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10a      	bne.n	80031fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	60fb      	str	r3, [r7, #12]
    }
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <vInitPrioGroupValue+0xf0>)
 8003200:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	22ff      	movs	r2, #255	; 0xff
 800320e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <vInitPrioGroupValue+0xf4>)
 8003224:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 8003228:	2207      	movs	r2, #7
 800322a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800322c:	e009      	b.n	8003242 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3b01      	subs	r3, #1
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 8003236:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d0ef      	beq.n	800322e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1c3 0307 	rsb	r3, r3, #7
 8003256:	2b04      	cmp	r3, #4
 8003258:	d00a      	beq.n	8003270 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	60bb      	str	r3, [r7, #8]
    }
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 8003278:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <vInitPrioGroupValue+0xf8>)
 8003284:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000ed00 	.word	0xe000ed00
 80032a0:	410fc271 	.word	0x410fc271
 80032a4:	410fc270 	.word	0x410fc270
 80032a8:	e000e400 	.word	0xe000e400
 80032ac:	2000018c 	.word	0x2000018c
 80032b0:	20000190 	.word	0x20000190

080032b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
        __asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	607b      	str	r3, [r7, #4]
    }
 80032cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <vPortEnterCritical+0x58>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	4a0d      	ldr	r2, [pc, #52]	; (800330c <vPortEnterCritical+0x58>)
 80032d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <vPortEnterCritical+0x58>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10f      	bne.n	8003300 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <vPortEnterCritical+0x5c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <vPortEnterCritical+0x4c>
        __asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	603b      	str	r3, [r7, #0]
    }
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <vPortEnterCritical+0x4a>
    }
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	20000010 	.word	0x20000010
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <vPortExitCritical+0x50>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <vPortExitCritical+0x24>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	607b      	str	r3, [r7, #4]
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <vPortExitCritical+0x50>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	4a09      	ldr	r2, [pc, #36]	; (8003364 <vPortExitCritical+0x50>)
 8003340:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <vPortExitCritical+0x50>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d105      	bne.n	8003356 <vPortExitCritical+0x42>
 800334a:	2300      	movs	r3, #0
 800334c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f383 8811 	msr	BASEPRI, r3
    }
 8003354:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000010 	.word	0x20000010
	...

08003370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003370:	f3ef 8009 	mrs	r0, PSP
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <pxCurrentTCBConst>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	f01e 0f10 	tst.w	lr, #16
 8003380:	bf08      	it	eq
 8003382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338a:	6010      	str	r0, [r2, #0]
 800338c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003394:	f380 8811 	msr	BASEPRI, r0
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f7ff faa4 	bl	80028ec <vTaskSwitchContext>
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f380 8811 	msr	BASEPRI, r0
 80033ac:	bc09      	pop	{r0, r3}
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	6808      	ldr	r0, [r1, #0]
 80033b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b6:	f01e 0f10 	tst.w	lr, #16
 80033ba:	bf08      	it	eq
 80033bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033c0:	f380 8809 	msr	PSP, r0
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	f3af 8000 	nop.w

080033d0 <pxCurrentTCBConst>:
 80033d0:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
        __asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	607b      	str	r3, [r7, #4]
    }
 80033f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80033f2:	f001 fbd3 	bl	8004b9c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033f6:	f7ff f9bd 	bl	8002774 <xTaskIncrementTick>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003400:	f001 fc2a 	bl	8004c58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <SysTick_Handler+0x50>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e001      	b.n	8003412 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800340e:	f001 fc07 	bl	8004c20 <SEGGER_SYSVIEW_RecordExitISR>
 8003412:	2300      	movs	r3, #0
 8003414:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f383 8811 	msr	BASEPRI, r3
    }
 800341c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <vPortSetupTimerInterrupt+0x34>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <vPortSetupTimerInterrupt+0x38>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <vPortSetupTimerInterrupt+0x3c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <vPortSetupTimerInterrupt+0x40>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	4a09      	ldr	r2, [pc, #36]	; (8003470 <vPortSetupTimerInterrupt+0x44>)
 800344a:	3b01      	subs	r3, #1
 800344c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <vPortSetupTimerInterrupt+0x34>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010
 8003464:	e000e018 	.word	0xe000e018
 8003468:	20000000 	.word	0x20000000
 800346c:	10624dd3 	.word	0x10624dd3
 8003470:	e000e014 	.word	0xe000e014

08003474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003484 <vPortEnableVFP+0x10>
 8003478:	6801      	ldr	r1, [r0, #0]
 800347a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800347e:	6001      	str	r1, [r0, #0]
 8003480:	4770      	bx	lr
 8003482:	0000      	.short	0x0000
 8003484:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop

0800348c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	d914      	bls.n	80034c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <vPortValidateInterruptPriority+0x70>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <vPortValidateInterruptPriority+0x74>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	7afa      	ldrb	r2, [r7, #11]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20a      	bcs.n	80034c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	607b      	str	r3, [r7, #4]
    }
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <vPortValidateInterruptPriority+0x78>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <vPortValidateInterruptPriority+0x7c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d90a      	bls.n	80034ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	603b      	str	r3, [r7, #0]
    }
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <vPortValidateInterruptPriority+0x60>
    }
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000e3f0 	.word	0xe000e3f0
 8003500:	2000018c 	.word	0x2000018c
 8003504:	e000ed0c 	.word	0xe000ed0c
 8003508:	20000190 	.word	0x20000190

0800350c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003518:	f7ff f87e 	bl	8002618 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800351c:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <pvPortMalloc+0x1a8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003524:	f000 f934 	bl	8003790 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003528:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <pvPortMalloc+0x1ac>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 80a7 	bne.w	8003684 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02d      	beq.n	8003598 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800353c:	2208      	movs	r2, #8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	d227      	bcs.n	8003598 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003548:	2208      	movs	r2, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	2b00      	cmp	r3, #0
 8003558:	d021      	beq.n	800359e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f023 0307 	bic.w	r3, r3, #7
 8003560:	3308      	adds	r3, #8
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d214      	bcs.n	8003592 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f023 0307 	bic.w	r3, r3, #7
 800356e:	3308      	adds	r3, #8
 8003570:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <pvPortMalloc+0x92>
        __asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	617b      	str	r3, [r7, #20]
    }
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003596:	e002      	b.n	800359e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	e000      	b.n	80035a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800359e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d06e      	beq.n	8003684 <pvPortMalloc+0x178>
 80035a6:	4b45      	ldr	r3, [pc, #276]	; (80036bc <pvPortMalloc+0x1b0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d869      	bhi.n	8003684 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80035b0:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <pvPortMalloc+0x1b4>)
 80035b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <pvPortMalloc+0x1b4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035ba:	e004      	b.n	80035c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d903      	bls.n	80035d8 <pvPortMalloc+0xcc>
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f1      	bne.n	80035bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <pvPortMalloc+0x1a8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	429a      	cmp	r2, r3
 80035e0:	d050      	beq.n	8003684 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2208      	movs	r2, #8
 80035e8:	4413      	add	r3, r2
 80035ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad2      	subs	r2, r2, r3
 80035fc:	2308      	movs	r3, #8
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	429a      	cmp	r2, r3
 8003602:	d91f      	bls.n	8003644 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <pvPortMalloc+0x120>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	613b      	str	r3, [r7, #16]
    }
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	1ad2      	subs	r2, r2, r3
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800363e:	69b8      	ldr	r0, [r7, #24]
 8003640:	f000 f908 	bl	8003854 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <pvPortMalloc+0x1b0>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <pvPortMalloc+0x1b0>)
 8003650:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <pvPortMalloc+0x1b0>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <pvPortMalloc+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d203      	bcs.n	8003666 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <pvPortMalloc+0x1b0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <pvPortMalloc+0x1b8>)
 8003664:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <pvPortMalloc+0x1ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	431a      	orrs	r2, r3
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <pvPortMalloc+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <pvPortMalloc+0x1bc>)
 8003682:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003684:	f7fe ffd6 	bl	8002634 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <pvPortMalloc+0x19c>
        __asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60fb      	str	r3, [r7, #12]
    }
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80036a8:	69fb      	ldr	r3, [r7, #28]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3728      	adds	r7, #40	; 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20012d9c 	.word	0x20012d9c
 80036b8:	20012db0 	.word	0x20012db0
 80036bc:	20012da0 	.word	0x20012da0
 80036c0:	20012d94 	.word	0x20012d94
 80036c4:	20012da4 	.word	0x20012da4
 80036c8:	20012da8 	.word	0x20012da8

080036cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d04d      	beq.n	800377a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036de:	2308      	movs	r3, #8
 80036e0:	425b      	negs	r3, r3
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4413      	add	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <vPortFree+0xb8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <vPortFree+0x44>
        __asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60fb      	str	r3, [r7, #12]
    }
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <vPortFree+0x62>
        __asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	60bb      	str	r3, [r7, #8]
    }
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <vPortFree+0xb8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01e      	beq.n	800377a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11a      	bne.n	800377a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <vPortFree+0xb8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003754:	f7fe ff60 	bl	8002618 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <vPortFree+0xbc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4413      	add	r3, r2
 8003762:	4a09      	ldr	r2, [pc, #36]	; (8003788 <vPortFree+0xbc>)
 8003764:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003766:	6938      	ldr	r0, [r7, #16]
 8003768:	f000 f874 	bl	8003854 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <vPortFree+0xc0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a06      	ldr	r2, [pc, #24]	; (800378c <vPortFree+0xc0>)
 8003774:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003776:	f7fe ff5d 	bl	8002634 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20012db0 	.word	0x20012db0
 8003788:	20012da0 	.word	0x20012da0
 800378c:	20012dac 	.word	0x20012dac

08003790 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003796:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800379a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <prvHeapInit+0xac>)
 800379e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00c      	beq.n	80037c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3307      	adds	r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <prvHeapInit+0xac>)
 80037c0:	4413      	add	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <prvHeapInit+0xb0>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <prvHeapInit+0xb0>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4413      	add	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80037dc:	2208      	movs	r2, #8
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0307 	bic.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <prvHeapInit+0xb4>)
 80037f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <prvHeapInit+0xb4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <prvHeapInit+0xb4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <prvHeapInit+0xb4>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <prvHeapInit+0xb8>)
 800381e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <prvHeapInit+0xbc>)
 8003826:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <prvHeapInit+0xc0>)
 800382a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	20000194 	.word	0x20000194
 8003840:	20012d94 	.word	0x20012d94
 8003844:	20012d9c 	.word	0x20012d9c
 8003848:	20012da4 	.word	0x20012da4
 800384c:	20012da0 	.word	0x20012da0
 8003850:	20012db0 	.word	0x20012db0

08003854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <prvInsertBlockIntoFreeList+0xac>)
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e002      	b.n	8003868 <prvInsertBlockIntoFreeList+0x14>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d8f7      	bhi.n	8003862 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4413      	add	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d108      	bne.n	8003896 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	441a      	add	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	441a      	add	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d118      	bne.n	80038dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <prvInsertBlockIntoFreeList+0xb0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d00d      	beq.n	80038d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	441a      	add	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e008      	b.n	80038e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <prvInsertBlockIntoFreeList+0xb0>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e003      	b.n	80038e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d002      	beq.n	80038f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20012d94 	.word	0x20012d94
 8003904:	20012d9c 	.word	0x20012d9c

08003908 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003916:	2205      	movs	r2, #5
 8003918:	492b      	ldr	r1, [pc, #172]	; (80039c8 <SYSVIEW_AddTask+0xc0>)
 800391a:	68b8      	ldr	r0, [r7, #8]
 800391c:	f001 fc70 	bl	8005200 <memcmp>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d04b      	beq.n	80039be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b07      	cmp	r3, #7
 800392c:	d903      	bls.n	8003936 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800392e:	4828      	ldr	r0, [pc, #160]	; (80039d0 <SYSVIEW_AddTask+0xc8>)
 8003930:	f001 fbe6 	bl	8005100 <SEGGER_SYSVIEW_Warn>
    return;
 8003934:	e044      	b.n	80039c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003936:	4b25      	ldr	r3, [pc, #148]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4926      	ldr	r1, [pc, #152]	; (80039d4 <SYSVIEW_AddTask+0xcc>)
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4921      	ldr	r1, [pc, #132]	; (80039d4 <SYSVIEW_AddTask+0xcc>)
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3304      	adds	r3, #4
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	491b      	ldr	r1, [pc, #108]	; (80039d4 <SYSVIEW_AddTask+0xcc>)
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3308      	adds	r3, #8
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4916      	ldr	r1, [pc, #88]	; (80039d4 <SYSVIEW_AddTask+0xcc>)
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	330c      	adds	r3, #12
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4910      	ldr	r1, [pc, #64]	; (80039d4 <SYSVIEW_AddTask+0xcc>)
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	3310      	adds	r3, #16
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3301      	adds	r3, #1
 80039a8:	4a08      	ldr	r2, [pc, #32]	; (80039cc <SYSVIEW_AddTask+0xc4>)
 80039aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f8ca 	bl	8003b50 <SYSVIEW_SendTaskInfo>
 80039bc:	e000      	b.n	80039c0 <SYSVIEW_AddTask+0xb8>
    return;
 80039be:	bf00      	nop

}
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	080052a4 	.word	0x080052a4
 80039cc:	20012e54 	.word	0x20012e54
 80039d0:	080052ac 	.word	0x080052ac
 80039d4:	20012db4 	.word	0x20012db4

080039d8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80ab 	beq.w	8003b40 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e00d      	b.n	8003a0c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80039f0:	4956      	ldr	r1, [pc, #344]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d008      	beq.n	8003a18 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d3ec      	bcc.n	80039f0 <SYSVIEW_DeleteTask+0x18>
 8003a16:	e000      	b.n	8003a1a <SYSVIEW_DeleteTask+0x42>
      break;
 8003a18:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003a1a:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d111      	bne.n	8003a4a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a46      	ldr	r2, [pc, #280]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003a32:	4413      	add	r3, r2
 8003a34:	2214      	movs	r2, #20
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fbff 	bl	800523c <memset>
    _NumTasks--;
 8003a3e:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e07b      	b.n	8003b42 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d276      	bcs.n	8003b42 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003a54:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1e5a      	subs	r2, r3, #1
 8003a5a:	493c      	ldr	r1, [pc, #240]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	4838      	ldr	r0, [pc, #224]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4403      	add	r3, r0
 8003a76:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003a78:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	4933      	ldr	r1, [pc, #204]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	482f      	ldr	r0, [pc, #188]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4403      	add	r3, r0
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	4929      	ldr	r1, [pc, #164]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	4825      	ldr	r0, [pc, #148]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4403      	add	r3, r0
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1e5a      	subs	r2, r3, #1
 8003ace:	491f      	ldr	r1, [pc, #124]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	330c      	adds	r3, #12
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	481b      	ldr	r0, [pc, #108]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4403      	add	r3, r0
 8003aec:	330c      	adds	r3, #12
 8003aee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	4915      	ldr	r1, [pc, #84]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3310      	adds	r3, #16
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	4811      	ldr	r0, [pc, #68]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4403      	add	r3, r0
 8003b14:	3310      	adds	r3, #16
 8003b16:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <SYSVIEW_DeleteTask+0x174>)
 8003b28:	4413      	add	r3, r2
 8003b2a:	2214      	movs	r2, #20
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fb84 	bl	800523c <memset>
    _NumTasks--;
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <SYSVIEW_DeleteTask+0x170>)
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e000      	b.n	8003b42 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003b40:	bf00      	nop
  }
}
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20012e54 	.word	0x20012e54
 8003b4c:	20012db4 	.word	0x20012db4

08003b50 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	2214      	movs	r2, #20
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 fb68 	bl	800523c <memset>
  TaskInfo.TaskID     = TaskID;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fedf 	bl	8004948 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b8a:	bf00      	nop
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <_DoInit+0xa0>)
 8003b9c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003b9e:	22a8      	movs	r2, #168	; 0xa8
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	f001 fb4a 	bl	800523c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2203      	movs	r2, #3
 8003bac:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <_DoInit+0xa4>)
 8003bb8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <_DoInit+0xa8>)
 8003bbe:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <_DoInit+0xa4>)
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <_DoInit+0xac>)
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2210      	movs	r2, #16
 8003bea:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003bfe:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c02:	2300      	movs	r3, #0
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	e00c      	b.n	8003c22 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1c3 030f 	rsb	r3, r3, #15
 8003c0e:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <_DoInit+0xb0>)
 8003c10:	5cd1      	ldrb	r1, [r2, r3]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	460a      	mov	r2, r1
 8003c1a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0f      	cmp	r3, #15
 8003c26:	d9ef      	bls.n	8003c08 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c28:	f3bf 8f5f 	dmb	sy
}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20012e58 	.word	0x20012e58
 8003c38:	080052fc 	.word	0x080052fc
 8003c3c:	20012f00 	.word	0x20012f00
 8003c40:	20013300 	.word	0x20013300
 8003c44:	08005320 	.word	0x08005320

08003c48 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c54:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <SEGGER_RTT_ReadNoLock+0x1e>
 8003c62:	f7ff ff97 	bl	8003b94 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	3360      	adds	r3, #96	; 0x60
 8003c72:	4a37      	ldr	r2, [pc, #220]	; (8003d50 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c74:	4413      	add	r3, r2
 8003c76:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d92b      	bls.n	8003cec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bf28      	it	cs
 8003ca6:	4613      	movcs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	4413      	add	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6939      	ldr	r1, [r7, #16]
 8003cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cba:	f001 fab1 	bl	8005220 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4413      	add	r3, r2
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d101      	bne.n	8003cec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bf28      	it	cs
 8003cfc:	4613      	movcs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d019      	beq.n	8003d3a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	4413      	add	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	6939      	ldr	r1, [r7, #16]
 8003d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d16:	f001 fa83 	bl	8005220 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4413      	add	r3, r2
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4413      	add	r3, r2
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4413      	add	r3, r2
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d44:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3730      	adds	r7, #48	; 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20012e58 	.word	0x20012e58

08003d54 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	60fa      	str	r2, [r7, #12]
 8003d6a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d90a      	bls.n	8003d88 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003d76:	e007      	b.n	8003d88 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	1c53      	adds	r3, r2, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1c59      	adds	r1, r3, #1
 8003d82:	60f9      	str	r1, [r7, #12]
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <_EncodeStr+0x46>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ee      	bne.n	8003d78 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003da6:	68fb      	ldr	r3, [r7, #12]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3307      	adds	r3, #7
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003dd2:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <_HandleIncomingPacket+0xdc>)
 8003dd4:	7e1b      	ldrb	r3, [r3, #24]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	1cfb      	adds	r3, r7, #3
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f7ff ff33 	bl	8003c48 <SEGGER_RTT_ReadNoLock>
 8003de2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d052      	beq.n	8003e90 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	2b80      	cmp	r3, #128	; 0x80
 8003dee:	d031      	beq.n	8003e54 <_HandleIncomingPacket+0x88>
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	dc40      	bgt.n	8003e76 <_HandleIncomingPacket+0xaa>
 8003df4:	2b07      	cmp	r3, #7
 8003df6:	dc15      	bgt.n	8003e24 <_HandleIncomingPacket+0x58>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	dd3c      	ble.n	8003e76 <_HandleIncomingPacket+0xaa>
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d839      	bhi.n	8003e76 <_HandleIncomingPacket+0xaa>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <_HandleIncomingPacket+0x3c>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e2b 	.word	0x08003e2b
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e37 	.word	0x08003e37
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e49 	.word	0x08003e49
 8003e20:	08003e4f 	.word	0x08003e4f
 8003e24:	2b7f      	cmp	r3, #127	; 0x7f
 8003e26:	d035      	beq.n	8003e94 <_HandleIncomingPacket+0xc8>
 8003e28:	e025      	b.n	8003e76 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003e2a:	f000 fc13 	bl	8004654 <SEGGER_SYSVIEW_Start>
      break;
 8003e2e:	e036      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003e30:	f000 fcca 	bl	80047c8 <SEGGER_SYSVIEW_Stop>
      break;
 8003e34:	e033      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003e36:	f000 fe7f 	bl	8004b38 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003e3a:	e030      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003e3c:	f000 fe68 	bl	8004b10 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003e40:	e02d      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003e42:	f000 fce7 	bl	8004814 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003e46:	e02a      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003e48:	f001 f91c 	bl	8005084 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003e4c:	e027      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003e4e:	f001 f8fb 	bl	8005048 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003e52:	e024      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <_HandleIncomingPacket+0xdc>)
 8003e56:	7e1b      	ldrb	r3, [r3, #24]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	1cfb      	adds	r3, r7, #3
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7ff fef2 	bl	8003c48 <SEGGER_RTT_ReadNoLock>
 8003e64:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 f860 	bl	8004f34 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003e74:	e010      	b.n	8003e98 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da0e      	bge.n	8003e9c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <_HandleIncomingPacket+0xdc>)
 8003e80:	7e1b      	ldrb	r3, [r3, #24]
 8003e82:	4618      	mov	r0, r3
 8003e84:	1cfb      	adds	r3, r7, #3
 8003e86:	2201      	movs	r2, #1
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f7ff fedd 	bl	8003c48 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003e8e:	e005      	b.n	8003e9c <_HandleIncomingPacket+0xd0>
    }
  }
 8003e90:	bf00      	nop
 8003e92:	e004      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
      break;
 8003e94:	bf00      	nop
 8003e96:	e002      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <_HandleIncomingPacket+0xd2>
      break;
 8003e9c:	bf00      	nop
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20013310 	.word	0x20013310

08003eac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08c      	sub	sp, #48	; 0x30
 8003eb0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	3301      	adds	r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec6:	e00b      	b.n	8003ee0 <_TrySendOverflowPacket+0x34>
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	09db      	lsrs	r3, r3, #7
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee4:	d8f0      	bhi.n	8003ec8 <_TrySendOverflowPacket+0x1c>
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <_TrySendOverflowPacket+0xe0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	e00b      	b.n	8003f28 <_TrySendOverflowPacket+0x7c>
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	6279      	str	r1, [r7, #36]	; 0x24
 8003f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	09db      	lsrs	r3, r3, #7
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f2c:	d8f0      	bhi.n	8003f10 <_TrySendOverflowPacket+0x64>
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	627a      	str	r2, [r7, #36]	; 0x24
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003f40:	785b      	ldrb	r3, [r3, #1]
 8003f42:	4618      	mov	r0, r3
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f7fc f93e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f54:	4603      	mov	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	e004      	b.n	8003f7c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a03      	ldr	r2, [pc, #12]	; (8003f88 <_TrySendOverflowPacket+0xdc>)
 8003f7a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003f7c:	693b      	ldr	r3, [r7, #16]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3730      	adds	r7, #48	; 0x30
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20013310 	.word	0x20013310
 8003f8c:	e0001004 	.word	0xe0001004

08003f90 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003f9c:	4b98      	ldr	r3, [pc, #608]	; (8004200 <_SendPacket+0x270>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d010      	beq.n	8003fc6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003fa4:	4b96      	ldr	r3, [pc, #600]	; (8004200 <_SendPacket+0x270>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 812d 	beq.w	8004208 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003fae:	4b94      	ldr	r3, [pc, #592]	; (8004200 <_SendPacket+0x270>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d109      	bne.n	8003fca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003fb6:	f7ff ff79 	bl	8003eac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003fba:	4b91      	ldr	r3, [pc, #580]	; (8004200 <_SendPacket+0x270>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	f040 8124 	bne.w	800420c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003fc4:	e001      	b.n	8003fca <_SendPacket+0x3a>
    goto Send;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <_SendPacket+0x3c>
Send:
 8003fca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b1f      	cmp	r3, #31
 8003fd0:	d809      	bhi.n	8003fe6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003fd2:	4b8b      	ldr	r3, [pc, #556]	; (8004200 <_SendPacket+0x270>)
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8115 	bne.w	8004210 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b17      	cmp	r3, #23
 8003fea:	d807      	bhi.n	8003ffc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e0c4      	b.n	8004186 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b7f      	cmp	r3, #127	; 0x7f
 8004008:	d912      	bls.n	8004030 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	09da      	lsrs	r2, r3, #7
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	3a01      	subs	r2, #1
 8004022:	60fa      	str	r2, [r7, #12]
 8004024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e006      	b.n	800403e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b01      	subs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b7e      	cmp	r3, #126	; 0x7e
 8004042:	d807      	bhi.n	8004054 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e098      	b.n	8004186 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405a:	d212      	bcs.n	8004082 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	09da      	lsrs	r2, r3, #7
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3b01      	subs	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	3a01      	subs	r2, #1
 8004074:	60fa      	str	r2, [r7, #12]
 8004076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800407a:	b2da      	uxtb	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e081      	b.n	8004186 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004088:	d21d      	bcs.n	80040c6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0b9a      	lsrs	r2, r3, #14
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b01      	subs	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	09db      	lsrs	r3, r3, #7
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	3a01      	subs	r2, #1
 80040a4:	60fa      	str	r2, [r7, #12]
 80040a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	3a01      	subs	r2, #1
 80040b8:	60fa      	str	r2, [r7, #12]
 80040ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e05f      	b.n	8004186 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040cc:	d228      	bcs.n	8004120 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0d5a      	lsrs	r2, r3, #21
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0b9b      	lsrs	r3, r3, #14
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	3a01      	subs	r2, #1
 80040e8:	60fa      	str	r2, [r7, #12]
 80040ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	09db      	lsrs	r3, r3, #7
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	3a01      	subs	r2, #1
 80040fe:	60fa      	str	r2, [r7, #12]
 8004100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004104:	b2da      	uxtb	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	3a01      	subs	r2, #1
 8004112:	60fa      	str	r2, [r7, #12]
 8004114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e032      	b.n	8004186 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	0f1a      	lsrs	r2, r3, #28
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3b01      	subs	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0d5b      	lsrs	r3, r3, #21
 8004134:	b2db      	uxtb	r3, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	3a01      	subs	r2, #1
 800413a:	60fa      	str	r2, [r7, #12]
 800413c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0b9b      	lsrs	r3, r3, #14
 800414a:	b2db      	uxtb	r3, r3
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	3a01      	subs	r2, #1
 8004150:	60fa      	str	r2, [r7, #12]
 8004152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	09db      	lsrs	r3, r3, #7
 8004160:	b2db      	uxtb	r3, r3
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	3a01      	subs	r2, #1
 8004166:	60fa      	str	r2, [r7, #12]
 8004168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	3a01      	subs	r2, #1
 800417a:	60fa      	str	r2, [r7, #12]
 800417c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004186:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <_SendPacket+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <_SendPacket+0x270>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	e00b      	b.n	80041b8 <_SendPacket+0x228>
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	1c59      	adds	r1, r3, #1
 80041a8:	6279      	str	r1, [r7, #36]	; 0x24
 80041aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	09db      	lsrs	r3, r3, #7
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	2b7f      	cmp	r3, #127	; 0x7f
 80041bc:	d8f0      	bhi.n	80041a0 <_SendPacket+0x210>
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	627a      	str	r2, [r7, #36]	; 0x24
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <_SendPacket+0x270>)
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	4618      	mov	r0, r3
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	68f9      	ldr	r1, [r7, #12]
 80041de:	f7fb fff7 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041e2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041ea:	4a05      	ldr	r2, [pc, #20]	; (8004200 <_SendPacket+0x270>)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	60d3      	str	r3, [r2, #12]
 80041f0:	e00f      	b.n	8004212 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80041f2:	4b03      	ldr	r3, [pc, #12]	; (8004200 <_SendPacket+0x270>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b01      	ldr	r3, [pc, #4]	; (8004200 <_SendPacket+0x270>)
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e008      	b.n	8004212 <_SendPacket+0x282>
 8004200:	20013310 	.word	0x20013310
 8004204:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004208:	bf00      	nop
 800420a:	e002      	b.n	8004212 <_SendPacket+0x282>
      goto SendDone;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <_SendPacket+0x282>
      goto SendDone;
 8004210:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <_SendPacket+0x2d4>)
 8004214:	7e1b      	ldrb	r3, [r3, #24]
 8004216:	4619      	mov	r1, r3
 8004218:	4a13      	ldr	r2, [pc, #76]	; (8004268 <_SendPacket+0x2d8>)
 800421a:	460b      	mov	r3, r1
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	440b      	add	r3, r1
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	336c      	adds	r3, #108	; 0x6c
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <_SendPacket+0x2d4>)
 800422a:	7e1b      	ldrb	r3, [r3, #24]
 800422c:	4618      	mov	r0, r3
 800422e:	490e      	ldr	r1, [pc, #56]	; (8004268 <_SendPacket+0x2d8>)
 8004230:	4603      	mov	r3, r0
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4403      	add	r3, r0
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	3370      	adds	r3, #112	; 0x70
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d00b      	beq.n	800425a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <_SendPacket+0x2d4>)
 8004244:	789b      	ldrb	r3, [r3, #2]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <_SendPacket+0x2d4>)
 800424c:	2201      	movs	r2, #1
 800424e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004250:	f7ff fdbc 	bl	8003dcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <_SendPacket+0x2d4>)
 8004256:	2200      	movs	r2, #0
 8004258:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800425a:	bf00      	nop
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20013310 	.word	0x20013310
 8004268:	20012e58 	.word	0x20012e58

0800426c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004274:	f3ef 8311 	mrs	r3, BASEPRI
 8004278:	f04f 0120 	mov.w	r1, #32
 800427c:	f381 8811 	msr	BASEPRI, r1
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4808      	ldr	r0, [pc, #32]	; (80042a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004284:	f7ff fd96 	bl	8003db4 <_PreparePacket>
 8004288:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f7ff fe7e 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f383 8811 	msr	BASEPRI, r3
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20013340 	.word	0x20013340

080042a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042b2:	f3ef 8311 	mrs	r3, BASEPRI
 80042b6:	f04f 0120 	mov.w	r1, #32
 80042ba:	f381 8811 	msr	BASEPRI, r1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	4816      	ldr	r0, [pc, #88]	; (800431c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80042c2:	f7ff fd77 	bl	8003db4 <_PreparePacket>
 80042c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	e00b      	b.n	80042ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	1c59      	adds	r1, r3, #1
 80042de:	61f9      	str	r1, [r7, #28]
 80042e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	09db      	lsrs	r3, r3, #7
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b7f      	cmp	r3, #127	; 0x7f
 80042f2:	d8f0      	bhi.n	80042d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	61fa      	str	r2, [r7, #28]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	6938      	ldr	r0, [r7, #16]
 800430a:	f7ff fe41 	bl	8003f90 <_SendPacket>
  RECORD_END();
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f383 8811 	msr	BASEPRI, r3
}
 8004314:	bf00      	nop
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20013340 	.word	0x20013340

08004320 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	; 0x30
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800432c:	f3ef 8311 	mrs	r3, BASEPRI
 8004330:	f04f 0120 	mov.w	r1, #32
 8004334:	f381 8811 	msr	BASEPRI, r1
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	4825      	ldr	r0, [pc, #148]	; (80043d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800433c:	f7ff fd3a 	bl	8003db4 <_PreparePacket>
 8004340:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	e00b      	b.n	8004368 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	b2da      	uxtb	r2, r3
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	1c59      	adds	r1, r3, #1
 8004358:	62f9      	str	r1, [r7, #44]	; 0x2c
 800435a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	09db      	lsrs	r3, r3, #7
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b7f      	cmp	r3, #127	; 0x7f
 800436c:	d8f0      	bhi.n	8004350 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	e00b      	b.n	80043a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	1c59      	adds	r1, r3, #1
 8004390:	6279      	str	r1, [r7, #36]	; 0x24
 8004392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	09db      	lsrs	r3, r3, #7
 800439e:	623b      	str	r3, [r7, #32]
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	2b7f      	cmp	r3, #127	; 0x7f
 80043a4:	d8f0      	bhi.n	8004388 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	627a      	str	r2, [r7, #36]	; 0x24
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	6979      	ldr	r1, [r7, #20]
 80043ba:	69b8      	ldr	r0, [r7, #24]
 80043bc:	f7ff fde8 	bl	8003f90 <_SendPacket>
  RECORD_END();
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f383 8811 	msr	BASEPRI, r3
}
 80043c6:	bf00      	nop
 80043c8:	3730      	adds	r7, #48	; 0x30
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20013340 	.word	0x20013340

080043d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b090      	sub	sp, #64	; 0x40
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80043e2:	f3ef 8311 	mrs	r3, BASEPRI
 80043e6:	f04f 0120 	mov.w	r1, #32
 80043ea:	f381 8811 	msr	BASEPRI, r1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	4840      	ldr	r0, [pc, #256]	; (80044f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80043f2:	f7ff fcdf 	bl	8003db4 <_PreparePacket>
 80043f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
 8004404:	e00b      	b.n	800441e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	b2da      	uxtb	r2, r3
 800440a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440c:	1c59      	adds	r1, r3, #1
 800440e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	09db      	lsrs	r3, r3, #7
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	2b7f      	cmp	r3, #127	; 0x7f
 8004422:	d8f0      	bhi.n	8004406 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	63fa      	str	r2, [r7, #60]	; 0x3c
 800442a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
 800443c:	e00b      	b.n	8004456 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	b2da      	uxtb	r2, r3
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	1c59      	adds	r1, r3, #1
 8004446:	6379      	str	r1, [r7, #52]	; 0x34
 8004448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	09db      	lsrs	r3, r3, #7
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	2b7f      	cmp	r3, #127	; 0x7f
 800445a:	d8f0      	bhi.n	800443e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	637a      	str	r2, [r7, #52]	; 0x34
 8004462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
 8004474:	e00b      	b.n	800448e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	b2da      	uxtb	r2, r3
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	1c59      	adds	r1, r3, #1
 800447e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	09db      	lsrs	r3, r3, #7
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2b7f      	cmp	r3, #127	; 0x7f
 8004492:	d8f0      	bhi.n	8004476 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
 80044a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	e00b      	b.n	80044c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1c59      	adds	r1, r3, #1
 80044b6:	6279      	str	r1, [r7, #36]	; 0x24
 80044b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	09db      	lsrs	r3, r3, #7
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	2b7f      	cmp	r3, #127	; 0x7f
 80044ca:	d8f0      	bhi.n	80044ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	627a      	str	r2, [r7, #36]	; 0x24
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	69b8      	ldr	r0, [r7, #24]
 80044e2:	f7ff fd55 	bl	8003f90 <_SendPacket>
  RECORD_END();
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f383 8811 	msr	BASEPRI, r3
}
 80044ec:	bf00      	nop
 80044ee:	3740      	adds	r7, #64	; 0x40
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20013340 	.word	0x20013340

080044f8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b092      	sub	sp, #72	; 0x48
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004506:	f3ef 8311 	mrs	r3, BASEPRI
 800450a:	f04f 0120 	mov.w	r1, #32
 800450e:	f381 8811 	msr	BASEPRI, r1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	484e      	ldr	r0, [pc, #312]	; (8004650 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004516:	f7ff fc4d 	bl	8003db4 <_PreparePacket>
 800451a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	647b      	str	r3, [r7, #68]	; 0x44
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	643b      	str	r3, [r7, #64]	; 0x40
 8004528:	e00b      	b.n	8004542 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800452a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452c:	b2da      	uxtb	r2, r3
 800452e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	6479      	str	r1, [r7, #68]	; 0x44
 8004534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453e:	09db      	lsrs	r3, r3, #7
 8004540:	643b      	str	r3, [r7, #64]	; 0x40
 8004542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004544:	2b7f      	cmp	r3, #127	; 0x7f
 8004546:	d8f0      	bhi.n	800452a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8004548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	647a      	str	r2, [r7, #68]	; 0x44
 800454e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004556:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004560:	e00b      	b.n	800457a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	b2da      	uxtb	r2, r3
 8004566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004568:	1c59      	adds	r1, r3, #1
 800456a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800456c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	09db      	lsrs	r3, r3, #7
 8004578:	63bb      	str	r3, [r7, #56]	; 0x38
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	2b7f      	cmp	r3, #127	; 0x7f
 800457e:	d8f0      	bhi.n	8004562 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8004580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
 8004598:	e00b      	b.n	80045b2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	b2da      	uxtb	r2, r3
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	1c59      	adds	r1, r3, #1
 80045a2:	6379      	str	r1, [r7, #52]	; 0x34
 80045a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	09db      	lsrs	r3, r3, #7
 80045b0:	633b      	str	r3, [r7, #48]	; 0x30
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	2b7f      	cmp	r3, #127	; 0x7f
 80045b6:	d8f0      	bhi.n	800459a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	637a      	str	r2, [r7, #52]	; 0x34
 80045be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d0:	e00b      	b.n	80045ea <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	1c59      	adds	r1, r3, #1
 80045da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	09db      	lsrs	r3, r3, #7
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	2b7f      	cmp	r3, #127	; 0x7f
 80045ee:	d8f0      	bhi.n	80045d2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004606:	623b      	str	r3, [r7, #32]
 8004608:	e00b      	b.n	8004622 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1c59      	adds	r1, r3, #1
 8004612:	6279      	str	r1, [r7, #36]	; 0x24
 8004614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	09db      	lsrs	r3, r3, #7
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	2b7f      	cmp	r3, #127	; 0x7f
 8004626:	d8f0      	bhi.n	800460a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	627a      	str	r2, [r7, #36]	; 0x24
 800462e:	6a3a      	ldr	r2, [r7, #32]
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	69b8      	ldr	r0, [r7, #24]
 800463e:	f7ff fca7 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f383 8811 	msr	BASEPRI, r3
}
 8004648:	bf00      	nop
 800464a:	3748      	adds	r7, #72	; 0x48
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20013340 	.word	0x20013340

08004654 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800465a:	4b58      	ldr	r3, [pc, #352]	; (80047bc <SEGGER_SYSVIEW_Start+0x168>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004660:	f3ef 8311 	mrs	r3, BASEPRI
 8004664:	f04f 0120 	mov.w	r1, #32
 8004668:	f381 8811 	msr	BASEPRI, r1
 800466c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <SEGGER_SYSVIEW_Start+0x168>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	220a      	movs	r2, #10
 8004674:	4952      	ldr	r1, [pc, #328]	; (80047c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004676:	4618      	mov	r0, r3
 8004678:	f7fb fdaa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004682:	200a      	movs	r0, #10
 8004684:	f7ff fdf2 	bl	800426c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004688:	f3ef 8311 	mrs	r3, BASEPRI
 800468c:	f04f 0120 	mov.w	r1, #32
 8004690:	f381 8811 	msr	BASEPRI, r1
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	484b      	ldr	r0, [pc, #300]	; (80047c4 <SEGGER_SYSVIEW_Start+0x170>)
 8004698:	f7ff fb8c 	bl	8003db4 <_PreparePacket>
 800469c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a6:	4b45      	ldr	r3, [pc, #276]	; (80047bc <SEGGER_SYSVIEW_Start+0x168>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ac:	e00b      	b.n	80046c6 <SEGGER_SYSVIEW_Start+0x72>
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ca:	d8f0      	bhi.n	80046ae <SEGGER_SYSVIEW_Start+0x5a>
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <SEGGER_SYSVIEW_Start+0x168>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	e00b      	b.n	8004700 <SEGGER_SYSVIEW_Start+0xac>
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	1c59      	adds	r1, r3, #1
 80046f0:	6279      	str	r1, [r7, #36]	; 0x24
 80046f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	09db      	lsrs	r3, r3, #7
 80046fe:	623b      	str	r3, [r7, #32]
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2b7f      	cmp	r3, #127	; 0x7f
 8004704:	d8f0      	bhi.n	80046e8 <SEGGER_SYSVIEW_Start+0x94>
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	627a      	str	r2, [r7, #36]	; 0x24
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	4b28      	ldr	r3, [pc, #160]	; (80047bc <SEGGER_SYSVIEW_Start+0x168>)
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e00b      	b.n	800473a <SEGGER_SYSVIEW_Start+0xe6>
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	1c59      	adds	r1, r3, #1
 800472a:	61f9      	str	r1, [r7, #28]
 800472c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	09db      	lsrs	r3, r3, #7
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b7f      	cmp	r3, #127	; 0x7f
 800473e:	d8f0      	bhi.n	8004722 <SEGGER_SYSVIEW_Start+0xce>
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e00b      	b.n	8004772 <SEGGER_SYSVIEW_Start+0x11e>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	b2da      	uxtb	r2, r3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	1c59      	adds	r1, r3, #1
 8004762:	6179      	str	r1, [r7, #20]
 8004764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	09db      	lsrs	r3, r3, #7
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b7f      	cmp	r3, #127	; 0x7f
 8004776:	d8f0      	bhi.n	800475a <SEGGER_SYSVIEW_Start+0x106>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	617a      	str	r2, [r7, #20]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004788:	2218      	movs	r2, #24
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fbff 	bl	8003f90 <_SendPacket>
      RECORD_END();
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <SEGGER_SYSVIEW_Start+0x168>)
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <SEGGER_SYSVIEW_Start+0x168>)
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80047a6:	f000 f9c7 	bl	8004b38 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80047aa:	f000 f9b1 	bl	8004b10 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80047ae:	f000 fc69 	bl	8005084 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80047b2:	bf00      	nop
 80047b4:	3730      	adds	r7, #48	; 0x30
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20013310 	.word	0x20013310
 80047c0:	08005334 	.word	0x08005334
 80047c4:	20013340 	.word	0x20013340

080047c8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047ce:	f3ef 8311 	mrs	r3, BASEPRI
 80047d2:	f04f 0120 	mov.w	r1, #32
 80047d6:	f381 8811 	msr	BASEPRI, r1
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	480b      	ldr	r0, [pc, #44]	; (800480c <SEGGER_SYSVIEW_Stop+0x44>)
 80047de:	f7ff fae9 	bl	8003db4 <_PreparePacket>
 80047e2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <SEGGER_SYSVIEW_Stop+0x48>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80047ec:	220b      	movs	r2, #11
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	6838      	ldr	r0, [r7, #0]
 80047f2:	f7ff fbcd 	bl	8003f90 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <SEGGER_SYSVIEW_Stop+0x48>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f383 8811 	msr	BASEPRI, r3
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20013340 	.word	0x20013340
 8004810:	20013310 	.word	0x20013310

08004814 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b08c      	sub	sp, #48	; 0x30
 8004818:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800481a:	f3ef 8311 	mrs	r3, BASEPRI
 800481e:	f04f 0120 	mov.w	r1, #32
 8004822:	f381 8811 	msr	BASEPRI, r1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	4845      	ldr	r0, [pc, #276]	; (8004940 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800482a:	f7ff fac3 	bl	8003db4 <_PreparePacket>
 800482e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004838:	4b42      	ldr	r3, [pc, #264]	; (8004944 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
 800483e:	e00b      	b.n	8004858 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	b2da      	uxtb	r2, r3
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	62f9      	str	r1, [r7, #44]	; 0x2c
 800484a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	09db      	lsrs	r3, r3, #7
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	2b7f      	cmp	r3, #127	; 0x7f
 800485c:	d8f0      	bhi.n	8004840 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	4b34      	ldr	r3, [pc, #208]	; (8004944 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	e00b      	b.n	8004892 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	6279      	str	r1, [r7, #36]	; 0x24
 8004884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	2b7f      	cmp	r3, #127	; 0x7f
 8004896:	d8f0      	bhi.n	800487a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	627a      	str	r2, [r7, #36]	; 0x24
 800489e:	6a3a      	ldr	r2, [r7, #32]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e00b      	b.n	80048cc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	61f9      	str	r1, [r7, #28]
 80048be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	09db      	lsrs	r3, r3, #7
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b7f      	cmp	r3, #127	; 0x7f
 80048d0:	d8f0      	bhi.n	80048b4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	61fa      	str	r2, [r7, #28]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e00b      	b.n	8004904 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1c59      	adds	r1, r3, #1
 80048f4:	6179      	str	r1, [r7, #20]
 80048f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	09db      	lsrs	r3, r3, #7
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b7f      	cmp	r3, #127	; 0x7f
 8004908:	d8f0      	bhi.n	80048ec <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	617a      	str	r2, [r7, #20]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800491a:	2218      	movs	r2, #24
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	68b8      	ldr	r0, [r7, #8]
 8004920:	f7ff fb36 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	4798      	blx	r3
  }
}
 8004938:	bf00      	nop
 800493a:	3730      	adds	r7, #48	; 0x30
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20013340 	.word	0x20013340
 8004944:	20013310 	.word	0x20013310

08004948 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b092      	sub	sp, #72	; 0x48
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004950:	f3ef 8311 	mrs	r3, BASEPRI
 8004954:	f04f 0120 	mov.w	r1, #32
 8004958:	f381 8811 	msr	BASEPRI, r1
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	486a      	ldr	r0, [pc, #424]	; (8004b08 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004960:	f7ff fa28 	bl	8003db4 <_PreparePacket>
 8004964:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b66      	ldr	r3, [pc, #408]	; (8004b0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
 800497a:	e00b      	b.n	8004994 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800497c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497e:	b2da      	uxtb	r2, r3
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	6479      	str	r1, [r7, #68]	; 0x44
 8004986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004990:	09db      	lsrs	r3, r3, #7
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
 8004994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004996:	2b7f      	cmp	r3, #127	; 0x7f
 8004998:	d8f0      	bhi.n	800497c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800499a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	647a      	str	r2, [r7, #68]	; 0x44
 80049a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b4:	e00b      	b.n	80049ce <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80049c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b7f      	cmp	r3, #127	; 0x7f
 80049d2:	d8f0      	bhi.n	80049b6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	4619      	mov	r1, r3
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff f9b1 	bl	8003d54 <_EncodeStr>
 80049f2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80049f4:	2209      	movs	r2, #9
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6938      	ldr	r0, [r7, #16]
 80049fa:	f7ff fac9 	bl	8003f90 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	633b      	str	r3, [r7, #48]	; 0x30
 8004a12:	e00b      	b.n	8004a2c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	6379      	str	r1, [r7, #52]	; 0x34
 8004a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	09db      	lsrs	r3, r3, #7
 8004a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a30:	d8f0      	bhi.n	8004a14 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	637a      	str	r2, [r7, #52]	; 0x34
 8004a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4c:	e00b      	b.n	8004a66 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	09db      	lsrs	r3, r3, #7
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	2b7f      	cmp	r3, #127	; 0x7f
 8004a6a:	d8f0      	bhi.n	8004a4e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	623b      	str	r3, [r7, #32]
 8004a86:	e00b      	b.n	8004aa0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	6279      	str	r1, [r7, #36]	; 0x24
 8004a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	09db      	lsrs	r3, r3, #7
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa4:	d8f0      	bhi.n	8004a88 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	627a      	str	r2, [r7, #36]	; 0x24
 8004aac:	6a3a      	ldr	r2, [r7, #32]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e00b      	b.n	8004ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	1c59      	adds	r1, r3, #1
 8004ac8:	61f9      	str	r1, [r7, #28]
 8004aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	09db      	lsrs	r3, r3, #7
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b7f      	cmp	r3, #127	; 0x7f
 8004adc:	d8f0      	bhi.n	8004ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	61fa      	str	r2, [r7, #28]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004aee:	2215      	movs	r2, #21
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	6938      	ldr	r0, [r7, #16]
 8004af4:	f7ff fa4c 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f383 8811 	msr	BASEPRI, r3
}
 8004afe:	bf00      	nop
 8004b00:	3748      	adds	r7, #72	; 0x48
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20013340 	.word	0x20013340
 8004b0c:	20013310 	.word	0x20013310

08004b10 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b26:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4798      	blx	r3
  }
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20013310 	.word	0x20013310

08004b38 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01a      	beq.n	8004b7c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d015      	beq.n	8004b7c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004b50:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4798      	blx	r3
 8004b58:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004b5c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	000a      	movs	r2, r1
 8004b6c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004b6e:	4613      	mov	r3, r2
 8004b70:	461a      	mov	r2, r3
 8004b72:	4621      	mov	r1, r4
 8004b74:	200d      	movs	r0, #13
 8004b76:	f7ff fbd3 	bl	8004320 <SEGGER_SYSVIEW_RecordU32x2>
 8004b7a:	e006      	b.n	8004b8a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4619      	mov	r1, r3
 8004b82:	200c      	movs	r0, #12
 8004b84:	f7ff fb90 	bl	80042a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20013310 	.word	0x20013310
 8004b98:	e0001004 	.word	0xe0001004

08004b9c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba6:	f04f 0120 	mov.w	r1, #32
 8004baa:	f381 8811 	msr	BASEPRI, r1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	4819      	ldr	r0, [pc, #100]	; (8004c18 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004bb2:	f7ff f8ff 	bl	8003db4 <_PreparePacket>
 8004bb6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004bbc:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	e00b      	b.n	8004be8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	6179      	str	r1, [r7, #20]
 8004bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	09db      	lsrs	r3, r3, #7
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b7f      	cmp	r3, #127	; 0x7f
 8004bec:	d8f0      	bhi.n	8004bd0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	617a      	str	r2, [r7, #20]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004bfe:	2202      	movs	r2, #2
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	68b8      	ldr	r0, [r7, #8]
 8004c04:	f7ff f9c4 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20013340 	.word	0x20013340
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c26:	f3ef 8311 	mrs	r3, BASEPRI
 8004c2a:	f04f 0120 	mov.w	r1, #32
 8004c2e:	f381 8811 	msr	BASEPRI, r1
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	4807      	ldr	r0, [pc, #28]	; (8004c54 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004c36:	f7ff f8bd 	bl	8003db4 <_PreparePacket>
 8004c3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f7ff f9a5 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f383 8811 	msr	BASEPRI, r3
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20013340 	.word	0x20013340

08004c58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c62:	f04f 0120 	mov.w	r1, #32
 8004c66:	f381 8811 	msr	BASEPRI, r1
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	4807      	ldr	r0, [pc, #28]	; (8004c8c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004c6e:	f7ff f8a1 	bl	8003db4 <_PreparePacket>
 8004c72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004c74:	2212      	movs	r2, #18
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	6838      	ldr	r0, [r7, #0]
 8004c7a:	f7ff f989 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f383 8811 	msr	BASEPRI, r3
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20013340 	.word	0x20013340

08004c90 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c96:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9a:	f04f 0120 	mov.w	r1, #32
 8004c9e:	f381 8811 	msr	BASEPRI, r1
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	4807      	ldr	r0, [pc, #28]	; (8004cc4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004ca6:	f7ff f885 	bl	8003db4 <_PreparePacket>
 8004caa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004cac:	2211      	movs	r2, #17
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	6838      	ldr	r0, [r7, #0]
 8004cb2:	f7ff f96d 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f383 8811 	msr	BASEPRI, r3
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20013340 	.word	0x20013340

08004cc8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd4:	f04f 0120 	mov.w	r1, #32
 8004cd8:	f381 8811 	msr	BASEPRI, r1
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	4819      	ldr	r0, [pc, #100]	; (8004d44 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004ce0:	f7ff f868 	bl	8003db4 <_PreparePacket>
 8004ce4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e00b      	b.n	8004d16 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	61f9      	str	r1, [r7, #28]
 8004d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	09db      	lsrs	r3, r3, #7
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1a:	d8f0      	bhi.n	8004cfe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	61fa      	str	r2, [r7, #28]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	6938      	ldr	r0, [r7, #16]
 8004d32:	f7ff f92d 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f383 8811 	msr	BASEPRI, r3
}
 8004d3c:	bf00      	nop
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20013340 	.word	0x20013340
 8004d48:	20013310 	.word	0x20013310

08004d4c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d54:	f3ef 8311 	mrs	r3, BASEPRI
 8004d58:	f04f 0120 	mov.w	r1, #32
 8004d5c:	f381 8811 	msr	BASEPRI, r1
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	4819      	ldr	r0, [pc, #100]	; (8004dc8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004d64:	f7ff f826 	bl	8003db4 <_PreparePacket>
 8004d68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d6e:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e00b      	b.n	8004d9a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	1c59      	adds	r1, r3, #1
 8004d8a:	61f9      	str	r1, [r7, #28]
 8004d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	09db      	lsrs	r3, r3, #7
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9e:	d8f0      	bhi.n	8004d82 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	61fa      	str	r2, [r7, #28]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004db0:	2204      	movs	r2, #4
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	6938      	ldr	r0, [r7, #16]
 8004db6:	f7ff f8eb 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f383 8811 	msr	BASEPRI, r3
}
 8004dc0:	bf00      	nop
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20013340 	.word	0x20013340
 8004dcc:	20013310 	.word	0x20013310

08004dd0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ddc:	f04f 0120 	mov.w	r1, #32
 8004de0:	f381 8811 	msr	BASEPRI, r1
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	4819      	ldr	r0, [pc, #100]	; (8004e4c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004de8:	f7fe ffe4 	bl	8003db4 <_PreparePacket>
 8004dec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004df2:	4b17      	ldr	r3, [pc, #92]	; (8004e50 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e00b      	b.n	8004e1e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	1c59      	adds	r1, r3, #1
 8004e0e:	61f9      	str	r1, [r7, #28]
 8004e10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	09db      	lsrs	r3, r3, #7
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b7f      	cmp	r3, #127	; 0x7f
 8004e22:	d8f0      	bhi.n	8004e06 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	61fa      	str	r2, [r7, #28]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004e34:	2206      	movs	r2, #6
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	6938      	ldr	r0, [r7, #16]
 8004e3a:	f7ff f8a9 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f383 8811 	msr	BASEPRI, r3
}
 8004e44:	bf00      	nop
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20013340 	.word	0x20013340
 8004e50:	20013310 	.word	0x20013310

08004e54 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e62:	f04f 0120 	mov.w	r1, #32
 8004e66:	f381 8811 	msr	BASEPRI, r1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	4827      	ldr	r0, [pc, #156]	; (8004f0c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004e6e:	f7fe ffa1 	bl	8003db4 <_PreparePacket>
 8004e72:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	623b      	str	r3, [r7, #32]
 8004e8a:	e00b      	b.n	8004ea4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	1c59      	adds	r1, r3, #1
 8004e94:	6279      	str	r1, [r7, #36]	; 0x24
 8004e96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	09db      	lsrs	r3, r3, #7
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea8:	d8f0      	bhi.n	8004e8c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	627a      	str	r2, [r7, #36]	; 0x24
 8004eb0:	6a3a      	ldr	r2, [r7, #32]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	e00b      	b.n	8004edc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	61f9      	str	r1, [r7, #28]
 8004ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	09db      	lsrs	r3, r3, #7
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee0:	d8f0      	bhi.n	8004ec4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	61fa      	str	r2, [r7, #28]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	68f9      	ldr	r1, [r7, #12]
 8004ef6:	6938      	ldr	r0, [r7, #16]
 8004ef8:	f7ff f84a 	bl	8003f90 <_SendPacket>
  RECORD_END();
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f383 8811 	msr	BASEPRI, r3
}
 8004f02:	bf00      	nop
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20013340 	.word	0x20013340
 8004f10:	20013310 	.word	0x20013310

08004f14 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	1ad3      	subs	r3, r2, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	20013310 	.word	0x20013310

08004f34 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f3e:	4b40      	ldr	r3, [pc, #256]	; (8005040 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d077      	beq.n	8005036 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004f46:	4b3e      	ldr	r3, [pc, #248]	; (8005040 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f50:	e008      	b.n	8004f64 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	3301      	adds	r3, #1
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3f2      	bcc.n	8004f52 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f6c:	e000      	b.n	8004f70 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f6e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d055      	beq.n	8005022 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f76:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7a:	f04f 0120 	mov.w	r1, #32
 8004f7e:	f381 8811 	msr	BASEPRI, r1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	482f      	ldr	r0, [pc, #188]	; (8005044 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004f86:	f7fe ff15 	bl	8003db4 <_PreparePacket>
 8004f8a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	623b      	str	r3, [r7, #32]
 8004f98:	e00b      	b.n	8004fb2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	1c59      	adds	r1, r3, #1
 8004fa2:	6279      	str	r1, [r7, #36]	; 0x24
 8004fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	09db      	lsrs	r3, r3, #7
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb6:	d8f0      	bhi.n	8004f9a <SEGGER_SYSVIEW_SendModule+0x66>
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	627a      	str	r2, [r7, #36]	; 0x24
 8004fbe:	6a3a      	ldr	r2, [r7, #32]
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	e00b      	b.n	8004fec <SEGGER_SYSVIEW_SendModule+0xb8>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	61f9      	str	r1, [r7, #28]
 8004fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	09db      	lsrs	r3, r3, #7
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff0:	d8f0      	bhi.n	8004fd4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	61fa      	str	r2, [r7, #28]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	4619      	mov	r1, r3
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7fe fea2 	bl	8003d54 <_EncodeStr>
 8005010:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005012:	2216      	movs	r2, #22
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	6938      	ldr	r0, [r7, #16]
 8005018:	f7fe ffba 	bl	8003f90 <_SendPacket>
      RECORD_END();
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <SEGGER_SYSVIEW_SendModule+0x102>
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4798      	blx	r3
    }
  }
}
 8005036:	bf00      	nop
 8005038:	3730      	adds	r7, #48	; 0x30
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20013338 	.word	0x20013338
 8005044:	20013340 	.word	0x20013340

08005048 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00f      	beq.n	8005076 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005056:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f2      	bne.n	800505c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20013338 	.word	0x20013338

08005084 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800508a:	f3ef 8311 	mrs	r3, BASEPRI
 800508e:	f04f 0120 	mov.w	r1, #32
 8005092:	f381 8811 	msr	BASEPRI, r1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	4817      	ldr	r0, [pc, #92]	; (80050f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800509a:	f7fe fe8b 	bl	8003db4 <_PreparePacket>
 800509e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	4b14      	ldr	r3, [pc, #80]	; (80050fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e00b      	b.n	80050c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	6179      	str	r1, [r7, #20]
 80050ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	09db      	lsrs	r3, r3, #7
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b7f      	cmp	r3, #127	; 0x7f
 80050cc:	d8f0      	bhi.n	80050b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	617a      	str	r2, [r7, #20]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80050de:	221b      	movs	r2, #27
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	68b8      	ldr	r0, [r7, #8]
 80050e4:	f7fe ff54 	bl	8003f90 <_SendPacket>
  RECORD_END();
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f383 8811 	msr	BASEPRI, r3
}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20013340 	.word	0x20013340
 80050fc:	2001333c 	.word	0x2001333c

08005100 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005108:	f3ef 8311 	mrs	r3, BASEPRI
 800510c:	f04f 0120 	mov.w	r1, #32
 8005110:	f381 8811 	msr	BASEPRI, r1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	4827      	ldr	r0, [pc, #156]	; (80051b4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005118:	f7fe fe4c 	bl	8003db4 <_PreparePacket>
 800511c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800511e:	2280      	movs	r2, #128	; 0x80
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	6938      	ldr	r0, [r7, #16]
 8005124:	f7fe fe16 	bl	8003d54 <_EncodeStr>
 8005128:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
 800512e:	2301      	movs	r3, #1
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	e00b      	b.n	800514c <SEGGER_SYSVIEW_Warn+0x4c>
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1c59      	adds	r1, r3, #1
 800513c:	6279      	str	r1, [r7, #36]	; 0x24
 800513e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	09db      	lsrs	r3, r3, #7
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	2b7f      	cmp	r3, #127	; 0x7f
 8005150:	d8f0      	bhi.n	8005134 <SEGGER_SYSVIEW_Warn+0x34>
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	627a      	str	r2, [r7, #36]	; 0x24
 8005158:	6a3a      	ldr	r2, [r7, #32]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e00b      	b.n	8005184 <SEGGER_SYSVIEW_Warn+0x84>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	61f9      	str	r1, [r7, #28]
 8005176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	09db      	lsrs	r3, r3, #7
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b7f      	cmp	r3, #127	; 0x7f
 8005188:	d8f0      	bhi.n	800516c <SEGGER_SYSVIEW_Warn+0x6c>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	61fa      	str	r2, [r7, #28]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800519a:	221a      	movs	r2, #26
 800519c:	68f9      	ldr	r1, [r7, #12]
 800519e:	6938      	ldr	r0, [r7, #16]
 80051a0:	f7fe fef6 	bl	8003f90 <_SendPacket>
  RECORD_END();
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f383 8811 	msr	BASEPRI, r3
}
 80051aa:	bf00      	nop
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20013340 	.word	0x20013340

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	; (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	; (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	; (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	; (80051fc <__libc_init_array+0x44>)
 80051cc:	f000 f83e 	bl	800524c <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	08005348 	.word	0x08005348
 80051f4:	08005348 	.word	0x08005348
 80051f8:	08005348 	.word	0x08005348
 80051fc:	0800534c 	.word	0x0800534c

08005200 <memcmp>:
 8005200:	b510      	push	{r4, lr}
 8005202:	3901      	subs	r1, #1
 8005204:	4402      	add	r2, r0
 8005206:	4290      	cmp	r0, r2
 8005208:	d101      	bne.n	800520e <memcmp+0xe>
 800520a:	2000      	movs	r0, #0
 800520c:	e005      	b.n	800521a <memcmp+0x1a>
 800520e:	7803      	ldrb	r3, [r0, #0]
 8005210:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005214:	42a3      	cmp	r3, r4
 8005216:	d001      	beq.n	800521c <memcmp+0x1c>
 8005218:	1b18      	subs	r0, r3, r4
 800521a:	bd10      	pop	{r4, pc}
 800521c:	3001      	adds	r0, #1
 800521e:	e7f2      	b.n	8005206 <memcmp+0x6>

08005220 <memcpy>:
 8005220:	440a      	add	r2, r1
 8005222:	4291      	cmp	r1, r2
 8005224:	f100 33ff 	add.w	r3, r0, #4294967295
 8005228:	d100      	bne.n	800522c <memcpy+0xc>
 800522a:	4770      	bx	lr
 800522c:	b510      	push	{r4, lr}
 800522e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005236:	4291      	cmp	r1, r2
 8005238:	d1f9      	bne.n	800522e <memcpy+0xe>
 800523a:	bd10      	pop	{r4, pc}

0800523c <memset>:
 800523c:	4402      	add	r2, r0
 800523e:	4603      	mov	r3, r0
 8005240:	4293      	cmp	r3, r2
 8005242:	d100      	bne.n	8005246 <memset+0xa>
 8005244:	4770      	bx	lr
 8005246:	f803 1b01 	strb.w	r1, [r3], #1
 800524a:	e7f9      	b.n	8005240 <memset+0x4>

0800524c <_init>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr

08005258 <_fini>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr
